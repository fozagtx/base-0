{
  "0x706025ac4f95c6c55c71e85c42188015e0e0f6c4eb9f521fe4197a81b77c619e": {
    "name": "FilecoinCIDStore",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "FilecoinCIDStore",
      "sourceName": "contracts/FilecoinCIDStore.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "ActorNotFound",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "FailToCallActor",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "name": "InvalidCodec",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidResponseLength",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "NegativeValueNotAllowed",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "NotEnoughBalance",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "content_id",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "name": "AccessPurchased",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "content_id",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "data_cid",
              "type": "string"
            }
          ],
          "name": "CIDRetrieved",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "content_id",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "piece_cid",
              "type": "bytes"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "data_cid",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "title",
              "type": "string"
            }
          ],
          "name": "ContentStored",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "content_id",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "deal_id",
              "type": "uint64"
            }
          ],
          "name": "DealActivated",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            }
          ],
          "name": "addMarketBalance",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_content_id",
              "type": "uint256"
            }
          ],
          "name": "checkDealActivation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getAllActiveContent",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_content_id",
              "type": "uint256"
            }
          ],
          "name": "getCID",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_content_id",
              "type": "uint256"
            }
          ],
          "name": "getContentInfo",
          "outputs": [
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "is_active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "created_at",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "deal_id",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "piece_size",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "user_has_access",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            }
          ],
          "name": "getUserOwnedContent",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            }
          ],
          "name": "getUserPurchasedContent",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_content_id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            }
          ],
          "name": "hasAccess",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "next_content_id",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "name": "piece_cid_to_content",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "platform_fee_percentage",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "platform_owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_content_id",
              "type": "uint256"
            }
          ],
          "name": "purchaseAccess",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fee_percentage",
              "type": "uint256"
            }
          ],
          "name": "setPlatformFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_piece_cid",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "_data_cid",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "_price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "_piece_size",
              "type": "uint256"
            }
          ],
          "name": "storeContent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "stored_content",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "piece_cid",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "data_cid",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "piece_size",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "deal_id",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "is_active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "created_at",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "total_earnings",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "access_count",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_content_id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_new_price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_is_active",
              "type": "bool"
            }
          ],
          "name": "updateContentStatus",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_content_id",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "_deal_id",
              "type": "uint64"
            }
          ],
          "name": "updateDealStatus",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "user_access",
          "outputs": [
            {
              "internalType": "bool",
              "name": "has_access",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "purchased_at",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expires_at",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "user_owned_content",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "user_purchased_content",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            }
          ],
          "name": "withdrawMarketBalance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "withdrawPlatformFees",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_546": {
              "entryPoint": null,
              "id": 546,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0x5 SSTORE PUSH1 0x5 PUSH1 0x7 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x4A87 DUP1 PUSH2 0x3C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x184 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x90875975 GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0xDD12CEFF GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE4847CF2 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE4847CF2 EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0xF096F2C0 EQ PUSH2 0x4CE JUMPI DUP1 PUSH4 0xFDC9EAC3 EQ PUSH2 0x506 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDD12CEFF EQ PUSH2 0x408 JUMPI DUP1 PUSH4 0xDFD230C8 EQ PUSH2 0x428 JUMPI DUP1 PUSH4 0xE4580245 EQ PUSH2 0x48E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB91D0A2F GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xB91D0A2F EQ PUSH2 0x3C0 JUMPI DUP1 PUSH4 0xCED14198 EQ PUSH2 0x3D3 JUMPI DUP1 PUSH4 0xD0B7830B EQ PUSH2 0x3F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x90875975 EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0x913A2FFE EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0xAAD68BDC EQ PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x317DAAE8 GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x67873F42 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0x67873F42 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x692BD51B EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x7509C330 EQ PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x317DAAE8 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x33BE97FF EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0x3CDEE4C6 EQ PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x12E8E2C3 GT PUSH2 0x169 JUMPI DUP1 PUSH4 0x12E8E2C3 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x16232247 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x28D0D85D EQ PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xADEC951 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x10799582 EQ PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x18B JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x4088 JUMP JUMPDEST PUSH2 0x51B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1E3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x54C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x40E1 JUMP JUMPDEST PUSH2 0x5F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x289 PUSH2 0x284 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x727 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4111 JUMP JUMPDEST PUSH2 0xABC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x412C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0xB28 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x4170 JUMP JUMPDEST PUSH2 0xBE2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x321 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0xD31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x41FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x356 CALLDATASIZE PUSH1 0x4 PUSH2 0x4339 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD DUP1 MLOAD PUSH1 0x4 DUP3 MSTORE SWAP3 DUP3 ADD SWAP2 SWAP1 SWAP4 ADD KECCAK256 SWAP2 MSTORE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x393 PUSH2 0x38E CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x1118 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x436E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x3BB CALLDATASIZE PUSH1 0x4 PUSH2 0x4088 JUMP JUMPDEST PUSH2 0x1486 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x3CE CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x14A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x289 PUSH2 0x3EE CALLDATASIZE PUSH1 0x4 PUSH2 0x4381 JUMP JUMPDEST PUSH2 0x1858 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x1C10 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x423 CALLDATASIZE PUSH1 0x4 PUSH2 0x4111 JUMP JUMPDEST PUSH2 0x1C9C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x471 PUSH2 0x443 CALLDATASIZE PUSH1 0x4 PUSH2 0x4381 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF SWAP1 SWAP3 AND SWAP2 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x4A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x1D06 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x4C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x43AD JUMP JUMPDEST PUSH2 0x1E91 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EE PUSH2 0x4E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x2244 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x446C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x24DC JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x27B7363C90383630BA3337B9369037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x14 DUP2 GT ISZERO PUSH2 0x5F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46656520746F6F206869676820286D6178203230252900000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x662 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920636F6E74656E74206F776E65720000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x6BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206465616C2049440000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x7 DUP2 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH8 0xFFFFFFFFFFFFFFFF DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP3 MLOAD SWAP3 DUP4 MSTORE SWAP2 DUP6 SWAP2 PUSH32 0x394AF79EC5A12BEB5B87A9211E65472B1142C08DB3823B84C51DF1F4C56D0AFC SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x73B JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0x780 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP2 MLOAD PUSH2 0x180 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 SWAP1 DUP3 SWAP1 PUSH2 0x7A8 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7D4 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x821 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x821 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x804 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x83A SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x866 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8B3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x888 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8B3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x896 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x8ED SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x919 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x966 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x93B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x966 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x949 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0x97F SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9AB SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9F8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9CD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9F8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9DB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD SWAP2 SWAP3 POP AND PUSH1 0x0 SUB PUSH2 0xA6C JUMPI PUSH1 0x0 SWAP3 POP POP PUSH2 0xAB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA7C DUP4 PUSH1 0xE0 ADD MLOAD PUSH2 0x2645 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ PUSH2 0xA94 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP PUSH2 0xAB6 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x7 SIGNEXTEND SGT DUP1 ISZERO PUSH2 0xAB0 JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x7 SIGNEXTEND ISZERO JUMPDEST SWAP5 POP POP POP POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xB1C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xB08 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x27B7363C90383630BA3337B9369037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH2 0xBDD PUSH2 0xBD7 ADDRESS PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP1 MSTORE DUP3 MLOAD SWAP1 DUP2 ADD DUP4 MSTORE PUSH1 0x1 PUSH1 0xFA SHL DUP2 DUP5 ADD MSTORE PUSH1 0x5 PUSH1 0xF9 SHL PUSH1 0x41 DUP3 ADD MSTORE SWAP3 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x42 DUP4 ADD MSTORE DUP1 MLOAD PUSH1 0x36 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x56 DUP4 ADD SWAP1 SWAP2 MSTORE DUP2 MSTORE SWAP1 JUMP JUMPDEST DUP3 PUSH2 0x26CD JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xBF4 JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0xC39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCA4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920636F6E74656E74206F776E65720000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP5 GT PUSH2 0xCF4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5072696365206D757374206265203E2030000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x7 ADD DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH9 0xFF0000000000000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP10 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xD51 JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0xD96 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP2 MLOAD PUSH2 0x180 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 SWAP1 DUP3 SWAP1 PUSH2 0xDBE SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDEA SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE37 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE0C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE37 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE1A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0xE50 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE7C SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEC9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE9E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xEC9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xEAC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0xF03 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF2F SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF7C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF51 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF7C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF5F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0xF95 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFC1 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x100E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFE3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x100E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFF1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x10C9 JUMPI POP PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x10C9 JUMPI POP PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP1 POP DUP2 PUSH1 0x80 ADD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH2 0x100 ADD MLOAD DUP7 PUSH2 0x120 ADD MLOAD DUP8 PUSH1 0xE0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP9 SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP POP POP POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP1 SWAP3 SWAP5 SWAP7 SWAP9 POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x112C JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0x1171 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x11DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74656E74206E6F74206163746976650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x12C8 JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0xFE6C2A0BC70560C176DC5579CE090C1E46522984AB27A01F53F182E48AF348FC DUP4 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0x122B SWAP2 SWAP1 PUSH2 0x4552 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1242 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x126E SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12BB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1290 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x12BB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x129E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP3 POP POP PUSH2 0xAB6 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP3 MSTORE SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x60 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP1 DUP3 MSTORE SWAP4 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x1356 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x507572636861736520726571756972656420746F206163636573732043494400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD TIMESTAMP GT ISZERO PUSH2 0x13AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636573732065787069726564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0xFE6C2A0BC70560C176DC5579CE090C1E46522984AB27A01F53F182E48AF348FC DUP5 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0x13E7 SWAP2 SWAP1 PUSH2 0x4552 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x13FE SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x142A SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1477 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x144C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1477 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x145A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x14B4 JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0x14F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1562 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74656E74206E6F74206163746976650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST DUP1 PUSH1 0x2 ADD SLOAD CALLVALUE LT ISZERO PUSH2 0x15B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E74207061796D656E74000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1638 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E65722063616E6E6F74207075726368617365206F776E20636F6E74656E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x16A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C726561647920686173206163636573730000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH1 0x7 SLOAD CALLVALUE PUSH2 0x16B4 SWAP2 SWAP1 PUSH2 0x45F3 JUMP JUMPDEST PUSH2 0x16BE SWAP2 SWAP1 PUSH2 0x4620 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16CC DUP3 CALLVALUE PUSH2 0x4634 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH4 0x1E13380 PUSH2 0x16F8 SWAP2 SWAP1 PUSH2 0x4647 JUMP JUMPDEST SWAP1 MSTORE PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP6 MLOAD DUP2 SLOAD PUSH1 0xFF NOT AND SWAP1 ISZERO ISZERO OR DUP2 SSTORE SWAP2 DUP6 ADD MLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP3 ADD MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x9 DUP5 ADD DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x174C SWAP1 DUP5 SWAP1 PUSH2 0x4647 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xA DUP4 ADD DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1763 DUP4 PUSH2 0x465A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP6 MSTORE SWAP2 DUP5 KECCAK256 SWAP1 SWAP2 ADD DUP9 SWAP1 SSTORE SWAP1 DUP6 ADD SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH2 0x8FC DUP5 ISZERO MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x17C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP2 ISZERO PUSH2 0x1809 JUMPI PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1807 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLER SWAP1 DUP8 SWAP1 PUSH32 0x26E00FD8C1E2F9F49A7DD9112E06891CCB703EF8CADE25686CD7C00E73BDDF53 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x186C JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0x18B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP2 MLOAD PUSH2 0x180 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 SWAP1 DUP3 SWAP1 PUSH2 0x18D9 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1905 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1952 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1927 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1952 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1935 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x196B SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1997 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19E4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x19B9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x19E4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x19C7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1A1E SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1A4A SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A97 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1A6C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1A97 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1A7A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0x1AB0 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1ADC SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1B29 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1AFE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1B29 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1B0C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP6 AND SUB PUSH2 0x1BA8 JUMPI PUSH1 0x1 SWAP3 POP POP PUSH2 0x1C09 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP6 MSTORE DUP3 MSTORE SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x60 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH1 0xFF AND ISZERO DUP1 ISZERO DUP1 DUP4 MSTORE SWAP5 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x1C04 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP4 POP POP POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1C60 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x27B7363C90383630BA3337B9369037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1C99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xB1C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xB08 JUMPI POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1D59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x27B7363C90383630BA3337B9369037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE DUP2 DUP4 ADD DUP2 SWAP1 MSTORE DUP3 MLOAD PUSH1 0x20 DUP2 ADD DUP5 MSTORE PUSH1 0x1 PUSH1 0xFA SHL DUP2 DUP6 ADD MSTORE PUSH1 0x5 PUSH1 0xF9 SHL PUSH1 0x41 DUP3 ADD MSTORE ADDRESS SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x42 DUP3 ADD MSTORE DUP3 MLOAD PUSH1 0x36 DUP2 DUP4 SUB ADD DUP2 MSTORE PUSH1 0x56 DUP3 ADD SWAP1 SWAP4 MSTORE SWAP2 DUP3 MSTORE PUSH1 0x0 SWAP2 DUP2 SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1DC4 DUP6 PUSH2 0x2728 JUMP JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1DD4 DUP4 PUSH2 0x276E JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ PUSH2 0x1E28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5769746864726177206661696C65640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E34 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1E85 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E76657273696F6E206661696C6564000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP8 MLOAD GT PUSH2 0x1EE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5069656365204349442072657175697265640000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP7 MLOAD GT PUSH2 0x1F34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4461746120434944207265717569726564000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP6 GT PUSH2 0x1F84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5072696365206D757374206265203E2030000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD GT PUSH2 0x1FD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5469746C65207265717569726564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x2025 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50696563652073697A65206D757374206265203E203000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0x2036 DUP4 PUSH2 0x465A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE DUP11 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP12 SWAP1 MSTORE DUP2 DUP4 ADD DUP11 SWAP1 MSTORE CALLER PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xE0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH2 0x100 DUP5 ADD MSTORE TIMESTAMP PUSH2 0x120 DUP5 ADD MSTORE PUSH2 0x140 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x160 DUP4 ADD DUP2 SWAP1 MSTORE DUP5 DUP2 MSTORE SWAP1 DUP2 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 DUP2 MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 DUP2 SWAP1 PUSH2 0x20B7 SWAP1 DUP3 PUSH2 0x46C1 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SWAP1 PUSH2 0x20CC SWAP1 DUP3 PUSH2 0x46C1 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SWAP1 PUSH2 0x2129 SWAP1 DUP3 PUSH2 0x46C1 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP3 ADD SWAP1 PUSH2 0x213E SWAP1 DUP3 PUSH2 0x46C1 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x7 DUP3 ADD DUP1 SLOAD PUSH2 0x100 DUP6 ADD MLOAD ISZERO ISZERO PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH9 0xFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP2 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x8 DUP3 ADD SSTORE PUSH2 0x140 DUP3 ADD MLOAD PUSH1 0x9 DUP3 ADD SSTORE PUSH2 0x160 SWAP1 SWAP2 ADD MLOAD PUSH1 0xA SWAP1 SWAP2 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD DUP3 SWAP1 SSTORE MLOAD DUP2 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x21DF SWAP1 DUP12 SWAP1 PUSH2 0x4781 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 SWAP1 SSTORE POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH32 0xCD812A0D696722931EC25325AE74CBFEFB3B88A77AAAFC379E52097BD6BA050D DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0x2231 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x479D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP2 SWAP1 PUSH2 0x225F SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x228B SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x22D8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x22AD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x22D8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x22BB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x22ED SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2319 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2366 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x233B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2366 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2349 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD DUP1 SLOAD SWAP5 SWAP6 SWAP3 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP SWAP1 PUSH2 0x2395 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x23C1 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x240E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x23E3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x240E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x23F1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x5 ADD DUP1 SLOAD PUSH2 0x2423 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x244F SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x249C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2471 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x249C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x247F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP PUSH1 0x6 DUP4 ADD SLOAD PUSH1 0x7 DUP5 ADD SLOAD PUSH1 0x8 DUP6 ADD SLOAD PUSH1 0x9 DUP7 ADD SLOAD PUSH1 0xA SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 SWAP3 SWAP5 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND SWAP5 POP PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP3 DIV PUSH1 0xFF AND SWAP3 SWAP1 SWAP2 DUP13 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH1 0x5 SLOAD PUSH2 0x24EF SWAP2 SWAP1 PUSH2 0x4634 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2507 JUMPI PUSH2 0x2507 PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2530 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x1 JUMPDEST PUSH1 0x5 SLOAD DUP2 LT ISZERO PUSH2 0x25A1 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x258F JUMPI DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2576 JUMPI PUSH2 0x2576 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP2 PUSH2 0x258B DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 PUSH2 0x2599 DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2538 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25BD JUMPI PUSH2 0x25BD PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x25E6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x263D JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2606 JUMPI PUSH2 0x2606 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2620 JUMPI PUSH2 0x2620 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x2635 DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25EC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH1 0x0 PUSH2 0x2671 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x2876 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x2688 PUSH1 0x5 PUSH4 0x9904F2FF PUSH1 0x51 DUP7 PUSH2 0x28B7 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 SUB PUSH2 0x26AB JUMPI PUSH1 0x0 PUSH2 0x269F DUP3 PUSH2 0x28E1 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST SWAP2 SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH2 0x26DC DUP6 PUSH2 0x2945 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x26F6 PUSH1 0x5 PUSH4 0x3105F1A6 PUSH1 0x51 DUP7 DUP11 PUSH1 0x0 PUSH2 0x2973 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ PUSH2 0x271C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE749907 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x274A DUP4 PUSH1 0x0 PUSH2 0x2A86 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MLOAD ISZERO ISZERO SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH1 0x0 PUSH2 0x2791 DUP5 PUSH2 0x2AE2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x27AB PUSH1 0x5 PUSH4 0x87ED0A64 PUSH1 0x51 DUP7 PUSH1 0x0 DUP1 PUSH2 0x2973 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 SUB PUSH2 0x27C2 JUMPI PUSH1 0x0 PUSH2 0x269F DUP3 PUSH2 0x2B7C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x26C0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x20 ADD MLOAD ISZERO PUSH2 0x281B JUMPI PUSH1 0x40 MLOAD PUSH32 0x83041CEA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x282A PUSH1 0x0 NOT PUSH1 0x0 PUSH2 0x2A86 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2840 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x2BE0 JUMP JUMPDEST SWAP1 POP PUSH2 0x284C DUP2 DUP4 PUSH2 0x2C12 JUMP JUMPDEST ISZERO PUSH2 0x285F JUMPI POP PUSH1 0x0 SWAP5 PUSH1 0x1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x286A SWAP1 PUSH2 0x47FD JUMP JUMPDEST SWAP6 PUSH1 0x0 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x288D DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x2C3C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x289A DUP3 PUSH2 0x2C8A JUMP JUMPDEST SWAP1 POP PUSH2 0x28A6 DUP2 DUP6 PUSH2 0x2CAB JUMP JUMPDEST PUSH2 0x28AF DUP2 PUSH2 0x2CBB JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x2973 DUP1 PUSH2 0x28D2 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x1 PUSH4 0xFFFFFFFF DUP9 AND JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH2 0x2902 DUP5 DUP3 PUSH2 0x2D17 JUMP JUMPDEST SWAP3 POP SWAP1 POP PUSH1 0x2 DUP2 EQ PUSH2 0x2916 JUMPI PUSH2 0x2916 PUSH2 0x4821 JUMP JUMPDEST PUSH2 0x2920 DUP5 DUP4 PUSH2 0x2D94 JUMP JUMPDEST PUSH1 0x7 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP5 MSTORE SWAP2 POP PUSH2 0x2934 DUP5 DUP4 PUSH2 0x2D94 JUMP JUMPDEST POP PUSH1 0x7 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE POP SWAP1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2956 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x2DA2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2963 DUP3 PUSH2 0x2C8A JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP PUSH2 0x28A6 SWAP1 DUP3 SWAP1 PUSH2 0x2DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x2995 PUSH20 0xFE00000000000000000000000000000000000005 DUP6 PUSH2 0x2DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFE00000000000000000000000000000000000005 DUP10 DUP8 DUP8 PUSH2 0x29BB JUMPI PUSH1 0x0 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x1 JUMPDEST DUP12 DUP12 DUP16 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x29D6 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4837 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x29F0 SWAP2 PUSH2 0x4781 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2A2B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2A30 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2A6C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8A7DB5BF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2A75 DUP2 PUSH2 0x2E59 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2AAC PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x2AD9 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2AC2 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP4 PUSH1 0x0 PUSH2 0x2F45 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x2AF4 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x3026 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B00 PUSH1 0x2 PUSH2 0x2C3C JUMP JUMPDEST PUSH2 0x2B0A SWAP1 DUP4 PUSH2 0x4647 JUMP JUMPDEST DUP5 MLOAD MLOAD SWAP1 SWAP3 POP PUSH2 0x2B19 SWAP1 PUSH2 0x2DA2 JUMP JUMPDEST PUSH2 0x2B23 SWAP1 DUP4 PUSH2 0x4647 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B2E DUP2 PUSH2 0x2DA2 JUMP JUMPDEST PUSH2 0x2B38 SWAP1 DUP4 PUSH2 0x4647 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x2B45 DUP4 PUSH2 0x2C8A JUMP JUMPDEST SWAP1 POP PUSH2 0x2B52 DUP2 PUSH1 0x2 PUSH2 0x3146 JUMP JUMPDEST DUP5 MLOAD MLOAD PUSH2 0x2B60 SWAP1 DUP3 SWAP1 PUSH2 0x2DBA JUMP JUMPDEST PUSH2 0x2B6A DUP2 DUP4 PUSH2 0x2DBA JUMP JUMPDEST PUSH2 0x2B73 DUP2 PUSH2 0x2CBB JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP4 MLOAD ISZERO PUSH2 0x2BBA JUMPI PUSH2 0x2BA5 DUP5 DUP3 PUSH2 0x3152 JUMP JUMPDEST DUP2 MLOAD SWAP2 SWAP4 POP SWAP2 POP ISZERO PUSH2 0x2BBA JUMPI PUSH2 0x28AF DUP3 PUSH2 0x3319 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 DUP4 ADD DUP2 DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C06 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x2AD9 DUP4 DUP4 PUSH1 0x0 PUSH2 0x2F45 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2C21 DUP5 DUP5 PUSH1 0x1 PUSH2 0x34A6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ PUSH2 0x2C32 JUMPI PUSH1 0x0 PUSH2 0x28AF JUMP JUMPDEST PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x17 DUP3 GT PUSH2 0x2C4E JUMPI POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xFF DUP3 GT PUSH2 0x2C5E JUMPI POP PUSH1 0x2 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP3 GT PUSH2 0x2C6F JUMPI POP PUSH1 0x3 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 GT PUSH2 0x2C82 JUMPI POP PUSH1 0x5 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x9 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C92 PUSH2 0x403C JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2C9E SWAP1 DUP4 PUSH2 0x35E1 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2CB7 DUP3 PUSH1 0x0 DUP4 PUSH2 0x3658 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ PUSH2 0x2D11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642043424F520000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP MLOAD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x2D27 DUP7 DUP7 PUSH2 0x3779 JUMP JUMPDEST SWAP7 POP SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0xFF DUP3 AND PUSH1 0x4 EQ PUSH2 0x2D8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C6964206D616A20286578706563746564204D616A41727261792900 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST SWAP6 SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x271C DUP6 DUP6 PUSH2 0x397C JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x2DB0 DUP4 MLOAD PUSH2 0x2C3C JUMP JUMPDEST PUSH2 0x2ADC SWAP2 SWAP1 PUSH2 0x4647 JUMP JUMPDEST PUSH2 0x2DC7 DUP3 PUSH1 0x2 DUP4 MLOAD PUSH2 0x3658 JUMP JUMPDEST DUP2 MLOAD PUSH2 0xBDD SWAP1 DUP3 PUSH2 0x3A22 JUMP JUMPDEST SELFBALANCE DUP2 DUP2 LT ISZERO PUSH2 0x2E18 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8F0F420600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x598 JUMP JUMPDEST DUP3 EXTCODEHASH ISZERO ISZERO DUP1 PUSH2 0x2E53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x64D954B000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E76 SWAP2 SWAP1 PUSH2 0x4887 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2EB1 JUMPI DUP1 MLOAD ISZERO PUSH2 0x2EAC JUMPI PUSH1 0x40 MLOAD PUSH4 0xE749907 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2F39 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x51 EQ DUP1 PUSH2 0x2ED4 JUMPI POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x71 EQ JUMPDEST ISZERO PUSH2 0x2EFB JUMPI DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x2EAC JUMPI PUSH1 0x40 MLOAD PUSH4 0xE749907 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF1F6BCED00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x598 JUMP JUMPDEST SWAP2 SWAP6 SWAP2 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2F6B PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD DUP5 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x20 DUP5 MOD EQ PUSH1 0x1 DUP2 EQ PUSH2 0x2F9D JUMPI PUSH1 0x1F DUP5 AND PUSH1 0x20 SWAP1 DUP2 SUB DUP1 DUP7 ADD DUP5 MSTORE DUP4 ADD ADD SWAP3 POP PUSH2 0x2FA7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP3 POP DUP4 DUP3 MSTORE JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 DUP5 DUP7 PUSH1 0x4 PUSH2 0x1C2 STATICCALL POP PUSH1 0x20 DUP2 MLOAD ADD DUP2 ADD PUSH1 0x40 MSTORE DUP1 MLOAD SWAP4 POP JUMPDEST PUSH1 0x20 DUP5 EQ PUSH2 0x2FF5 JUMPI PUSH1 0x20 DUP2 ADD MLOAD ISZERO PUSH1 0x1 DUP2 EQ PUSH2 0x2FE5 JUMPI POP PUSH2 0x2FF5 JUMP JUMPDEST POP PUSH1 0x1F NOT SWAP1 SWAP4 ADD SWAP3 PUSH1 0x20 ADD PUSH2 0x2FC9 JUMP JUMPDEST SWAP3 DUP4 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 ISZERO PUSH2 0x300F JUMPI DUP2 PUSH2 0x301A JUMP JUMPDEST DUP1 MLOAD PUSH2 0x301A SWAP1 PUSH2 0x3A43 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x303A SWAP1 PUSH1 0x1 PUSH2 0x4647 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3052 JUMPI PUSH2 0x3052 PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x307C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 PUSH1 0x20 ADD MLOAD ISZERO ISZERO PUSH1 0x1 ISZERO ISZERO EQ PUSH2 0x3096 JUMPI PUSH1 0x0 PUSH2 0x309C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xF8 SHL JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x30AF JUMPI PUSH2 0x30AF PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x1 PUSH1 0x0 JUMPDEST DUP5 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x313D JUMPI DUP5 MLOAD DUP1 MLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x30E9 JUMPI PUSH2 0x30E9 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3106 JUMPI PUSH2 0x3106 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH2 0x3127 DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x3135 SWAP1 PUSH2 0x465A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x30CB JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2CB7 DUP3 PUSH1 0x4 DUP4 PUSH2 0x3A7B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3163 DUP7 DUP7 PUSH2 0x3779 JUMP JUMPDEST SWAP7 POP SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0xFF DUP3 AND PUSH1 0x6 EQ DUP1 PUSH2 0x3189 JUMPI POP PUSH1 0xFF DUP3 AND PUSH1 0x2 EQ JUMPDEST PUSH2 0x31FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C6964206D616A20286578706563746564204D616A546167206F7220 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4D616A42797465537472696E6729000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x5 NOT PUSH1 0xFF DUP4 AND ADD PUSH2 0x3235 JUMPI PUSH2 0x3211 DUP7 DUP7 PUSH2 0x3779 JUMP JUMPDEST SWAP7 POP SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0xFF DUP3 AND PUSH1 0x2 EQ PUSH2 0x3235 JUMPI PUSH2 0x3235 PUSH2 0x4821 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3241 DUP3 DUP8 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x325E JUMPI PUSH2 0x325E PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3288 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP8 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x32FD JUMPI DUP10 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x32A9 JUMPI PUSH2 0x32A9 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x32C6 JUMPI PUSH2 0x32C6 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH2 0x32E7 DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x32F5 SWAP1 PUSH2 0x465A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x328F JUMP JUMPDEST POP DUP2 PUSH2 0x3309 DUP6 DUP11 PUSH2 0x4647 JUMP JUMPDEST SWAP7 POP SWAP7 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0x3362 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SWAP2 DUP2 ADD SWAP2 DUP3 MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 MLOAD PUSH2 0x3372 SWAP2 SWAP1 PUSH2 0x4634 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x338A JUMPI PUSH2 0x338A PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x33B4 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x33CC JUMPI PUSH2 0x33CC PUSH2 0x47E7 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0xF8 SHL SUB PUSH2 0x3401 JUMPI POP PUSH1 0x1 JUMPDEST PUSH1 0x1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x348B JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x341F JUMPI PUSH2 0x341F PUSH2 0x47E7 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND DUP4 PUSH2 0x3452 PUSH1 0x1 DUP5 PUSH2 0x4634 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3462 JUMPI PUSH2 0x3462 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 PUSH2 0x3483 DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3404 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ISZERO PUSH2 0x351F JUMPI DUP5 PUSH1 0x20 ADD MLOAD DUP1 ISZERO PUSH2 0x34C2 JUMPI POP DUP4 PUSH1 0x20 ADD MLOAD JUMPDEST ISZERO PUSH2 0x34D0 JUMPI POP PUSH1 0x0 NOT PUSH2 0x351F JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD ISZERO DUP1 ISZERO PUSH2 0x34E8 JUMPI POP PUSH1 0x20 DUP5 ADD MLOAD ISZERO ISZERO PUSH1 0x1 EQ JUMPDEST ISZERO PUSH2 0x34F7 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x35DA JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD ISZERO ISZERO PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x350F JUMPI POP PUSH1 0x20 DUP5 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x351F JUMPI PUSH1 0x0 NOT SWAP2 POP POP PUSH2 0x35DA JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD GT ISZERO PUSH2 0x3536 JUMPI SWAP1 POP PUSH2 0x35DA JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD GT ISZERO PUSH2 0x355A JUMPI PUSH2 0x3552 DUP2 PUSH1 0x0 NOT PUSH2 0x491D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x35DA JUMP JUMPDEST DUP5 MLOAD DUP1 MLOAD DUP6 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x35CE JUMPI DUP1 DUP7 ADD MLOAD SWAP4 POP DUP1 DUP6 ADD MLOAD SWAP3 POP DUP3 DUP5 GT ISZERO PUSH2 0x359A JUMPI DUP7 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x35DA JUMP JUMPDEST DUP4 DUP4 GT ISZERO PUSH2 0x35BC JUMPI PUSH2 0x35AE DUP8 PUSH1 0x0 NOT PUSH2 0x491D JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x35DA JUMP JUMPDEST PUSH2 0x35C7 PUSH1 0x20 DUP3 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP PUSH2 0x356F JUMP JUMPDEST POP PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3601 PUSH1 0x20 DUP4 PUSH2 0x494D JUMP JUMPDEST ISZERO PUSH2 0x3629 JUMPI PUSH2 0x3611 PUSH1 0x20 DUP4 PUSH2 0x494D JUMP JUMPDEST PUSH2 0x361C SWAP1 PUSH1 0x20 PUSH2 0x4634 JUMP JUMPDEST PUSH2 0x3626 SWAP1 DUP4 PUSH2 0x4647 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 DUP2 DUP5 ADD ADD DUP2 DUP2 LT ISZERO PUSH2 0x364D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x17 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x367F JUMPI DUP3 MLOAD PUSH2 0x2E53 SWAP1 PUSH1 0xE0 PUSH1 0x5 DUP6 SWAP1 SHL AND DUP4 OR PUSH2 0x3A86 JUMP JUMPDEST PUSH1 0xFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x36C1 JUMPI DUP3 MLOAD PUSH2 0x36A8 SWAP1 PUSH1 0x18 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x3A86 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x2E53 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x1 PUSH2 0x3AEF JUMP JUMPDEST PUSH2 0xFFFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x3704 JUMPI DUP3 MLOAD PUSH2 0x36EB SWAP1 PUSH1 0x19 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x3A86 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x2E53 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x2 PUSH2 0x3AEF JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x3749 JUMPI DUP3 MLOAD PUSH2 0x3730 SWAP1 PUSH1 0x1A PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x3A86 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x2E53 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 PUSH2 0x3AEF JUMP JUMPDEST DUP3 MLOAD PUSH2 0x3760 SWAP1 PUSH1 0x1B PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x3A86 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x2E53 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x8 PUSH2 0x3AEF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x3789 DUP7 DUP7 PUSH2 0x3B74 JUMP JUMPDEST SWAP1 POP PUSH2 0x3796 PUSH1 0x1 DUP7 PUSH2 0x4647 JUMP JUMPDEST SWAP5 POP PUSH1 0x7 PUSH1 0x5 DUP3 SWAP1 SHR AND PUSH1 0x1F DUP3 AND PUSH1 0x1C DUP2 LT PUSH2 0x381A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742068616E646C6520686561646572732077697468206578747261 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x203E203237000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x18 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x3838 JUMPI SWAP1 SWAP5 POP PUSH1 0xFF AND SWAP3 POP DUP5 SWAP2 POP PUSH2 0x3975 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x18 SUB PUSH2 0x38C5 JUMPI PUSH1 0x0 PUSH2 0x384F DUP10 DUP10 PUSH2 0x3B74 JUMP JUMPDEST SWAP1 POP PUSH2 0x385C PUSH1 0x1 DUP10 PUSH2 0x4647 JUMP JUMPDEST SWAP8 POP PUSH1 0x18 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x38B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C69642063626F720000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST SWAP2 SWAP6 POP POP PUSH1 0xFF AND SWAP3 POP DUP5 SWAP2 POP PUSH2 0x3975 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x19 SUB PUSH2 0x38FF JUMPI PUSH1 0x0 PUSH2 0x38DC DUP10 DUP10 PUSH2 0x3BEA JUMP JUMPDEST SWAP1 POP PUSH2 0x38E9 PUSH1 0x2 DUP10 PUSH2 0x4647 JUMP JUMPDEST SWAP8 POP SWAP2 SWAP6 POP POP PUSH2 0xFFFF AND SWAP3 POP DUP5 SWAP2 POP PUSH2 0x3975 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x1A SUB PUSH2 0x393B JUMPI PUSH1 0x0 PUSH2 0x3916 DUP10 DUP10 PUSH2 0x3C4A JUMP JUMPDEST SWAP1 POP PUSH2 0x3923 PUSH1 0x4 DUP10 PUSH2 0x4647 JUMP JUMPDEST SWAP8 POP SWAP2 SWAP6 POP POP PUSH4 0xFFFFFFFF AND SWAP3 POP DUP5 SWAP2 POP PUSH2 0x3975 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x1B EQ PUSH2 0x394E JUMPI PUSH2 0x394E PUSH2 0x4821 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x395A DUP10 DUP10 PUSH2 0x3CAA JUMP JUMPDEST SWAP1 POP PUSH2 0x3967 PUSH1 0x8 DUP10 PUSH2 0x4647 JUMP JUMPDEST SWAP8 POP SWAP2 SWAP6 POP SWAP1 SWAP4 POP DUP6 SWAP3 POP POP POP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x398C DUP7 DUP7 PUSH2 0x3779 JUMP JUMPDEST SWAP7 POP SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0xFF DUP3 AND PUSH1 0x1 EQ DUP1 PUSH2 0x39B0 JUMPI POP PUSH1 0xFF DUP3 AND ISZERO JUMPDEST PUSH2 0x2D8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C6964206D616A20286578706563746564204D616A5369676E656449 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E74206F72204D616A556E7369676E6564496E74290000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2AD9 DUP4 DUP4 DUP5 MLOAD PUSH2 0x3D0A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A4E DUP3 PUSH2 0x3DDB JUMP JUMPDEST ISZERO PUSH2 0x3A5B JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x3A69 DUP2 PUSH2 0x3E24 JUMP JUMPDEST SWAP3 MLOAD PUSH1 0x1F NOT ADD PUSH1 0x8 MUL SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBDD DUP4 DUP4 DUP4 PUSH2 0x3658 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 MLOAD MLOAD PUSH1 0x0 PUSH2 0x3AAB DUP3 PUSH1 0x1 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x20 ADD MLOAD DUP3 LT PUSH2 0x3ACC JUMPI PUSH2 0x3ACC DUP6 PUSH2 0x3AC7 DUP4 PUSH1 0x2 PUSH2 0x45F3 JUMP JUMPDEST PUSH2 0x4025 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x20 DUP4 DUP3 ADD ADD DUP6 DUP2 MSTORE8 POP DUP1 MLOAD DUP3 GT ISZERO PUSH2 0x3AE5 JUMPI DUP2 DUP2 MSTORE JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD MLOAD PUSH1 0x0 PUSH2 0x3B13 DUP3 DUP6 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x20 ADD MLOAD DUP2 GT ISZERO PUSH2 0x3B30 JUMPI PUSH2 0x3B30 DUP7 PUSH2 0x3AC7 DUP4 PUSH1 0x2 PUSH2 0x45F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x3B40 DUP7 PUSH2 0x100 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x3B4A SWAP2 SWAP1 PUSH2 0x4634 JUMP JUMPDEST SWAP1 POP DUP7 MLOAD DUP3 DUP2 ADD DUP8 DUP4 NOT DUP3 MLOAD AND OR DUP2 MSTORE POP DUP1 MLOAD DUP4 GT ISZERO PUSH2 0x3B68 JUMPI DUP3 DUP2 MSTORE JUMPDEST POP SWAP6 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B81 DUP3 PUSH1 0x1 PUSH2 0x4647 JUMP JUMPDEST DUP4 MLOAD LT ISZERO PUSH2 0x3BC8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x736C6963696E67206F7574206F662072616E6765 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3BDA JUMPI PUSH2 0x3BDA PUSH2 0x47E7 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BF7 DUP3 PUSH1 0x2 PUSH2 0x4647 JUMP JUMPDEST DUP4 MLOAD LT ISZERO PUSH2 0x3C3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x736C6963696E67206F7574206F662072616E6765 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C57 DUP3 PUSH1 0x4 PUSH2 0x4647 JUMP JUMPDEST DUP4 MLOAD LT ISZERO PUSH2 0x3C9E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x736C6963696E67206F7574206F662072616E6765 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB7 DUP3 PUSH1 0x8 PUSH2 0x4647 JUMP JUMPDEST DUP4 MLOAD LT ISZERO PUSH2 0x3CFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x736C6963696E67206F7574206F662072616E6765 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0xC0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 MLOAD DUP3 GT ISZERO PUSH2 0x3D2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x0 PUSH2 0x3D3C DUP5 DUP4 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x20 ADD MLOAD DUP2 GT ISZERO PUSH2 0x3D59 JUMPI PUSH2 0x3D59 DUP7 PUSH2 0x3AC7 DUP4 PUSH1 0x2 PUSH2 0x45F3 JUMP JUMPDEST DUP6 MLOAD DUP1 MLOAD DUP4 DUP3 ADD PUSH1 0x20 ADD SWAP2 PUSH1 0x0 SWAP2 DUP1 DUP6 GT ISZERO PUSH2 0x3D73 JUMPI DUP5 DUP3 MSTORE JUMPDEST POP POP POP PUSH1 0x20 DUP7 ADD JUMPDEST PUSH1 0x20 DUP7 LT PUSH2 0x3DB3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH2 0x3D92 PUSH1 0x20 DUP4 PUSH2 0x4647 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D9F PUSH1 0x20 DUP3 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP PUSH2 0x3DAC PUSH1 0x20 DUP8 PUSH2 0x4634 JUMP JUMPDEST SWAP6 POP PUSH2 0x3D7B JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 DUP9 SWAP1 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE POP DUP5 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 ADD DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3E19 JUMPI DUP2 MLOAD SWAP3 POP DUP3 ISZERO PUSH2 0x3E02 JUMPI POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 PUSH2 0x3E12 SWAP1 DUP3 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP PUSH2 0x3DE4 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH1 0x1 DUP2 EQ PUSH2 0x401C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0xF8F9CBFAE6CC78FBEFE7CDC3A1793DFCF4F0E8BBD8CEC470B6A28A7A5A3E1EFD DUP2 MSTORE PUSH32 0xF5ECF1B3E9DEBC68E1D9CFABC5997135BFB7A7A3938B7B606B5B4B3F2F1F0FFE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xF6E4ED9FF2D6B458EADCDF97BD91692DE2D4DA8FD2D0AC50C6AE9A8272523616 DUP2 DUP4 ADD MSTORE PUSH32 0xC8C0B887B0A8A4489C948C7F847C6125746C645C544C444038302820181008FF PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xF7CAE577EEC2A03CF3BAD76FB589591DEBB2DD67E0AA9834BEA6925F6A4A2E0E PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xE39ED557DB96902CD38ED14FAD815115C786AF479B7E83247363534337271707 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0xC976C13BB96E881CB166A933A55E490D9D56952B8D4E801485467D2362422606 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x753A6D1B65325D0C552A4D1345224105391A310B29122104190A110309020100 PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xF8 SHL PUSH31 0x818283848586878898A8B8C8D8E8F929395969799A9B9D9E9FAAEB6BEDEEFF PUSH17 0x100000000000000000000000000000000 PUSH1 0x1 PUSH1 0x40 SHL PUSH5 0x100000000 PUSH3 0x10000 PUSH1 0x10 PUSH1 0x4 PUSH1 0x2 PUSH1 0x0 NOT DUP15 ADD SWAP1 DUP2 DIV DUP2 OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR DUP10 DUP2 DIV OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR PUSH1 0x1 ADD SWAP2 DUP3 MUL DUP4 SWAP1 DIV PUSH1 0xFF SUB SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP7 PUSH1 0x1 PUSH1 0xFF SHL DUP2 GT SWAP1 SWAP5 MUL SWAP2 SWAP1 DIV ADD SWAP4 POP DUP2 AND PUSH2 0x4016 JUMPI PUSH1 0x1 DUP4 ADD SWAP3 POP JUMPDEST POP PUSH2 0xAB6 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0x4031 DUP4 DUP4 PUSH2 0x35E1 JUMP JUMPDEST POP PUSH2 0x2E53 DUP4 DUP3 PUSH2 0x3A22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4064 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1E8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x409B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x40A4 DUP4 PUSH2 0x4071 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x40C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1C99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x40F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4106 DUP2 PUSH2 0x40CB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AD9 DUP3 PUSH2 0x4071 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4164 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4148 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x41A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x41C9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x41B1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x41EA DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x41AE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP1 DUP4 MSTORE PUSH2 0x4212 DUP2 DUP5 ADD DUP14 PUSH2 0x41D2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4226 DUP2 DUP13 PUSH2 0x41D2 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP11 SWAP1 SWAP11 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 0x60 DUP8 ADD MSTORE SWAP4 ISZERO ISZERO PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xE0 DUP4 ADD MSTORE ISZERO ISZERO PUSH2 0x100 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x42B3 JUMPI PUSH2 0x42B3 PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x42D5 JUMPI PUSH2 0x42D5 PUSH2 0x4274 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x42F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4307 PUSH2 0x4302 DUP3 PUSH2 0x42BB JUMP JUMPDEST PUSH2 0x428A JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x431C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x434B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28AF DUP5 DUP3 DUP6 ADD PUSH2 0x42E3 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2AD9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x41D2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x43A4 PUSH1 0x20 DUP5 ADD PUSH2 0x4071 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x43C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x43DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43EA DUP11 DUP4 DUP12 ADD PUSH2 0x42E3 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x440C DUP11 DUP4 DUP12 ADD PUSH2 0x42E3 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4429 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4435 DUP11 DUP4 DUP12 ADD PUSH2 0x42E3 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x444B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4458 DUP10 DUP3 DUP11 ADD PUSH2 0x42E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x180 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4481 PUSH2 0x180 DUP4 ADD DUP16 PUSH2 0x41D2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4493 DUP2 DUP16 PUSH2 0x41D2 JUMP JUMPDEST SWAP1 POP DUP13 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH1 0x60 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x44BC DUP2 DUP13 PUSH2 0x41D2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x44D0 DUP2 DUP12 PUSH2 0x41D2 JUMP JUMPDEST SWAP2 POP POP DUP8 PUSH1 0xC0 DUP4 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x44F8 PUSH2 0x100 DUP4 ADD DUP8 ISZERO ISZERO SWAP1 MSTORE JUMP JUMPDEST DUP5 PUSH2 0x120 DUP4 ADD MSTORE DUP4 PUSH2 0x140 DUP4 ADD MSTORE DUP3 PUSH2 0x160 DUP4 ADD MSTORE SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x4532 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xAB6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x0 DUP5 SLOAD PUSH2 0x4566 DUP2 PUSH2 0x451E JUMP JUMPDEST DUP1 DUP5 DUP8 ADD MSTORE PUSH1 0x40 PUSH1 0x1 DUP1 DUP5 AND PUSH1 0x0 DUP2 EQ PUSH2 0x4587 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x45A1 JUMPI PUSH2 0x45CF JUMP JUMPDEST PUSH1 0xFF NOT DUP6 AND DUP10 DUP5 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x5 SHL DUP10 ADD DUP4 ADD SWAP6 POP PUSH2 0x45CF JUMP JUMPDEST DUP10 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x45C7 JUMPI DUP2 SLOAD DUP12 DUP3 ADD DUP7 ADD MSTORE SWAP1 DUP4 ADD SWAP1 DUP9 ADD PUSH2 0x45AC JUMP JUMPDEST DUP11 ADD DUP5 ADD SWAP7 POP POP JUMPDEST POP SWAP4 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x2ADC JUMPI PUSH2 0x2ADC PUSH2 0x45DD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x462F JUMPI PUSH2 0x462F PUSH2 0x460A JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2ADC JUMPI PUSH2 0x2ADC PUSH2 0x45DD JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2ADC JUMPI PUSH2 0x2ADC PUSH2 0x45DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x466C JUMPI PUSH2 0x466C PUSH2 0x45DD JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xBDD JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x469A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x46B9 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x46A6 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x46DB JUMPI PUSH2 0x46DB PUSH2 0x4274 JUMP JUMPDEST PUSH2 0x46EF DUP2 PUSH2 0x46E9 DUP5 SLOAD PUSH2 0x451E JUMP JUMPDEST DUP5 PUSH2 0x4673 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x4724 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x470C JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x46B9 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4753 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x4734 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x4771 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x4793 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x41AE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x47B0 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x41D2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x47C2 DUP2 DUP8 PUSH2 0x41D2 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x40 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x47DC DUP2 DUP6 PUSH2 0x41D2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP8 PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP8 AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0xC0 PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x4871 PUSH1 0xC0 DUP5 ADD DUP7 PUSH2 0x41D2 JUMP JUMPDEST SWAP2 POP DUP1 DUP5 AND PUSH1 0xA0 DUP5 ADD MSTORE POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x489C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x48AE DUP2 PUSH2 0x40CB JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x48CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x48DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x48EA PUSH2 0x4302 DUP3 PUSH2 0x42BB JUMP JUMPDEST DUP2 DUP2 MSTORE DUP8 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x48FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4910 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x41AE JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP1 DUP3 MUL PUSH1 0x0 DUP3 SLT PUSH1 0x1 PUSH1 0xFF SHL DUP5 EQ AND ISZERO PUSH2 0x4939 JUMPI PUSH2 0x4939 PUSH2 0x45DD JUMP JUMPDEST DUP2 DUP2 SDIV DUP4 EQ DUP3 ISZERO OR PUSH2 0x2ADC JUMPI PUSH2 0x2ADC PUSH2 0x45DD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x495C JUMPI PUSH2 0x495C PUSH2 0x460A JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x499C JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x4982 JUMPI PUSH2 0x4982 PUSH2 0x45DD JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x498F JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x4966 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x49B3 JUMPI POP PUSH1 0x1 PUSH2 0x2ADC JUMP JUMPDEST DUP2 PUSH2 0x49C0 JUMPI POP PUSH1 0x0 PUSH2 0x2ADC JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x49D6 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x49E0 JUMPI PUSH2 0x49FC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x2ADC JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x49F1 JUMPI PUSH2 0x49F1 PUSH2 0x45DD JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x2ADC JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x4A1F JUMPI POP DUP2 DUP2 EXP PUSH2 0x2ADC JUMP JUMPDEST PUSH2 0x4A29 DUP4 DUP4 PUSH2 0x4961 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x4A3D JUMPI PUSH2 0x4A3D PUSH2 0x45DD JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD9 DUP4 DUP4 PUSH2 0x49A4 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E CHAINID 0xA5 PUSH18 0x81C649F8DF385366B853ADCC214C9B69BCC5 ADDRESS PUSH13 0xBF09C005C0B2BF1264736F6C63 NUMBER STOP ADDMOD EQ STOP CALLER ",
          "sourceMap": "483:10921:1:-:0;;;1783:1;1750:34;;1866:1;1825:42;;2457:58;;;;;;;;;-1:-1:-1;2481:14:1;:27;;-1:-1:-1;;;;;;2481:27:1;2498:10;2481:27;;;483:10921;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_1427": {
              "entryPoint": null,
              "id": 1427,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_init_9216": {
              "entryPoint": 12101,
              "id": 9216,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@addBalance_1497": {
              "entryPoint": 9933,
              "id": 1497,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@addMarketBalance_1360": {
              "entryPoint": 2856,
              "id": 1360,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@addressExists_7377": {
              "entryPoint": null,
              "id": 7377,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@appendInt_420": {
              "entryPoint": 15087,
              "id": 420,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@appendUint8_262": {
              "entryPoint": 14982,
              "id": 262,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@append_201": {
              "entryPoint": 15626,
              "id": 201,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@append_221": {
              "entryPoint": 14882,
              "id": 221,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@bitLength_9135": {
              "entryPoint": 14915,
              "id": 9135,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@bitLength_9145": {
              "entryPoint": 15908,
              "id": 9145,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@callByIDReadOnly_5330": {
              "entryPoint": 10423,
              "id": 5330,
              "parameterSlots": 4,
              "returnSlots": 2
            },
            "@callByID_5257": {
              "entryPoint": 10611,
              "id": 5257,
              "parameterSlots": 6,
              "returnSlots": 2
            },
            "@checkDealActivation_1068": {
              "entryPoint": 1831,
              "id": 1068,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@cmp_8769": {
              "entryPoint": 13478,
              "id": 8769,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@create_9607": {
              "entryPoint": 11402,
              "id": 9607,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@data_9628": {
              "entryPoint": 11451,
              "id": 9628,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@deserializeBigInt_2346": {
              "entryPoint": 13081,
              "id": 2346,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@deserializeBytesBigInt_2572": {
              "entryPoint": 11132,
              "id": 2572,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@deserializeGetDealActivationReturn_3813": {
              "entryPoint": 10465,
              "id": 3813,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@fromEthAddress_7039": {
              "entryPoint": null,
              "id": 7039,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@fromUint256_5581": {
              "entryPoint": 10024,
              "id": 5581,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getAllActiveContent_1260": {
              "entryPoint": 9436,
              "id": 1260,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getBytesSize_7432": {
              "entryPoint": 11682,
              "id": 7432,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getCID_922": {
              "entryPoint": 4376,
              "id": 922,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getContentInfo_1150": {
              "entryPoint": 3377,
              "id": 1150,
              "parameterSlots": 1,
              "returnSlots": 9
            },
            "@getDealActivation_2137": {
              "entryPoint": 9797,
              "id": 2137,
              "parameterSlots": 1,
              "returnSlots": 2
            },
            "@getPrefixSize_7416": {
              "entryPoint": 11324,
              "id": 7416,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getUserOwnedContent_1163": {
              "entryPoint": 2748,
              "id": 1163,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getUserPurchasedContent_1176": {
              "entryPoint": 7324,
              "id": 1176,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@gt_8827": {
              "entryPoint": 11282,
              "id": 8827,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@hasAccess_968": {
              "entryPoint": 6232,
              "id": 968,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@init_46": {
              "entryPoint": 13793,
              "id": 46,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@init_7641": {
              "entryPoint": 11232,
              "id": 7641,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@init_7662": {
              "entryPoint": 10886,
              "id": 7662,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@isZero_9094": {
              "entryPoint": 15835,
              "id": 9094,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@next_content_id_494": {
              "entryPoint": null,
              "id": 494,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@parseCborHeader_7004": {
              "entryPoint": 14201,
              "id": 7004,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "@piece_cid_to_content_491": {
              "entryPoint": null,
              "id": 491,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@platform_fee_percentage_499": {
              "entryPoint": null,
              "id": 499,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@platform_owner_496": {
              "entryPoint": null,
              "id": 496,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@purchaseAccess_844": {
              "entryPoint": 5282,
              "id": 844,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@readBytes_6086": {
              "entryPoint": 12626,
              "id": 6086,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@readChainEpoch_3282": {
              "entryPoint": 11668,
              "id": 3282,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@readFixedArray_5894": {
              "entryPoint": 11543,
              "id": 5894,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@readInt64_6586": {
              "entryPoint": 14716,
              "id": 6586,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@readRespData_5526": {
              "entryPoint": 11865,
              "id": 5526,
              "parameterSlots": 1,
              "returnSlots": 2
            },
            "@resize_99": {
              "entryPoint": 16421,
              "id": 99,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@serializeAddress_2853": {
              "entryPoint": 10565,
              "id": 2853,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@serializeBigInt_2270": {
              "entryPoint": 12326,
              "id": 2270,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@serializeDealID_4343": {
              "entryPoint": 10358,
              "id": 4343,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@serializeWithdrawBalanceParams_3559": {
              "entryPoint": 10978,
              "id": 3559,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@setPlatformFee_1321": {
              "entryPoint": 1356,
              "id": 1321,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@sliceUInt16_6794": {
              "entryPoint": 15338,
              "id": 6794,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@sliceUInt32_6824": {
              "entryPoint": 15434,
              "id": 6824,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@sliceUInt64_6854": {
              "entryPoint": 15530,
              "id": 6854,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@sliceUInt8_6764": {
              "entryPoint": 15220,
              "id": 6764,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@startFixedArray_9899": {
              "entryPoint": 12614,
              "id": 9899,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@storeContent_706": {
              "entryPoint": 7825,
              "id": 706,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "@stored_content_470": {
              "entryPoint": 8772,
              "id": 470,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@toUint256_5678": {
              "entryPoint": 10204,
              "id": 5678,
              "parameterSlots": 1,
              "returnSlots": 2
            },
            "@updateContentStatus_1302": {
              "entryPoint": 3042,
              "id": 1302,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@updateDealStatus_1004": {
              "entryPoint": 1527,
              "id": 1004,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@user_access_477": {
              "entryPoint": null,
              "id": 477,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@user_owned_content_482": {
              "entryPoint": 1307,
              "id": 482,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@user_purchased_content_487": {
              "entryPoint": 5254,
              "id": 487,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@validatePrecompileCall_5371": {
              "entryPoint": 11731,
              "id": 5371,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@withdrawBalance_1554": {
              "entryPoint": 10094,
              "id": 1554,
              "parameterSlots": 1,
              "returnSlots": 2
            },
            "@withdrawMarketBalance_1423": {
              "entryPoint": 7430,
              "id": 1423,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@withdrawPlatformFees_1339": {
              "entryPoint": 7184,
              "id": 1339,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@writeBytes_9792": {
              "entryPoint": 11706,
              "id": 9792,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@writeDefiniteLengthType_10359": {
              "entryPoint": 14971,
              "id": 10359,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@writeFixedNumeric_10317": {
              "entryPoint": 13912,
              "id": 10317,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@writeUInt64_9729": {
              "entryPoint": 11435,
              "id": 9729,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_decode_address": {
              "entryPoint": 16497,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_bytes": {
              "entryPoint": 17123,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 16657,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 16520,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes_memory_ptr": {
              "entryPoint": 17209,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes_memory_ptrt_string_memory_ptrt_uint256t_string_memory_ptrt_string_memory_ptrt_uint256": {
              "entryPoint": 17325,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 6
            },
            "abi_decode_tuple_t_int256t_uint64t_bytes_memory_ptr_fromMemory": {
              "entryPoint": 18567,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 16562,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_address": {
              "entryPoint": 17281,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_uint256t_bool": {
              "entryPoint": 16752,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_uint256t_uint64": {
              "entryPoint": 16609,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encode_bool": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_string": {
              "entryPoint": 16850,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes1_t_bytes1_t_address__to_t_bytes1_t_bytes1_t_address__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 18305,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_uint256__to_t_uint256__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 16684,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool_t_uint256_t_uint256__to_t_bool_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint64_t_bool_t_uint256_t_uint256_t_uint256__to_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint64_t_bool_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 17516,
              "id": null,
              "parameterSlots": 13,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_string_memory_ptr__to_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 18333,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 17262,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bool_t_uint256_t_uint64_t_uint256_t_bool__to_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bool_t_uint256_t_uint64_t_uint256_t_bool__fromStack_reversed": {
              "entryPoint": 16894,
              "id": null,
              "parameterSlots": 10,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 17746,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_03cab24dbf79225d56793ac5f83d0ab6c041c4b887c6736ed6958564dace0807__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_04020914ee6be5faf51dc15f467e384e49a84b3a213963b76bedf8f68cabf15e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1721937db35aab2615e0f626ac86fd6a03a74d45be77c4af6172ceea56920f2a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1820a3ee693fd526282dae94ffcf463680fc06df576ebc74d89979a9063a3e38__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1a4b61c98b9841d602d12810015ff1c3d525198462b5406b1c092cc6774cfa0f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1b6b7ea1ca601eedacaf5021d2f04292cf19df119f1635d866f2b5c9b71440a1__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_294d2bd5b6fb7e8eb608d7ff076f4babdc08155a7a6671f4f35801fb90c8bda4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_35845a4dd39b6d1819dfcaee0d0b6248786e49f1108e6ea29d0ec169f4a73e21__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_37d410c1ccd9f50939709ebcd9d16c00c7b3cebea97e8a73c68ef8aca331ed97__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3c3247ba153256ca0d68baeb08e827c5706942a406fc310a6bc53c49adac0c58__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_685a34e07ef4455da8571f5565310357c3f03d925bab32b05732db463b78b612__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_6f82c34788d8778abb49e7830e3750f6cd371ae520d08cf5e4681c10bc23e2e2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_711da878a5a614cdfbd063fa65ca57efee38c107279c85c0146c92cd495af6c2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_a055377333a83ca7a5b90a9ab8b65e060ce9c9a8dcacd7846f2dc39e04309773__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_a0d422e805337c0dc07360547d1aa26fc70a2a5c62b1d22f8e314f6d43087aa4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_ba2de4de5403fbe104479ab34f8826931dc8b89be34d0073a9d00ec8cae45792__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d0d358dd5cc14ba3833a2d551d087581cb46d4dabc6d51877f906253706dff57__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d778fc0214c7f53fa977d7227c3e255517a7f16df13b2644af0f442df5cdbdcd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e105af277794b536055375a9afc2a6a8c47099a20172c7909e8ff88d99f72aee__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e4bb3660efcaca24efbc5ce666b638ab6baa672862c4367f3966fa88eddb40ae__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_eadd5f63832af00abbb5a29c2b0274a318c23767810298fe1b4b117cb100c1e4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f80df61440352615d9c68bcc18d0f6784da2935eb86cb36e56d70ffaae053c76__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_fd61d0da58dad259aa66f3fa1a93613cc3b690958f0ccf5500de84dec9fbf234__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint64_t_uint256_t_uint64_t_uint64_t_bytes_memory_ptr_t_userDefinedValueType$_FilActorId_$4907__to_t_uint64_t_uint256_t_uint64_t_uint64_t_bytes_memory_ptr_t_uint64__fromStack_reversed": {
              "entryPoint": 18487,
              "id": null,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 17034,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_bytes": {
              "entryPoint": 17083,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 17991,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 17952,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_helper": {
              "entryPoint": 18785,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "checked_exp_t_uint256_t_uint256": {
              "entryPoint": 19013,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_unsigned": {
              "entryPoint": 18852,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_int256": {
              "entryPoint": 18717,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 17907,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 17972,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_bytes_storage": {
              "entryPoint": 18035,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
              "entryPoint": 18429,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage": {
              "entryPoint": 18113,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 16814,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 17694,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 18010,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mod_t_uint256": {
              "entryPoint": 18765,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x01": {
              "entryPoint": 18465,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x11": {
              "entryPoint": 17885,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 17930,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 18407,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 17012,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x51": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_uint64": {
              "entryPoint": 16587,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:30492:17",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:17",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "63:147:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "73:29:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "95:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "82:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "82:20:17"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "73:5:17"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "188:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "197:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "200:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "190:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "190:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "190:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "124:5:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "135:5:17"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "142:42:17",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "131:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "131:54:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "121:2:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "121:65:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "114:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "114:73:17"
                          },
                          "nodeType": "YulIf",
                          "src": "111:93:17"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "42:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "53:5:17",
                        "type": ""
                      }
                    ],
                    "src": "14:196:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "302:167:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "348:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "357:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "360:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "350:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "350:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "350:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "323:7:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "332:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "319:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "319:23:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "344:2:17",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "315:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "315:32:17"
                          },
                          "nodeType": "YulIf",
                          "src": "312:52:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "373:39:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "402:9:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "383:18:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "383:29:17"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "373:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "421:42:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "448:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "459:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "444:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "444:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "431:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "431:32:17"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "421:6:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "260:9:17",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "271:7:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "283:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "291:6:17",
                        "type": ""
                      }
                    ],
                    "src": "215:254:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "575:76:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "585:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "597:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "608:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "593:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "593:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "585:4:17"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "627:9:17"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "638:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "620:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "620:25:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "620:25:17"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "544:9:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "555:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "566:4:17",
                        "type": ""
                      }
                    ],
                    "src": "474:177:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "757:125:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "767:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "779:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "790:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "775:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "775:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "767:4:17"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "809:9:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "824:6:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "832:42:17",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "820:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "820:55:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "802:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "802:74:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "802:74:17"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "726:9:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "737:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "748:4:17",
                        "type": ""
                      }
                    ],
                    "src": "656:226:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "957:110:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1003:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1012:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1015:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1005:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1005:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1005:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "978:7:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "987:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "974:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "974:23:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "999:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "970:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "970:32:17"
                          },
                          "nodeType": "YulIf",
                          "src": "967:52:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1028:33:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1051:9:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1038:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1038:23:17"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1028:6:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "923:9:17",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "934:7:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "946:6:17",
                        "type": ""
                      }
                    ],
                    "src": "887:180:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1116:85:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1179:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1188:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1191:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1181:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1181:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1181:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1139:5:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1150:5:17"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1157:18:17",
                                        "type": "",
                                        "value": "0xffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1146:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1146:30:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1136:2:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1136:41:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1129:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1129:49:17"
                          },
                          "nodeType": "YulIf",
                          "src": "1126:69:17"
                        }
                      ]
                    },
                    "name": "validator_revert_uint64",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1105:5:17",
                        "type": ""
                      }
                    ],
                    "src": "1072:129:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1292:227:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1338:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1347:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1350:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1340:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1340:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1340:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1313:7:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1322:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1309:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1309:23:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1334:2:17",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1305:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1305:32:17"
                          },
                          "nodeType": "YulIf",
                          "src": "1302:52:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1363:33:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1386:9:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1373:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1373:23:17"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1363:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1405:45:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1435:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1446:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1431:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1431:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1418:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1418:32:17"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1409:5:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1483:5:17"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_uint64",
                              "nodeType": "YulIdentifier",
                              "src": "1459:23:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1459:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1459:30:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1498:15:17",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1508:5:17"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1498:6:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint64",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1250:9:17",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1261:7:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1273:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1281:6:17",
                        "type": ""
                      }
                    ],
                    "src": "1206:313:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1565:50:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1582:3:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1601:5:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "1594:6:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1594:13:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1587:6:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1587:21:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1575:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1575:34:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1575:34:17"
                        }
                      ]
                    },
                    "name": "abi_encode_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1549:5:17",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "1556:3:17",
                        "type": ""
                      }
                    ],
                    "src": "1524:91:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1715:92:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1725:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1737:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1748:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1733:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1733:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1725:4:17"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1767:9:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "1792:6:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "1785:6:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1785:14:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1778:6:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1778:22:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1760:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1760:41:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1760:41:17"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1684:9:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1695:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1706:4:17",
                        "type": ""
                      }
                    ],
                    "src": "1620:187:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1882:116:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1928:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1937:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1940:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1930:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1930:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1930:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1903:7:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1912:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1899:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1899:23:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1924:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1895:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1895:32:17"
                          },
                          "nodeType": "YulIf",
                          "src": "1892:52:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1953:39:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1982:9:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1963:18:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1963:29:17"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1953:6:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1848:9:17",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1859:7:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1871:6:17",
                        "type": ""
                      }
                    ],
                    "src": "1812:186:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2154:481:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2164:12:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2174:2:17",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2168:2:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2185:32:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2203:9:17"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2214:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2199:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2199:18:17"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "2189:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2233:9:17"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2244:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2226:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2226:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2226:21:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2256:17:17",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "2267:6:17"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "2260:3:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2282:27:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2302:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2296:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2296:13:17"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2286:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "2325:6:17"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2333:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2318:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2318:22:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2318:22:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2349:25:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2360:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2371:2:17",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2356:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2356:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "2349:3:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2383:29:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2401:6:17"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2409:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2397:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2397:15:17"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "2387:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2421:10:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2430:1:17",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "2425:1:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2489:120:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "2510:3:17"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2521:6:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "2515:5:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2515:13:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2503:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2503:26:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2503:26:17"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2542:19:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "2553:3:17"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2558:2:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2549:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2549:12:17"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "2542:3:17"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2574:25:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "2588:6:17"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2596:2:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2584:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2584:15:17"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2574:6:17"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "2451:1:17"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2454:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "2448:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2448:13:17"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "2462:18:17",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2464:14:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "2473:1:17"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2476:1:17",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2469:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2469:9:17"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "2464:1:17"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "2444:3:17",
                            "statements": []
                          },
                          "src": "2440:169:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2618:11:17",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "2626:3:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2618:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2123:9:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2134:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2145:4:17",
                        "type": ""
                      }
                    ],
                    "src": "2003:632:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2741:308:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2787:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2796:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2799:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2789:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2789:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2789:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2762:7:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2771:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2758:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2758:23:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2783:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2754:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2754:32:17"
                          },
                          "nodeType": "YulIf",
                          "src": "2751:52:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2812:33:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2835:9:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2822:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2822:23:17"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2812:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2854:42:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2881:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2892:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2877:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2877:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2864:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2864:32:17"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2854:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2905:45:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2935:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2946:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2931:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2931:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2918:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2918:32:17"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2909:5:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3003:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3012:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3015:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3005:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3005:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3005:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2972:5:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2993:5:17"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2986:6:17"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2986:13:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2979:6:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2979:21:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2969:2:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2969:32:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2962:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2962:40:17"
                          },
                          "nodeType": "YulIf",
                          "src": "2959:60:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3028:15:17",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3038:5:17"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "3028:6:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2691:9:17",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2702:7:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2714:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2722:6:17",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2730:6:17",
                        "type": ""
                      }
                    ],
                    "src": "2640:409:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3120:184:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3130:10:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3139:1:17",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "3134:1:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3199:63:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "3224:3:17"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3229:1:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3220:3:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3220:11:17"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "3243:3:17"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3248:1:17"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3239:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3239:11:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3233:5:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3233:18:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3213:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3213:39:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3213:39:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3160:1:17"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3163:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3157:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3157:13:17"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "3171:19:17",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3173:15:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "3182:1:17"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3185:2:17",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3178:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3178:10:17"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "3173:1:17"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "3153:3:17",
                            "statements": []
                          },
                          "src": "3149:113:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "3282:3:17"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3287:6:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3278:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3278:16:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3296:1:17",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3271:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3271:27:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3271:27:17"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "3098:3:17",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "3103:3:17",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "3108:6:17",
                        "type": ""
                      }
                    ],
                    "src": "3054:250:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3359:221:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3369:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3389:5:17"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3383:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3383:12:17"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3373:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3411:3:17"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3416:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3404:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3404:19:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3404:19:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3471:5:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3478:4:17",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3467:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3467:16:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3489:3:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3494:4:17",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3485:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3485:14:17"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3501:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "3432:34:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3432:76:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3432:76:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3517:57:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3532:3:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "3545:6:17"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3553:2:17",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3541:3:17"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3541:15:17"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3562:2:17",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "3558:3:17"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3558:7:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3537:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3537:29:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3528:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3528:39:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3569:4:17",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3524:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3524:50:17"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "3517:3:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3336:5:17",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "3343:3:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3351:3:17",
                        "type": ""
                      }
                    ],
                    "src": "3309:271:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3936:648:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3946:13:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3956:3:17",
                            "type": "",
                            "value": "288"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3950:2:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3975:9:17"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3986:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3968:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3968:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3968:21:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3998:59:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4030:6:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4042:9:17"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4053:2:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4038:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4038:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "4012:17:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4012:45:17"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "4002:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4077:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4088:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4073:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4073:18:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4097:6:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4105:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4093:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4093:22:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4066:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4066:50:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4066:50:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4125:41:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4151:6:17"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "4159:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "4133:17:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4133:33:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4125:4:17"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4186:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4197:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4182:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4182:18:17"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "4202:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4175:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4175:34:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4175:34:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4229:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4240:2:17",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4225:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4225:18:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "4249:6:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4257:42:17",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4245:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4245:55:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4218:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4218:83:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4218:83:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4321:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4332:3:17",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4317:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4317:19:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value4",
                                        "nodeType": "YulIdentifier",
                                        "src": "4352:6:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "4345:6:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4345:14:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "4338:6:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4338:22:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4310:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4310:51:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4310:51:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4381:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4392:3:17",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4377:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4377:19:17"
                              },
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "4398:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4370:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4370:35:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4370:35:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4425:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4436:3:17",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4421:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4421:19:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value6",
                                    "nodeType": "YulIdentifier",
                                    "src": "4446:6:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4454:18:17",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4442:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4442:31:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4414:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4414:60:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4414:60:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4494:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4505:3:17",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4490:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4490:19:17"
                              },
                              {
                                "name": "value7",
                                "nodeType": "YulIdentifier",
                                "src": "4511:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4483:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4483:35:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4483:35:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4538:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4549:3:17",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4534:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4534:19:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value8",
                                        "nodeType": "YulIdentifier",
                                        "src": "4569:6:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "4562:6:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4562:14:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "4555:6:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4555:22:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4527:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4527:51:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4527:51:17"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bool_t_uint256_t_uint64_t_uint256_t_bool__to_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bool_t_uint256_t_uint64_t_uint256_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3841:9:17",
                        "type": ""
                      },
                      {
                        "name": "value8",
                        "nodeType": "YulTypedName",
                        "src": "3852:6:17",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "3860:6:17",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "3868:6:17",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "3876:6:17",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "3884:6:17",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "3892:6:17",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "3900:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3908:6:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3916:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3927:4:17",
                        "type": ""
                      }
                    ],
                    "src": "3585:999:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4621:152:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4638:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4641:77:17",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4631:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4631:88:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4631:88:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4735:1:17",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4738:4:17",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4728:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4728:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4728:15:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4759:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4762:4:17",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "4752:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4752:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4752:15:17"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "4589:184:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4823:230:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4833:19:17",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4849:2:17",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4843:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4843:9:17"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "4833:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4861:58:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "4883:6:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "4899:4:17"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4905:2:17",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4895:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4895:13:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4914:2:17",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "4910:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4910:7:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4891:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4891:27:17"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4879:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4879:40:17"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "4865:10:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4994:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "4996:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4996:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4996:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4937:10:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4949:18:17",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4934:2:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4934:34:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4973:10:17"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4985:6:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4970:2:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4970:22:17"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "4931:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4931:62:17"
                          },
                          "nodeType": "YulIf",
                          "src": "4928:88:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5032:2:17",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "5036:10:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5025:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5025:22:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5025:22:17"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "4803:4:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "4812:6:17",
                        "type": ""
                      }
                    ],
                    "src": "4778:275:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5115:129:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5159:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "5161:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5161:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5161:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5131:6:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5139:18:17",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5128:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5128:30:17"
                          },
                          "nodeType": "YulIf",
                          "src": "5125:56:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5190:48:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "5210:6:17"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5218:2:17",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5206:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5206:15:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5227:2:17",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "5223:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5223:7:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5202:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5202:29:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5233:4:17",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5198:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5198:40:17"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "5190:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "5095:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "5106:4:17",
                        "type": ""
                      }
                    ],
                    "src": "5058:186:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5301:410:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5350:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5359:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5362:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5352:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5352:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5352:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5329:6:17"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5337:4:17",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5325:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5325:17:17"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "5344:3:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5321:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5321:27:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5314:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5314:35:17"
                          },
                          "nodeType": "YulIf",
                          "src": "5311:55:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5375:30:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5398:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5385:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5385:20:17"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5379:2:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5414:63:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5473:2:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_bytes",
                                  "nodeType": "YulIdentifier",
                                  "src": "5445:27:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5445:31:17"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "5429:15:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5429:48:17"
                          },
                          "variables": [
                            {
                              "name": "array_1",
                              "nodeType": "YulTypedName",
                              "src": "5418:7:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array_1",
                                "nodeType": "YulIdentifier",
                                "src": "5493:7:17"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5502:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5486:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5486:19:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5486:19:17"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5553:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5562:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5565:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5555:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5555:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5555:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5528:6:17"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "5536:2:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5524:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5524:15:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5541:4:17",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5520:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5520:26:17"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "5548:3:17"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5517:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5517:35:17"
                          },
                          "nodeType": "YulIf",
                          "src": "5514:55:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5595:7:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5604:4:17",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5591:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5591:18:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5615:6:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5623:4:17",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5611:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5611:17:17"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5630:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "5578:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5578:55:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5578:55:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "5657:7:17"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "5666:2:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5653:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5653:16:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5671:4:17",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5649:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5649:27:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5678:1:17",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5642:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5642:38:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5642:38:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5689:16:17",
                          "value": {
                            "name": "array_1",
                            "nodeType": "YulIdentifier",
                            "src": "5698:7:17"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "5689:5:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "5275:6:17",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5283:3:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "5291:5:17",
                        "type": ""
                      }
                    ],
                    "src": "5249:462:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5795:241:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5841:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5850:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5853:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5843:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5843:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5843:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5816:7:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5825:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5812:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5812:23:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5837:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5808:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5808:32:17"
                          },
                          "nodeType": "YulIf",
                          "src": "5805:52:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5866:37:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5893:9:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5880:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5880:23:17"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "5870:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5946:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5955:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5958:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5948:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5948:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5948:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5918:6:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5926:18:17",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5915:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5915:30:17"
                          },
                          "nodeType": "YulIf",
                          "src": "5912:50:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5971:59:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6002:9:17"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "6013:6:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5998:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5998:22:17"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6022:7:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "5981:16:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5981:49:17"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5971:6:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5761:9:17",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5772:7:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5784:6:17",
                        "type": ""
                      }
                    ],
                    "src": "5716:320:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6162:99:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6179:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6190:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6172:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6172:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6172:21:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6202:53:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6228:6:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6240:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6251:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6236:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6236:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "6210:17:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6210:45:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6202:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6131:9:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6142:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6153:4:17",
                        "type": ""
                      }
                    ],
                    "src": "6041:220:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6353:167:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6399:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6408:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6411:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6401:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6401:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6401:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6374:7:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6383:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6370:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6370:23:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6395:2:17",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6366:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6366:32:17"
                          },
                          "nodeType": "YulIf",
                          "src": "6363:52:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6424:33:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6447:9:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6434:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6434:23:17"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6424:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6466:48:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6499:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6510:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6495:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6495:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "6476:18:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6476:38:17"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "6466:6:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6311:9:17",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6322:7:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6334:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6342:6:17",
                        "type": ""
                      }
                    ],
                    "src": "6266:254:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6676:178:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6686:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6698:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6709:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6694:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6694:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6686:4:17"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6728:9:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "6753:6:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "6746:6:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6746:14:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "6739:6:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6739:22:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6721:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6721:41:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6721:41:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6782:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6793:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6778:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6778:18:17"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "6798:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6771:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6771:34:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6771:34:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6825:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6836:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6821:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6821:18:17"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "6841:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6814:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6814:34:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6814:34:17"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool_t_uint256_t_uint256__to_t_bool_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6629:9:17",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "6640:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6648:6:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6656:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6667:4:17",
                        "type": ""
                      }
                    ],
                    "src": "6525:329:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7053:883:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7100:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7109:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7112:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7102:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7102:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7102:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7074:7:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7083:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7070:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7070:23:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7095:3:17",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7066:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7066:33:17"
                          },
                          "nodeType": "YulIf",
                          "src": "7063:53:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7125:37:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7152:9:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7139:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7139:23:17"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "7129:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7171:28:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7181:18:17",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7175:2:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7226:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7235:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7238:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7228:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7228:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7228:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7214:6:17"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7222:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7211:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7211:14:17"
                          },
                          "nodeType": "YulIf",
                          "src": "7208:34:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7251:59:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7282:9:17"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "7293:6:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7278:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7278:22:17"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7302:7:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "7261:16:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7261:49:17"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7251:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7319:48:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7352:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7363:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7348:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7348:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7335:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7335:32:17"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "7323:8:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7396:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7405:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7408:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7398:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7398:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7398:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "7382:8:17"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7392:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7379:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7379:16:17"
                          },
                          "nodeType": "YulIf",
                          "src": "7376:36:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7421:61:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7452:9:17"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7463:8:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7448:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7448:24:17"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7474:7:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "7431:16:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7431:51:17"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "7421:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7491:42:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7518:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7529:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7514:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7514:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7501:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7501:32:17"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "7491:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7542:48:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7575:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7586:2:17",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7571:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7571:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7558:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7558:32:17"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "7546:8:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7619:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7628:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7631:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7621:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7621:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7621:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "7605:8:17"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7615:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7602:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7602:16:17"
                          },
                          "nodeType": "YulIf",
                          "src": "7599:36:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7644:61:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7675:9:17"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "7686:8:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7671:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7671:24:17"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7697:7:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "7654:16:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7654:51:17"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "7644:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7714:49:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7747:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7758:3:17",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7743:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7743:19:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7730:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7730:33:17"
                          },
                          "variables": [
                            {
                              "name": "offset_3",
                              "nodeType": "YulTypedName",
                              "src": "7718:8:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7792:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7801:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7804:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7794:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7794:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7794:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "7778:8:17"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7788:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7775:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7775:16:17"
                          },
                          "nodeType": "YulIf",
                          "src": "7772:36:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7817:61:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7848:9:17"
                                  },
                                  {
                                    "name": "offset_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "7859:8:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7844:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7844:24:17"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7870:7:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "7827:16:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7827:51:17"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "7817:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7887:43:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7914:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7925:3:17",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7910:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7910:19:17"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7897:12:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7897:33:17"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "7887:6:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes_memory_ptrt_string_memory_ptrt_uint256t_string_memory_ptrt_string_memory_ptrt_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6979:9:17",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6990:7:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7002:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7010:6:17",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7018:6:17",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7026:6:17",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "7034:6:17",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "7042:6:17",
                        "type": ""
                      }
                    ],
                    "src": "6859:1077:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8422:883:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8439:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8450:3:17",
                                "type": "",
                                "value": "384"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8432:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8432:22:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8432:22:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8463:60:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8495:6:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8507:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8518:3:17",
                                    "type": "",
                                    "value": "384"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8503:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8503:19:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "8477:17:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8477:46:17"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "8467:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8543:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8554:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8539:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8539:18:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8563:6:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8571:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8559:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8559:22:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8532:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8532:50:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8532:50:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8591:47:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8623:6:17"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "8631:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "8605:17:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8605:33:17"
                          },
                          "variables": [
                            {
                              "name": "tail_2",
                              "nodeType": "YulTypedName",
                              "src": "8595:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8658:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8669:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8654:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8654:18:17"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "8674:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8647:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8647:34:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8647:34:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8701:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8712:2:17",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8697:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8697:18:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "8721:6:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8729:42:17",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8717:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8717:55:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8690:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8690:83:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8690:83:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8793:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8804:3:17",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8789:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8789:19:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8814:6:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8822:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8810:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8810:22:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8782:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8782:51:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8782:51:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8842:47:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "8874:6:17"
                              },
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "8882:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "8856:17:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8856:33:17"
                          },
                          "variables": [
                            {
                              "name": "tail_3",
                              "nodeType": "YulTypedName",
                              "src": "8846:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8909:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8920:3:17",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8905:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8905:19:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "8930:6:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8938:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8926:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8926:22:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8898:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8898:51:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8898:51:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8958:41:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "8984:6:17"
                              },
                              {
                                "name": "tail_3",
                                "nodeType": "YulIdentifier",
                                "src": "8992:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "8966:17:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8966:33:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8958:4:17"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9019:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9030:3:17",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9015:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9015:19:17"
                              },
                              {
                                "name": "value6",
                                "nodeType": "YulIdentifier",
                                "src": "9036:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9008:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9008:35:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9008:35:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9063:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9074:3:17",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9059:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9059:19:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value7",
                                    "nodeType": "YulIdentifier",
                                    "src": "9084:6:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9092:18:17",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9080:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9080:31:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9052:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9052:60:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9052:60:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value8",
                                "nodeType": "YulIdentifier",
                                "src": "9137:6:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9149:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9160:3:17",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9145:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9145:19:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bool",
                              "nodeType": "YulIdentifier",
                              "src": "9121:15:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9121:44:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9121:44:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9185:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9196:3:17",
                                    "type": "",
                                    "value": "288"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9181:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9181:19:17"
                              },
                              {
                                "name": "value9",
                                "nodeType": "YulIdentifier",
                                "src": "9202:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9174:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9174:35:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9174:35:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9229:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9240:3:17",
                                    "type": "",
                                    "value": "320"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9225:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9225:19:17"
                              },
                              {
                                "name": "value10",
                                "nodeType": "YulIdentifier",
                                "src": "9246:7:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9218:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9218:36:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9218:36:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9274:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9285:3:17",
                                    "type": "",
                                    "value": "352"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9270:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9270:19:17"
                              },
                              {
                                "name": "value11",
                                "nodeType": "YulIdentifier",
                                "src": "9291:7:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9263:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9263:36:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9263:36:17"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint64_t_bool_t_uint256_t_uint256_t_uint256__to_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint64_t_bool_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8301:9:17",
                        "type": ""
                      },
                      {
                        "name": "value11",
                        "nodeType": "YulTypedName",
                        "src": "8312:7:17",
                        "type": ""
                      },
                      {
                        "name": "value10",
                        "nodeType": "YulTypedName",
                        "src": "8321:7:17",
                        "type": ""
                      },
                      {
                        "name": "value9",
                        "nodeType": "YulTypedName",
                        "src": "8330:6:17",
                        "type": ""
                      },
                      {
                        "name": "value8",
                        "nodeType": "YulTypedName",
                        "src": "8338:6:17",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "8346:6:17",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "8354:6:17",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "8362:6:17",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "8370:6:17",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8378:6:17",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8386:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8394:6:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8402:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8413:4:17",
                        "type": ""
                      }
                    ],
                    "src": "7941:1364:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9484:169:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9501:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9512:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9494:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9494:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9494:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9535:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9546:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9531:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9531:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9551:2:17",
                                "type": "",
                                "value": "19"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9524:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9524:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9524:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9574:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9585:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9570:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9570:18:17"
                              },
                              {
                                "hexValue": "4f6e6c7920706c6174666f726d206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9590:21:17",
                                "type": "",
                                "value": "Only platform owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9563:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9563:49:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9563:49:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9621:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9633:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9644:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9629:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9629:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9621:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1a4b61c98b9841d602d12810015ff1c3d525198462b5406b1c092cc6774cfa0f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9461:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9475:4:17",
                        "type": ""
                      }
                    ],
                    "src": "9310:343:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9832:172:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9849:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9860:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9842:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9842:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9842:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9883:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9894:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9879:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9879:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9899:2:17",
                                "type": "",
                                "value": "22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9872:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9872:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9872:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9922:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9933:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9918:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9918:18:17"
                              },
                              {
                                "hexValue": "46656520746f6f206869676820286d61782032302529",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9938:24:17",
                                "type": "",
                                "value": "Fee too high (max 20%)"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9911:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9911:52:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9911:52:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9972:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9984:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9995:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9980:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9980:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9972:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1721937db35aab2615e0f626ac86fd6a03a74d45be77c4af6172ceea56920f2a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9809:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9823:4:17",
                        "type": ""
                      }
                    ],
                    "src": "9658:346:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10183:168:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10200:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10211:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10193:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10193:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10193:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10234:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10245:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10230:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10230:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10250:2:17",
                                "type": "",
                                "value": "18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10223:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10223:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10223:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10273:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10284:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10269:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10269:18:17"
                              },
                              {
                                "hexValue": "4f6e6c7920636f6e74656e74206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10289:20:17",
                                "type": "",
                                "value": "Only content owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10262:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10262:48:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10262:48:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10319:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10331:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10342:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10327:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10327:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10319:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_04020914ee6be5faf51dc15f467e384e49a84b3a213963b76bedf8f68cabf15e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10160:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10174:4:17",
                        "type": ""
                      }
                    ],
                    "src": "10009:342:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10530:165:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10547:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10558:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10540:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10540:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10540:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10581:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10592:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10577:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10577:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10597:2:17",
                                "type": "",
                                "value": "15"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10570:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10570:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10570:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10620:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10631:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10616:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10616:18:17"
                              },
                              {
                                "hexValue": "496e76616c6964206465616c204944",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10636:17:17",
                                "type": "",
                                "value": "Invalid deal ID"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10609:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10609:45:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10609:45:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10663:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10675:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10686:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10671:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10671:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10663:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_03cab24dbf79225d56793ac5f83d0ab6c041c4b887c6736ed6958564dace0807__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10507:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10521:4:17",
                        "type": ""
                      }
                    ],
                    "src": "10356:339:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10799:101:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10809:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10821:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10832:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10817:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10817:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10809:4:17"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10851:9:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10866:6:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10874:18:17",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10862:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10862:31:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10844:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10844:50:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10844:50:17"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10768:9:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10779:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10790:4:17",
                        "type": ""
                      }
                    ],
                    "src": "10700:200:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11079:172:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11096:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11107:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11089:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11089:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11089:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11130:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11141:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11126:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11126:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11146:2:17",
                                "type": "",
                                "value": "22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11119:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11119:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11119:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11169:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11180:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11165:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11165:18:17"
                              },
                              {
                                "hexValue": "436f6e74656e7420646f6573206e6f74206578697374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11185:24:17",
                                "type": "",
                                "value": "Content does not exist"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11158:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11158:52:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11158:52:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11219:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11231:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11242:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11227:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11227:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11219:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_685a34e07ef4455da8571f5565310357c3f03d925bab32b05732db463b78b612__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11056:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11070:4:17",
                        "type": ""
                      }
                    ],
                    "src": "10905:346:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11311:382:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11321:22:17",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11335:1:17",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "11338:4:17"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "11331:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11331:12:17"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "11321:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11352:38:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "11382:4:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11388:1:17",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "11378:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11378:12:17"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "11356:18:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11429:31:17",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "11431:27:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "11445:6:17"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11453:4:17",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "11441:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11441:17:17"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "11431:6:17"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "11409:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "11402:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11402:26:17"
                          },
                          "nodeType": "YulIf",
                          "src": "11399:61:17"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11519:168:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11540:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11543:77:17",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "11533:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11533:88:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11533:88:17"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11641:1:17",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11644:4:17",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "11634:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11634:15:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11634:15:17"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11669:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11672:4:17",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11662:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11662:15:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11662:15:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "11475:18:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "11498:6:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11506:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "11495:2:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11495:14:17"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "11472:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11472:38:17"
                          },
                          "nodeType": "YulIf",
                          "src": "11469:218:17"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "11291:4:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "11300:6:17",
                        "type": ""
                      }
                    ],
                    "src": "11256:437:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11872:167:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11889:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11900:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11882:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11882:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11882:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11923:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11934:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11919:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11919:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11939:2:17",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11912:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11912:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11912:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11962:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11973:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11958:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11958:18:17"
                              },
                              {
                                "hexValue": "5072696365206d757374206265203e2030",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11978:19:17",
                                "type": "",
                                "value": "Price must be > 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11951:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11951:47:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11951:47:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12007:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12019:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12030:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12015:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12015:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12007:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1b6b7ea1ca601eedacaf5021d2f04292cf19df119f1635d866f2b5c9b71440a1__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11849:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11863:4:17",
                        "type": ""
                      }
                    ],
                    "src": "11698:341:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12218:168:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12235:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12246:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12228:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12228:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12228:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12269:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12280:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12265:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12265:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12285:2:17",
                                "type": "",
                                "value": "18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12258:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12258:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12258:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12308:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12319:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12304:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12304:18:17"
                              },
                              {
                                "hexValue": "436f6e74656e74206e6f7420616374697665",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12324:20:17",
                                "type": "",
                                "value": "Content not active"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12297:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12297:48:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12297:48:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12354:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12366:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12377:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12362:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12362:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12354:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f80df61440352615d9c68bcc18d0f6784da2935eb86cb36e56d70ffaae053c76__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12195:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12209:4:17",
                        "type": ""
                      }
                    ],
                    "src": "12044:342:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12447:65:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12464:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "12467:3:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12457:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12457:14:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12457:14:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12480:26:17",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12498:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12501:4:17",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "12488:9:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12488:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "12480:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "12430:3:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "12438:4:17",
                        "type": ""
                      }
                    ],
                    "src": "12391:121:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12635:845:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12645:12:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12655:2:17",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "12649:2:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12673:9:17"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12684:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12666:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12666:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12666:21:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12696:12:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12707:1:17",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "ret",
                              "nodeType": "YulTypedName",
                              "src": "12700:3:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12717:30:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "12740:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "12734:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12734:13:17"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "12721:9:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12756:50:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "12796:9:17"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nodeType": "YulIdentifier",
                              "src": "12770:25:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12770:36:17"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "12760:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12826:9:17"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12837:2:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12822:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12822:18:17"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "12842:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12815:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12815:34:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12815:34:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12858:12:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12868:2:17",
                            "type": "",
                            "value": "64"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "12862:2:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12879:11:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12889:1:17",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "12883:2:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "12940:151:17",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "12965:9:17"
                                            },
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "12976:2:17"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "12961:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "12961:18:17"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "12985:9:17"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "13000:3:17",
                                                  "type": "",
                                                  "value": "255"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "12996:3:17"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "12996:8:17"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "12981:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "12981:24:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "12954:6:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12954:52:17"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "12954:52:17"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "13019:62:17",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "13034:9:17"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "13049:1:17",
                                                  "type": "",
                                                  "value": "5"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "name": "length",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "13066:6:17"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "iszero",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13059:6:17"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "13059:14:17"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "iszero",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13052:6:17"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "13052:22:17"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "13045:3:17"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "13045:30:17"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "13030:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13030:46:17"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "13078:2:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "13026:3:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13026:55:17"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "13019:3:17"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "12933:158:17",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12938:1:17",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "13107:347:17",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13128:1:17",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "13131:6:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "13121:6:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13121:17:17"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13121:17:17"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "13151:31:17",
                                    "value": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13176:1:17",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "13179:2:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "keccak256",
                                        "nodeType": "YulIdentifier",
                                        "src": "13166:9:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13166:16:17"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "13155:7:17",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "13195:10:17",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13204:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "13199:1:17",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "13272:126:17",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "headStart",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13305:9:17"
                                                      },
                                                      {
                                                        "name": "i",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13316:1:17"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "13301:3:17"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "13301:17:17"
                                                  },
                                                  {
                                                    "name": "_2",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13320:2:17"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13297:3:17"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "13297:26:17"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13331:7:17"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13325:5:17"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "13325:14:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "13290:6:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13290:50:17"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "13290:50:17"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "13357:27:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "13372:7:17"
                                              },
                                              {
                                                "name": "_3",
                                                "nodeType": "YulIdentifier",
                                                "src": "13381:2:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "13368:3:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13368:16:17"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "13357:7:17"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "13229:1:17"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "13232:6:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "13226:2:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13226:13:17"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "13240:19:17",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "13242:15:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "13251:1:17"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "13254:2:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "13247:3:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13247:10:17"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "13242:1:17"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "13222:3:17",
                                      "statements": []
                                    },
                                    "src": "13218:180:17"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "13411:33:17",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "13426:9:17"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "13437:1:17"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "13422:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13422:17:17"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "13441:2:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "13418:3:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13418:26:17"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "13411:3:17"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "13100:354:17",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13105:1:17",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "12910:9:17"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "12921:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "12906:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12906:18:17"
                          },
                          "nodeType": "YulSwitch",
                          "src": "12899:555:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13463:11:17",
                          "value": {
                            "name": "ret",
                            "nodeType": "YulIdentifier",
                            "src": "13471:3:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13463:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12604:9:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12615:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12626:4:17",
                        "type": ""
                      }
                    ],
                    "src": "12517:963:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13659:181:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13676:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13687:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13669:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13669:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13669:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13710:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13721:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13706:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13706:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13726:2:17",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13699:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13699:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13699:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13749:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13760:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13745:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13745:18:17"
                              },
                              {
                                "hexValue": "507572636861736520726571756972656420746f2061636365737320434944",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13765:33:17",
                                "type": "",
                                "value": "Purchase required to access CID"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13738:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13738:61:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13738:61:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13808:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13820:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13831:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13816:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13816:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13808:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a0d422e805337c0dc07360547d1aa26fc70a2a5c62b1d22f8e314f6d43087aa4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13636:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13650:4:17",
                        "type": ""
                      }
                    ],
                    "src": "13485:355:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14019:164:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14036:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14047:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14029:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14029:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14029:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14070:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14081:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14066:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14066:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14086:2:17",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14059:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14059:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14059:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14109:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14120:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14105:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14105:18:17"
                              },
                              {
                                "hexValue": "4163636573732065787069726564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14125:16:17",
                                "type": "",
                                "value": "Access expired"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14098:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14098:44:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14098:44:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14151:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14163:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14174:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14159:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14159:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14151:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_37d410c1ccd9f50939709ebcd9d16c00c7b3cebea97e8a73c68ef8aca331ed97__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13996:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14010:4:17",
                        "type": ""
                      }
                    ],
                    "src": "13845:338:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14362:170:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14379:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14390:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14372:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14372:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14372:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14413:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14424:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14409:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14409:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14429:2:17",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14402:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14402:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14402:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14452:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14463:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14448:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14448:18:17"
                              },
                              {
                                "hexValue": "496e73756666696369656e74207061796d656e74",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14468:22:17",
                                "type": "",
                                "value": "Insufficient payment"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14441:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14441:50:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14441:50:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14500:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14512:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14523:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14508:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14508:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14500:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14339:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14353:4:17",
                        "type": ""
                      }
                    ],
                    "src": "14188:344:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14711:223:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14728:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14739:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14721:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14721:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14721:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14762:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14773:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14758:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14758:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14778:2:17",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14751:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14751:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14751:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14801:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14812:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14797:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14797:18:17"
                              },
                              {
                                "hexValue": "4f776e65722063616e6e6f74207075726368617365206f776e20636f6e74656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14817:34:17",
                                "type": "",
                                "value": "Owner cannot purchase own conten"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14790:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14790:62:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14790:62:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14872:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14883:2:17",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14868:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14868:18:17"
                              },
                              {
                                "hexValue": "74",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14888:3:17",
                                "type": "",
                                "value": "t"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14861:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14861:31:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14861:31:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14901:27:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14913:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14924:3:17",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14909:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14909:19:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14901:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e4bb3660efcaca24efbc5ce666b638ab6baa672862c4367f3966fa88eddb40ae__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14688:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14702:4:17",
                        "type": ""
                      }
                    ],
                    "src": "14537:397:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15113:168:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15130:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15141:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15123:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15123:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15123:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15164:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15175:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15160:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15160:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15180:2:17",
                                "type": "",
                                "value": "18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15153:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15153:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15153:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15203:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15214:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15199:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15199:18:17"
                              },
                              {
                                "hexValue": "416c72656164792068617320616363657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15219:20:17",
                                "type": "",
                                "value": "Already has access"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15192:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15192:48:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15192:48:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15249:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15261:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15272:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15257:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15257:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15249:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_35845a4dd39b6d1819dfcaee0d0b6248786e49f1108e6ea29d0ec169f4a73e21__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15090:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15104:4:17",
                        "type": ""
                      }
                    ],
                    "src": "14939:342:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15318:152:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15335:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15338:77:17",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15328:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15328:88:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15328:88:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15432:1:17",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15435:4:17",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15425:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15425:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15425:15:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15456:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15459:4:17",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "15449:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15449:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15449:15:17"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "15286:184:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15527:116:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "15537:20:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "15552:1:17"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15555:1:17"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "15548:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15548:9:17"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "15537:7:17"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15615:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "15617:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15617:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15617:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "15586:1:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "15579:6:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15579:9:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "15593:1:17"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "product",
                                            "nodeType": "YulIdentifier",
                                            "src": "15600:7:17"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "15609:1:17"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "15596:3:17"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15596:15:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "15590:2:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15590:22:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "15576:2:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15576:37:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "15569:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15569:45:17"
                          },
                          "nodeType": "YulIf",
                          "src": "15566:71:17"
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "15506:1:17",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "15509:1:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "15515:7:17",
                        "type": ""
                      }
                    ],
                    "src": "15475:168:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15680:152:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15697:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15700:77:17",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15690:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15690:88:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15690:88:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15794:1:17",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15797:4:17",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15787:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15787:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15787:15:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15818:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15821:4:17",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "15811:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15811:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15811:15:17"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "15648:184:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15883:74:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15906:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "15908:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15908:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15908:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15903:1:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "15896:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15896:9:17"
                          },
                          "nodeType": "YulIf",
                          "src": "15893:35:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15937:14:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "15946:1:17"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15949:1:17"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "15942:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15942:9:17"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "15937:1:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "15868:1:17",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "15871:1:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "15877:1:17",
                        "type": ""
                      }
                    ],
                    "src": "15837:120:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16011:79:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16021:17:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16033:1:17"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "16036:1:17"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "16029:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16029:9:17"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "16021:4:17"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16062:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "16064:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16064:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16064:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "16053:4:17"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16059:1:17"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "16050:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16050:11:17"
                          },
                          "nodeType": "YulIf",
                          "src": "16047:37:17"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "15993:1:17",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "15996:1:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "16002:4:17",
                        "type": ""
                      }
                    ],
                    "src": "15962:128:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16143:77:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16153:16:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16164:1:17"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "16167:1:17"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16160:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16160:9:17"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "16153:3:17"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16192:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "16194:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16194:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16194:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16184:1:17"
                              },
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "16187:3:17"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "16181:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16181:10:17"
                          },
                          "nodeType": "YulIf",
                          "src": "16178:36:17"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "16126:1:17",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "16129:1:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "16135:3:17",
                        "type": ""
                      }
                    ],
                    "src": "16095:125:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16272:88:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16303:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "16305:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16305:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16305:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "16288:5:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16299:1:17",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "16295:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16295:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "16285:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16285:17:17"
                          },
                          "nodeType": "YulIf",
                          "src": "16282:43:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16334:20:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "16345:5:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16352:1:17",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16341:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16341:13:17"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "16334:3:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "16254:5:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "16264:3:17",
                        "type": ""
                      }
                    ],
                    "src": "16225:135:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16539:165:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16556:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16567:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16549:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16549:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16549:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16590:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16601:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16586:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16586:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16606:2:17",
                                "type": "",
                                "value": "15"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16579:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16579:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16579:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16629:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16640:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16625:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16625:18:17"
                              },
                              {
                                "hexValue": "5769746864726177206661696c6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16645:17:17",
                                "type": "",
                                "value": "Withdraw failed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16618:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16618:45:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16618:45:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16672:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16684:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16695:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16680:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16680:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16672:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16516:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16530:4:17",
                        "type": ""
                      }
                    ],
                    "src": "16365:339:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16883:167:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16900:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16911:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16893:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16893:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16893:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16934:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16945:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16930:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16930:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16950:2:17",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16923:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16923:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16923:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16973:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16984:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16969:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16969:18:17"
                              },
                              {
                                "hexValue": "436f6e76657273696f6e206661696c6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16989:19:17",
                                "type": "",
                                "value": "Conversion failed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16962:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16962:47:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16962:47:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17018:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17030:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17041:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17026:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17026:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17018:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_711da878a5a614cdfbd063fa65ca57efee38c107279c85c0146c92cd495af6c2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16860:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16874:4:17",
                        "type": ""
                      }
                    ],
                    "src": "16709:341:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17229:168:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17246:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17257:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17239:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17239:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17239:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17280:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17291:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17276:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17276:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17296:2:17",
                                "type": "",
                                "value": "18"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17269:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17269:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17269:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17319:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17330:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17315:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17315:18:17"
                              },
                              {
                                "hexValue": "506965636520434944207265717569726564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17335:20:17",
                                "type": "",
                                "value": "Piece CID required"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17308:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17308:48:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17308:48:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17365:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17377:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17388:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17373:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17373:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17365:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e105af277794b536055375a9afc2a6a8c47099a20172c7909e8ff88d99f72aee__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17206:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17220:4:17",
                        "type": ""
                      }
                    ],
                    "src": "17055:342:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17576:167:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17593:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17604:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17586:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17586:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17586:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17627:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17638:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17623:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17623:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17643:2:17",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17616:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17616:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17616:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17666:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17677:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17662:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17662:18:17"
                              },
                              {
                                "hexValue": "4461746120434944207265717569726564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17682:19:17",
                                "type": "",
                                "value": "Data CID required"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17655:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17655:47:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17655:47:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17711:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17723:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17734:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17719:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17719:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17711:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3c3247ba153256ca0d68baeb08e827c5706942a406fc310a6bc53c49adac0c58__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17553:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17567:4:17",
                        "type": ""
                      }
                    ],
                    "src": "17402:341:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17922:164:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17939:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17950:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17932:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17932:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17932:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17973:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17984:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17969:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17969:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17989:2:17",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17962:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17962:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17962:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18012:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18023:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18008:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18008:18:17"
                              },
                              {
                                "hexValue": "5469746c65207265717569726564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18028:16:17",
                                "type": "",
                                "value": "Title required"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18001:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18001:44:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18001:44:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18054:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18066:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18077:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18062:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18062:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18054:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a055377333a83ca7a5b90a9ab8b65e060ce9c9a8dcacd7846f2dc39e04309773__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17899:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17913:4:17",
                        "type": ""
                      }
                    ],
                    "src": "17748:338:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18265:172:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18282:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18293:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18275:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18275:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18275:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18316:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18327:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18312:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18312:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18332:2:17",
                                "type": "",
                                "value": "22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18305:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18305:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18305:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18355:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18366:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18351:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18351:18:17"
                              },
                              {
                                "hexValue": "50696563652073697a65206d757374206265203e2030",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18371:24:17",
                                "type": "",
                                "value": "Piece size must be > 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18344:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18344:52:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18344:52:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18405:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18417:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18428:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18413:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18413:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18405:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d778fc0214c7f53fa977d7227c3e255517a7f16df13b2644af0f442df5cdbdcd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18242:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18256:4:17",
                        "type": ""
                      }
                    ],
                    "src": "18091:346:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18522:464:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18555:425:17",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "18569:11:17",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "18579:1:17",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulTypedName",
                                    "src": "18573:2:17",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "18600:2:17"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "18604:5:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "18593:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18593:17:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18593:17:17"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "18623:31:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "18645:2:17"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18649:4:17",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "keccak256",
                                    "nodeType": "YulIdentifier",
                                    "src": "18635:9:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18635:19:17"
                                },
                                "variables": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulTypedName",
                                    "src": "18627:4:17",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "18667:57:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "18690:4:17"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "18700:1:17",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "startIndex",
                                              "nodeType": "YulIdentifier",
                                              "src": "18707:10:17"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "18719:2:17",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "18703:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "18703:19:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "18696:3:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18696:27:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "18686:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18686:38:17"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nodeType": "YulTypedName",
                                    "src": "18671:11:17",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "18761:23:17",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "18763:19:17",
                                      "value": {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "18778:4:17"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "18763:11:17"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nodeType": "YulIdentifier",
                                      "src": "18743:10:17"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18755:4:17",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "18740:2:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18740:20:17"
                                },
                                "nodeType": "YulIf",
                                "src": "18737:47:17"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "18797:41:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "18811:4:17"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "18821:1:17",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nodeType": "YulIdentifier",
                                              "src": "18828:3:17"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "18833:2:17",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "18824:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "18824:12:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "18817:3:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18817:20:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "18807:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18807:31:17"
                                },
                                "variables": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulTypedName",
                                    "src": "18801:2:17",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "18851:24:17",
                                "value": {
                                  "name": "deleteStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "18864:11:17"
                                },
                                "variables": [
                                  {
                                    "name": "start",
                                    "nodeType": "YulTypedName",
                                    "src": "18855:5:17",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "18949:21:17",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "18958:5:17"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "18965:2:17"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "18951:6:17"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "18951:17:17"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "18951:17:17"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "18899:5:17"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "18906:2:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "18896:2:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18896:13:17"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "18910:26:17",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "18912:22:17",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "18925:5:17"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "18932:1:17",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "18921:3:17"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "18921:13:17"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "start",
                                          "nodeType": "YulIdentifier",
                                          "src": "18912:5:17"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "18892:3:17",
                                  "statements": []
                                },
                                "src": "18888:82:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "18538:3:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18543:2:17",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "18535:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18535:11:17"
                          },
                          "nodeType": "YulIf",
                          "src": "18532:448:17"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_bytes_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "18494:5:17",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "18501:3:17",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nodeType": "YulTypedName",
                        "src": "18506:10:17",
                        "type": ""
                      }
                    ],
                    "src": "18442:544:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19076:81:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19086:65:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "19101:4:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "19119:1:17",
                                                "type": "",
                                                "value": "3"
                                              },
                                              {
                                                "name": "len",
                                                "nodeType": "YulIdentifier",
                                                "src": "19122:3:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "19115:3:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "19115:11:17"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "19132:1:17",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "19128:3:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "19128:6:17"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nodeType": "YulIdentifier",
                                          "src": "19111:3:17"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "19111:24:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "19107:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19107:29:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19097:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19097:40:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19143:1:17",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "len",
                                    "nodeType": "YulIdentifier",
                                    "src": "19146:3:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "19139:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19139:11:17"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "19094:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19094:57:17"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nodeType": "YulIdentifier",
                              "src": "19086:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "19053:4:17",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "19059:3:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nodeType": "YulTypedName",
                        "src": "19067:4:17",
                        "type": ""
                      }
                    ],
                    "src": "18991:166:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19256:1255:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19266:24:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "19286:3:17"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19280:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19280:10:17"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nodeType": "YulTypedName",
                              "src": "19270:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19333:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "19335:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19335:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19335:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "19305:6:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19313:18:17",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "19302:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19302:30:17"
                          },
                          "nodeType": "YulIf",
                          "src": "19299:56:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "19407:4:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nodeType": "YulIdentifier",
                                        "src": "19445:4:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nodeType": "YulIdentifier",
                                      "src": "19439:5:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19439:11:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nodeType": "YulIdentifier",
                                  "src": "19413:25:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19413:38:17"
                              },
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "19453:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_bytes_storage",
                              "nodeType": "YulIdentifier",
                              "src": "19364:42:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19364:96:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19364:96:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19469:18:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19486:1:17",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulTypedName",
                              "src": "19473:9:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19496:23:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19515:4:17",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "srcOffset_1",
                              "nodeType": "YulTypedName",
                              "src": "19500:11:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19528:24:17",
                          "value": {
                            "name": "srcOffset_1",
                            "nodeType": "YulIdentifier",
                            "src": "19541:11:17"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulIdentifier",
                              "src": "19528:9:17"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "19598:656:17",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "19612:35:17",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "19631:6:17"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "19643:2:17",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "19639:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "19639:7:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "19627:3:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "19627:20:17"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nodeType": "YulTypedName",
                                        "src": "19616:7:17",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "19660:49:17",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "19704:4:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "19674:29:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "19674:35:17"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "19664:6:17",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "19722:10:17",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19731:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "19726:1:17",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "19809:172:17",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "19834:6:17"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "19852:3:17"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "19857:9:17"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "19848:3:17"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "19848:19:17"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "19842:5:17"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "19842:26:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "19827:6:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "19827:42:17"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "19827:42:17"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "19886:24:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "19900:6:17"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "19908:1:17",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "19896:3:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "19896:14:17"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "19886:6:17"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "19927:40:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "19944:9:17"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "19955:11:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "19940:3:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "19940:27:17"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nodeType": "YulIdentifier",
                                              "src": "19927:9:17"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "19756:1:17"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "19759:7:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "19753:2:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "19753:14:17"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "19768:28:17",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "19770:24:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "19779:1:17"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "19782:11:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "19775:3:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "19775:19:17"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "19770:1:17"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "19749:3:17",
                                      "statements": []
                                    },
                                    "src": "19745:236:17"
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "20029:166:17",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "20047:43:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "20074:3:17"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "20079:9:17"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "20070:3:17"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "20070:19:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "20064:5:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "20064:26:17"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nodeType": "YulTypedName",
                                              "src": "20051:9:17",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "20114:6:17"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "20126:9:17"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "20153:1:17",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "20156:6:17"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "20149:3:17"
                                                                },
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "20149:14:17"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "20165:3:17",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "20145:3:17"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "20145:24:17"
                                                          },
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "20175:1:17",
                                                                "type": "",
                                                                "value": "0"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "not",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "20171:3:17"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "20171:6:17"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "20141:3:17"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "20141:37:17"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "20137:3:17"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "20137:42:17"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "20122:3:17"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "20122:58:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "20107:6:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "20107:74:17"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "20107:74:17"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "20000:7:17"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "20009:6:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "19997:2:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "19997:19:17"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "19994:201:17"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "20215:4:17"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "20229:1:17",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "20232:6:17"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "20225:3:17"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "20225:14:17"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "20241:1:17",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "20221:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "20221:22:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "20208:6:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "20208:36:17"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "20208:36:17"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "19591:663:17",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19596:1:17",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "20271:234:17",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "20285:14:17",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20298:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulTypedName",
                                        "src": "20289:5:17",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "20334:67:17",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "20352:35:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "20371:3:17"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "20376:9:17"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "20367:3:17"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "20367:19:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "20361:5:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "20361:26:17"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "20352:5:17"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "20315:6:17"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "20312:89:17"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "20421:4:17"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "20480:5:17"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "20487:6:17"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nodeType": "YulIdentifier",
                                            "src": "20427:52:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "20427:67:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "20414:6:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "20414:81:17"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "20414:81:17"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "20263:242:17",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "19571:6:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19579:2:17",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "19568:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19568:14:17"
                          },
                          "nodeType": "YulSwitch",
                          "src": "19561:944:17"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nodeType": "YulTypedName",
                        "src": "19241:4:17",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "19247:3:17",
                        "type": ""
                      }
                    ],
                    "src": "19162:1349:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20612:1255:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20622:24:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "20642:3:17"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20636:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20636:10:17"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nodeType": "YulTypedName",
                              "src": "20626:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20689:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "20691:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20691:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20691:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "20661:6:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20669:18:17",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "20658:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20658:30:17"
                          },
                          "nodeType": "YulIf",
                          "src": "20655:56:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "20763:4:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nodeType": "YulIdentifier",
                                        "src": "20801:4:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nodeType": "YulIdentifier",
                                      "src": "20795:5:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20795:11:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nodeType": "YulIdentifier",
                                  "src": "20769:25:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20769:38:17"
                              },
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "20809:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_bytes_storage",
                              "nodeType": "YulIdentifier",
                              "src": "20720:42:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20720:96:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20720:96:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20825:18:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20842:1:17",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulTypedName",
                              "src": "20829:9:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20852:23:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20871:4:17",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "srcOffset_1",
                              "nodeType": "YulTypedName",
                              "src": "20856:11:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20884:24:17",
                          "value": {
                            "name": "srcOffset_1",
                            "nodeType": "YulIdentifier",
                            "src": "20897:11:17"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulIdentifier",
                              "src": "20884:9:17"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "20954:656:17",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "20968:35:17",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "20987:6:17"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "20999:2:17",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "20995:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "20995:7:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "20983:3:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "20983:20:17"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nodeType": "YulTypedName",
                                        "src": "20972:7:17",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "21016:49:17",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "21060:4:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "21030:29:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "21030:35:17"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "21020:6:17",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "21078:10:17",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21087:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "21082:1:17",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "21165:172:17",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "21190:6:17"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "21208:3:17"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "21213:9:17"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "21204:3:17"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "21204:19:17"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "21198:5:17"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "21198:26:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "21183:6:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "21183:42:17"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "21183:42:17"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "21242:24:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "21256:6:17"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "21264:1:17",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "21252:3:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "21252:14:17"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "21242:6:17"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "21283:40:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "21300:9:17"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "21311:11:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "21296:3:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "21296:27:17"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nodeType": "YulIdentifier",
                                              "src": "21283:9:17"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "21112:1:17"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "21115:7:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "21109:2:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "21109:14:17"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "21124:28:17",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "21126:24:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "21135:1:17"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "21138:11:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "21131:3:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "21131:19:17"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "21126:1:17"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "21105:3:17",
                                      "statements": []
                                    },
                                    "src": "21101:236:17"
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "21385:166:17",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "21403:43:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "21430:3:17"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "21435:9:17"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "21426:3:17"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "21426:19:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "21420:5:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "21420:26:17"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nodeType": "YulTypedName",
                                              "src": "21407:9:17",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "21470:6:17"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "21482:9:17"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "21509:1:17",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "21512:6:17"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "21505:3:17"
                                                                },
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "21505:14:17"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "21521:3:17",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "21501:3:17"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "21501:24:17"
                                                          },
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "21531:1:17",
                                                                "type": "",
                                                                "value": "0"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "not",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "21527:3:17"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "21527:6:17"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "21497:3:17"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "21497:37:17"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "21493:3:17"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "21493:42:17"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "21478:3:17"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "21478:58:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "21463:6:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "21463:74:17"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "21463:74:17"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "21356:7:17"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "21365:6:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "21353:2:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "21353:19:17"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "21350:201:17"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "21571:4:17"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "21585:1:17",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "21588:6:17"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "21581:3:17"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "21581:14:17"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "21597:1:17",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "21577:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "21577:22:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "21564:6:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "21564:36:17"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "21564:36:17"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "20947:663:17",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20952:1:17",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "21627:234:17",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "21641:14:17",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21654:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulTypedName",
                                        "src": "21645:5:17",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "21690:67:17",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "21708:35:17",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "21727:3:17"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "21732:9:17"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "21723:3:17"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "21723:19:17"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "21717:5:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "21717:26:17"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "21708:5:17"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "21671:6:17"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "21668:89:17"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "21777:4:17"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "21836:5:17"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "21843:6:17"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nodeType": "YulIdentifier",
                                            "src": "21783:52:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "21783:67:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "21770:6:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "21770:81:17"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "21770:81:17"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "21619:242:17",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "20927:6:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20935:2:17",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "20924:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20924:14:17"
                          },
                          "nodeType": "YulSwitch",
                          "src": "20917:944:17"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nodeType": "YulTypedName",
                        "src": "20597:4:17",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "20603:3:17",
                        "type": ""
                      }
                    ],
                    "src": "20516:1351:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22009:150:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22019:27:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22039:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "22033:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22033:13:17"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "22023:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "22094:6:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22102:4:17",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22090:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22090:17:17"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "22109:3:17"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "22114:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "22055:34:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22055:66:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22055:66:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22130:23:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "22141:3:17"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "22146:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22137:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22137:16:17"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "22130:3:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "21985:3:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21990:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "22001:3:17",
                        "type": ""
                      }
                    ],
                    "src": "21872:287:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22407:374:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22424:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22435:3:17",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22417:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22417:22:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22417:22:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22448:60:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22480:6:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22492:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22503:3:17",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22488:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22488:19:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "22462:17:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22462:46:17"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "22452:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22528:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22539:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22524:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22524:18:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22548:6:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22556:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22544:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22544:22:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22517:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22517:50:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22517:50:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22576:47:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "22608:6:17"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "22616:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "22590:17:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22590:33:17"
                          },
                          "variables": [
                            {
                              "name": "tail_2",
                              "nodeType": "YulTypedName",
                              "src": "22580:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22643:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22654:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22639:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22639:18:17"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "22659:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22632:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22632:34:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22632:34:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22686:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22697:2:17",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22682:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22682:18:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "22706:6:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22714:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22702:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22702:22:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22675:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22675:50:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22675:50:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22734:41:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "22760:6:17"
                              },
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "22768:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "22742:17:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22742:33:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22734:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_string_memory_ptr__to_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22352:9:17",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "22363:6:17",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "22371:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22379:6:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22387:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22398:4:17",
                        "type": ""
                      }
                    ],
                    "src": "22164:617:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22818:152:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22835:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22838:77:17",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22828:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22828:88:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22828:88:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22932:1:17",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22935:4:17",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22925:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22925:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22925:15:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22956:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22959:4:17",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "22949:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22949:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22949:15:17"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "22786:184:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23146:285:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23156:76:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23166:66:17",
                            "type": "",
                            "value": "0xff00000000000000000000000000000000000000000000000000000000000000"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "23160:2:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "23248:3:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "23257:6:17"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23265:2:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "23253:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23253:15:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23241:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23241:28:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23241:28:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "23289:3:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23294:1:17",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23285:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23285:11:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23302:6:17"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23310:2:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "23298:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23298:15:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23278:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23278:36:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23278:36:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "23334:3:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23339:1:17",
                                    "type": "",
                                    "value": "2"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23330:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23330:11:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23351:2:17",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "name": "value2",
                                        "nodeType": "YulIdentifier",
                                        "src": "23355:6:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "23347:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23347:15:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23368:26:17",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "23364:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23364:31:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "23343:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23343:53:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23323:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23323:74:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23323:74:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23406:19:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "23417:3:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23422:2:17",
                                "type": "",
                                "value": "22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23413:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23413:12:17"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "23406:3:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes1_t_bytes1_t_address__to_t_bytes1_t_bytes1_t_address__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "23106:3:17",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "23111:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "23119:6:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "23127:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "23138:3:17",
                        "type": ""
                      }
                    ],
                    "src": "22975:456:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23530:203:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23540:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "23560:5:17"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "23554:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23554:12:17"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "23544:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23575:32:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "23594:5:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23601:4:17",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23590:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23590:16:17"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "23584:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23584:23:17"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "23575:5:17"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23644:83:17",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "23658:59:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "23671:5:17"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "23686:1:17",
                                              "type": "",
                                              "value": "3"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "23693:4:17",
                                                  "type": "",
                                                  "value": "0x20"
                                                },
                                                {
                                                  "name": "length",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "23699:6:17"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "23689:3:17"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "23689:17:17"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "23682:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "23682:25:17"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "23713:1:17",
                                              "type": "",
                                              "value": "0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "23709:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "23709:6:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "23678:3:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "23678:38:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "23667:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23667:50:17"
                                },
                                "variableNames": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "23658:5:17"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "23622:6:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23630:4:17",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "23619:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23619:16:17"
                          },
                          "nodeType": "YulIf",
                          "src": "23616:111:17"
                        }
                      ]
                    },
                    "name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "23510:5:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "23520:5:17",
                        "type": ""
                      }
                    ],
                    "src": "23436:297:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23770:152:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23787:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23790:77:17",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23780:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23780:88:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23780:88:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23884:1:17",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23887:4:17",
                                "type": "",
                                "value": "0x01"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23877:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23877:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23877:15:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23908:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23911:4:17",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "23901:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23901:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23901:15:17"
                        }
                      ]
                    },
                    "name": "panic_error_0x01",
                    "nodeType": "YulFunctionDefinition",
                    "src": "23738:184:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24210:391:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24220:28:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24230:18:17",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "24224:2:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24264:9:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "24279:6:17"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24287:2:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24275:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24275:15:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24257:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24257:34:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24257:34:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24311:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24322:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24307:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24307:18:17"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "24327:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24300:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24300:34:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24300:34:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24354:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24365:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24350:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24350:18:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "24374:6:17"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24382:2:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24370:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24370:15:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24343:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24343:43:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24343:43:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24406:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24417:2:17",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24402:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24402:18:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "24426:6:17"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24434:2:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24422:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24422:15:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24395:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24395:43:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24395:43:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24458:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24469:3:17",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24454:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24454:19:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24475:3:17",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24447:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24447:32:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24447:32:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24488:54:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "24514:6:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24526:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24537:3:17",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24522:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24522:19:17"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "24496:17:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24496:46:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24488:4:17"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24562:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24573:3:17",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24558:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24558:19:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value5",
                                    "nodeType": "YulIdentifier",
                                    "src": "24583:6:17"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24591:2:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24579:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24579:15:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24551:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24551:44:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24551:44:17"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint64_t_uint256_t_uint64_t_uint64_t_bytes_memory_ptr_t_userDefinedValueType$_FilActorId_$4907__to_t_uint64_t_uint256_t_uint64_t_uint64_t_bytes_memory_ptr_t_uint64__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24139:9:17",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "24150:6:17",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "24158:6:17",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "24166:6:17",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "24174:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "24182:6:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24190:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24201:4:17",
                        "type": ""
                      }
                    ],
                    "src": "23927:674:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24725:63:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "24742:3:17"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "24747:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24735:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24735:19:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24735:19:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24763:19:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "24774:3:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24779:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24770:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24770:12:17"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "24763:3:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_uint256__to_t_uint256__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "24701:3:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24706:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "24717:3:17",
                        "type": ""
                      }
                    ],
                    "src": "24606:182:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24967:162:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24984:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24995:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24977:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24977:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24977:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25018:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25029:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25014:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25014:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25034:2:17",
                                "type": "",
                                "value": "12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25007:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25007:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25007:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25057:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25068:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25053:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25053:18:17"
                              },
                              {
                                "hexValue": "496e76616c69642043424f52",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25073:14:17",
                                "type": "",
                                "value": "Invalid CBOR"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25046:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25046:42:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25046:42:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25097:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25109:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25120:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25105:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25105:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25097:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fd61d0da58dad259aa66f3fa1a93613cc3b690958f0ccf5500de84dec9fbf234__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24944:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24958:4:17",
                        "type": ""
                      }
                    ],
                    "src": "24793:336:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25308:181:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25325:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25336:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25318:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25318:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25318:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25359:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25370:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25355:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25355:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25375:2:17",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25348:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25348:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25348:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25398:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25409:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25394:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25394:18:17"
                              },
                              {
                                "hexValue": "696e76616c6964206d616a20286578706563746564204d616a417272617929",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25414:33:17",
                                "type": "",
                                "value": "invalid maj (expected MajArray)"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25387:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25387:61:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25387:61:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25457:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25469:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25480:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25465:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25465:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25457:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_eadd5f63832af00abbb5a29c2b0274a318c23767810298fe1b4b117cb100c1e4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25285:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25299:4:17",
                        "type": ""
                      }
                    ],
                    "src": "25134:355:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25623:119:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "25633:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25645:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25656:2:17",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25641:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25641:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25633:4:17"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25675:9:17"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "25686:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25668:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25668:25:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25668:25:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25713:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25724:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25709:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25709:18:17"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "25729:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25702:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25702:34:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25702:34:17"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25584:9:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "25595:6:17",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "25603:6:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25614:4:17",
                        "type": ""
                      }
                    ],
                    "src": "25494:248:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25869:711:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25915:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25924:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25927:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "25917:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25917:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25917:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "25890:7:17"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25899:9:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "25886:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25886:23:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25911:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "25882:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25882:32:17"
                          },
                          "nodeType": "YulIf",
                          "src": "25879:52:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25940:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25956:9:17"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "25950:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25950:16:17"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "25940:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "25975:38:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25998:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26009:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25994:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25994:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "25988:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25988:25:17"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "25979:5:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "26046:5:17"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_uint64",
                              "nodeType": "YulIdentifier",
                              "src": "26022:23:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26022:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26022:30:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26061:15:17",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "26071:5:17"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "26061:6:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26085:39:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26109:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26120:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26105:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26105:18:17"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "26099:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26099:25:17"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "26089:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26167:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26176:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26179:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "26169:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26169:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26169:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "26139:6:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26147:18:17",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "26136:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26136:30:17"
                          },
                          "nodeType": "YulIf",
                          "src": "26133:50:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26192:32:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26206:9:17"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "26217:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26202:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26202:22:17"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "26196:2:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26272:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26281:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26284:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "26274:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26274:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26274:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "26251:2:17"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "26255:4:17",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "26247:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26247:13:17"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "26262:7:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "26243:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26243:27:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "26236:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26236:35:17"
                          },
                          "nodeType": "YulIf",
                          "src": "26233:55:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26297:19:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "26313:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "26307:5:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26307:9:17"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "26301:2:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26325:61:17",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "26382:2:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_bytes",
                                  "nodeType": "YulIdentifier",
                                  "src": "26354:27:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26354:31:17"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "26338:15:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26338:48:17"
                          },
                          "variables": [
                            {
                              "name": "array",
                              "nodeType": "YulTypedName",
                              "src": "26329:5:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "26402:5:17"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "26409:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26395:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26395:17:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26395:17:17"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26458:16:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26467:1:17",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26470:1:17",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "26460:6:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26460:12:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26460:12:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "26435:2:17"
                                      },
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "26439:2:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "26431:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26431:11:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26444:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26427:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26427:20:17"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "26449:7:17"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "26424:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26424:33:17"
                          },
                          "nodeType": "YulIf",
                          "src": "26421:53:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "26522:2:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26526:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26518:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26518:11:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "26535:5:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26542:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26531:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26531:14:17"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "26547:2:17"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "26483:34:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26483:67:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26483:67:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26559:15:17",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "26569:5:17"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "26559:6:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_int256t_uint64t_bytes_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25819:9:17",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "25830:7:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "25842:6:17",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "25850:6:17",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "25858:6:17",
                        "type": ""
                      }
                    ],
                    "src": "25747:833:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26759:236:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26776:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26787:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26769:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26769:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26769:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26810:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26821:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26806:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26806:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26826:2:17",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26799:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26799:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26799:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26849:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26860:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26845:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26845:18:17"
                              },
                              {
                                "hexValue": "696e76616c6964206d616a20286578706563746564204d616a546167206f7220",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26865:34:17",
                                "type": "",
                                "value": "invalid maj (expected MajTag or "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26838:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26838:62:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26838:62:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26920:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26931:2:17",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26916:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26916:18:17"
                              },
                              {
                                "hexValue": "4d616a42797465537472696e6729",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26936:16:17",
                                "type": "",
                                "value": "MajByteString)"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26909:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26909:44:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26909:44:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26962:27:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26974:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26985:3:17",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26970:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26970:19:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26962:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1820a3ee693fd526282dae94ffcf463680fc06df576ebc74d89979a9063a3e38__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26736:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26750:4:17",
                        "type": ""
                      }
                    ],
                    "src": "26585:410:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27051:241:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "27061:20:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "27076:1:17"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "27079:1:17"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "27072:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27072:9:17"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "27061:7:17"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "27183:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "27185:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27185:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27185:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "27101:1:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27104:1:17",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "27097:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27097:9:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "27111:1:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27114:66:17",
                                    "type": "",
                                    "value": "0x8000000000000000000000000000000000000000000000000000000000000000"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "27108:2:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27108:73:17"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "27093:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27093:89:17"
                          },
                          "nodeType": "YulIf",
                          "src": "27090:115:17"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "27264:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "27266:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27266:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27266:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "27234:1:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "27227:6:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27227:9:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "27241:1:17"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "product",
                                            "nodeType": "YulIdentifier",
                                            "src": "27249:7:17"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "27258:1:17"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sdiv",
                                          "nodeType": "YulIdentifier",
                                          "src": "27244:4:17"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "27244:16:17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "27238:2:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27238:23:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "27224:2:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27224:38:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "27217:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27217:46:17"
                          },
                          "nodeType": "YulIf",
                          "src": "27214:72:17"
                        }
                      ]
                    },
                    "name": "checked_mul_t_int256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "27030:1:17",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "27033:1:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "27039:7:17",
                        "type": ""
                      }
                    ],
                    "src": "27000:292:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27335:74:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "27358:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "27360:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27360:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27360:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "27355:1:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "27348:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27348:9:17"
                          },
                          "nodeType": "YulIf",
                          "src": "27345:35:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27389:14:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "27398:1:17"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "27401:1:17"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "27394:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27394:9:17"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "27389:1:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "27320:1:17",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "27323:1:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "27329:1:17",
                        "type": ""
                      }
                    ],
                    "src": "27297:112:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27588:227:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27605:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27616:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27598:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27598:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27598:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27639:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27650:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27635:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27635:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27655:2:17",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27628:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27628:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27628:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27678:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27689:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27674:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27674:18:17"
                              },
                              {
                                "hexValue": "63616e6e6f742068616e646c6520686561646572732077697468206578747261",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27694:34:17",
                                "type": "",
                                "value": "cannot handle headers with extra"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27667:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27667:62:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27667:62:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27749:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27760:2:17",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27745:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27745:18:17"
                              },
                              {
                                "hexValue": "203e203237",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27765:7:17",
                                "type": "",
                                "value": " > 27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27738:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27738:35:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27738:35:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27782:27:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27794:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27805:3:17",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27790:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27790:19:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27782:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_6f82c34788d8778abb49e7830e3750f6cd371ae520d08cf5e4681c10bc23e2e2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27565:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27579:4:17",
                        "type": ""
                      }
                    ],
                    "src": "27414:401:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27994:162:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28011:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28022:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28004:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28004:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28004:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28045:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28056:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28041:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28041:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28061:2:17",
                                "type": "",
                                "value": "12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28034:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28034:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28034:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28084:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28095:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28080:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28080:18:17"
                              },
                              {
                                "hexValue": "696e76616c69642063626f72",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28100:14:17",
                                "type": "",
                                "value": "invalid cbor"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28073:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28073:42:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28073:42:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28124:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28136:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28147:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28132:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28132:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28124:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ba2de4de5403fbe104479ab34f8826931dc8b89be34d0073a9d00ec8cae45792__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27971:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27985:4:17",
                        "type": ""
                      }
                    ],
                    "src": "27820:336:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28335:243:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28352:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28363:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28345:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28345:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28345:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28386:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28397:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28382:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28382:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28402:2:17",
                                "type": "",
                                "value": "53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28375:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28375:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28375:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28425:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28436:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28421:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28421:18:17"
                              },
                              {
                                "hexValue": "696e76616c6964206d616a20286578706563746564204d616a5369676e656449",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28441:34:17",
                                "type": "",
                                "value": "invalid maj (expected MajSignedI"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28414:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28414:62:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28414:62:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28496:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28507:2:17",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28492:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28492:18:17"
                              },
                              {
                                "hexValue": "6e74206f72204d616a556e7369676e6564496e7429",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28512:23:17",
                                "type": "",
                                "value": "nt or MajUnsignedInt)"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28485:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28485:51:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28485:51:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28545:27:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28557:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28568:3:17",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28553:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28553:19:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28545:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d0d358dd5cc14ba3833a2d551d087581cb46d4dabc6d51877f906253706dff57__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28312:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28326:4:17",
                        "type": ""
                      }
                    ],
                    "src": "28161:417:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28647:358:17",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "28657:16:17",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28672:1:17",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "28661:7:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28682:16:17",
                          "value": {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "28691:7:17"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "28682:5:17"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28707:13:17",
                          "value": {
                            "name": "_base",
                            "nodeType": "YulIdentifier",
                            "src": "28715:5:17"
                          },
                          "variableNames": [
                            {
                              "name": "base",
                              "nodeType": "YulIdentifier",
                              "src": "28707:4:17"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "28771:228:17",
                            "statements": [
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "28816:22:17",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "28818:16:17"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "28818:18:17"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "28818:18:17"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "28791:4:17"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "28805:1:17",
                                              "type": "",
                                              "value": "0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "28801:3:17"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "28801:6:17"
                                        },
                                        {
                                          "name": "base",
                                          "nodeType": "YulIdentifier",
                                          "src": "28809:4:17"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "div",
                                        "nodeType": "YulIdentifier",
                                        "src": "28797:3:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "28797:17:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "28788:2:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "28788:27:17"
                                },
                                "nodeType": "YulIf",
                                "src": "28785:53:17"
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "28877:29:17",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "28879:25:17",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "power",
                                            "nodeType": "YulIdentifier",
                                            "src": "28892:5:17"
                                          },
                                          {
                                            "name": "base",
                                            "nodeType": "YulIdentifier",
                                            "src": "28899:4:17"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "28888:3:17"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "28888:16:17"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "power",
                                          "nodeType": "YulIdentifier",
                                          "src": "28879:5:17"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "28858:8:17"
                                    },
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "28868:7:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "28854:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "28854:22:17"
                                },
                                "nodeType": "YulIf",
                                "src": "28851:55:17"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "28919:23:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "28931:4:17"
                                    },
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "28937:4:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mul",
                                    "nodeType": "YulIdentifier",
                                    "src": "28927:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "28927:15:17"
                                },
                                "variableNames": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "28919:4:17"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "28955:34:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "28971:7:17"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "28980:8:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "28967:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "28967:22:17"
                                },
                                "variableNames": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "28955:8:17"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "28740:8:17"
                              },
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "28750:7:17"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "28737:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28737:21:17"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "28759:3:17",
                            "statements": []
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "28733:3:17",
                            "statements": []
                          },
                          "src": "28729:270:17"
                        }
                      ]
                    },
                    "name": "checked_exp_helper",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "_base",
                        "nodeType": "YulTypedName",
                        "src": "28611:5:17",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "28618:8:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "28631:5:17",
                        "type": ""
                      },
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "28638:4:17",
                        "type": ""
                      }
                    ],
                    "src": "28583:422:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29069:747:17",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "29107:52:17",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "29121:10:17",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "29130:1:17",
                                  "type": "",
                                  "value": "1"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "29121:5:17"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "29144:5:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "29089:8:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "29082:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29082:16:17"
                          },
                          "nodeType": "YulIf",
                          "src": "29079:80:17"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "29192:52:17",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "29206:10:17",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "29215:1:17",
                                  "type": "",
                                  "value": "0"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "29206:5:17"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "29229:5:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "29178:4:17"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "29171:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29171:12:17"
                          },
                          "nodeType": "YulIf",
                          "src": "29168:76:17"
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "29280:52:17",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "29294:10:17",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "29303:1:17",
                                      "type": "",
                                      "value": "1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "29294:5:17"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "29317:5:17"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "29273:59:17",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29278:1:17",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "29348:123:17",
                                "statements": [
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "29383:22:17",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "panic_error_0x11",
                                              "nodeType": "YulIdentifier",
                                              "src": "29385:16:17"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "29385:18:17"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "29385:18:17"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "29368:8:17"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "29378:3:17",
                                          "type": "",
                                          "value": "255"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nodeType": "YulIdentifier",
                                        "src": "29365:2:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "29365:17:17"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "29362:43:17"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "29418:25:17",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "29431:8:17"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "29441:1:17",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "29427:3:17"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "29427:16:17"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "29418:5:17"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "29456:5:17"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "29341:130:17",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29346:1:17",
                                "type": "",
                                "value": "2"
                              }
                            }
                          ],
                          "expression": {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "29260:4:17"
                          },
                          "nodeType": "YulSwitch",
                          "src": "29253:218:17"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "29569:70:17",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "29583:28:17",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "29596:4:17"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "29602:8:17"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "exp",
                                    "nodeType": "YulIdentifier",
                                    "src": "29592:3:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "29592:19:17"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "29583:5:17"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "29624:5:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "29493:4:17"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "29499:2:17",
                                        "type": "",
                                        "value": "11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "29490:2:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "29490:12:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "29507:8:17"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "29517:2:17",
                                        "type": "",
                                        "value": "78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "29504:2:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "29504:16:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "29486:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29486:35:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "29530:4:17"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "29536:3:17",
                                        "type": "",
                                        "value": "307"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "29527:2:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "29527:13:17"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "29545:8:17"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "29555:2:17",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "29542:2:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "29542:16:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "29523:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29523:36:17"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "29483:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29483:77:17"
                          },
                          "nodeType": "YulIf",
                          "src": "29480:159:17"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "29648:57:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "29690:4:17"
                              },
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "29696:8:17"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_helper",
                              "nodeType": "YulIdentifier",
                              "src": "29671:18:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29671:34:17"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "29652:7:17",
                              "type": ""
                            },
                            {
                              "name": "base_1",
                              "nodeType": "YulTypedName",
                              "src": "29661:6:17",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "29750:22:17",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "29752:16:17"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "29752:18:17"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "29752:18:17"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "29720:7:17"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "29737:1:17",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "29733:3:17"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "29733:6:17"
                                  },
                                  {
                                    "name": "base_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "29741:6:17"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "29729:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29729:19:17"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "29717:2:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29717:32:17"
                          },
                          "nodeType": "YulIf",
                          "src": "29714:58:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29781:29:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "29794:7:17"
                              },
                              {
                                "name": "base_1",
                                "nodeType": "YulIdentifier",
                                "src": "29803:6:17"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "29790:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29790:20:17"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "29781:5:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_unsigned",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "29040:4:17",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "29046:8:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "29059:5:17",
                        "type": ""
                      }
                    ],
                    "src": "29010:806:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29891:61:17",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "29901:45:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "29931:4:17"
                              },
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "29937:8:17"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_unsigned",
                              "nodeType": "YulIdentifier",
                              "src": "29910:20:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29910:36:17"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "29901:5:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_t_uint256_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "29862:4:17",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "29868:8:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "29881:5:17",
                        "type": ""
                      }
                    ],
                    "src": "29821:131:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30131:170:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30148:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30159:2:17",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30141:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30141:21:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30141:21:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30182:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30193:2:17",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30178:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30178:18:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30198:2:17",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30171:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30171:30:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30171:30:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30221:9:17"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30232:2:17",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30217:3:17"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30217:18:17"
                              },
                              {
                                "hexValue": "736c6963696e67206f7574206f662072616e6765",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "30237:22:17",
                                "type": "",
                                "value": "slicing out of range"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30210:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30210:50:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30210:50:17"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30269:26:17",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30281:9:17"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30292:2:17",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30277:3:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30277:18:17"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30269:4:17"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_294d2bd5b6fb7e8eb608d7ff076f4babdc08155a7a6671f4f35801fb90c8bda4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30108:9:17",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30122:4:17",
                        "type": ""
                      }
                    ],
                    "src": "29957:344:17"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30338:152:17",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30355:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30358:77:17",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30348:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30348:88:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30348:88:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30452:1:17",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30455:4:17",
                                "type": "",
                                "value": "0x51"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30445:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30445:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30445:15:17"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30476:1:17",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30479:4:17",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "30469:6:17"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30469:15:17"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30469:15:17"
                        }
                      ]
                    },
                    "name": "panic_error_0x51",
                    "nodeType": "YulFunctionDefinition",
                    "src": "30306:184:17"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function validator_revert_uint64(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint64(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_uint64(value)\n        value1 := value\n    }\n    function abi_encode_bool(value, pos)\n    {\n        mstore(pos, iszero(iszero(value)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bool(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value2 := value\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bool_t_uint256_t_uint64_t_uint256_t_bool__to_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bool_t_uint256_t_uint64_t_uint256_t_bool__fromStack_reversed(headStart, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 288\n        mstore(headStart, _1)\n        let tail_1 := abi_encode_string(value0, add(headStart, _1))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string(value1, tail_1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), and(value6, 0xffffffffffffffff))\n        mstore(add(headStart, 224), value7)\n        mstore(add(headStart, 256), iszero(iszero(value8)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool_t_uint256_t_uint256__to_t_bool_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_string_memory_ptrt_uint256t_string_memory_ptrt_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        let offset_2 := calldataload(add(headStart, 96))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n        let offset_3 := calldataload(add(headStart, 128))\n        if gt(offset_3, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_3), dataEnd)\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint64_t_bool_t_uint256_t_uint256_t_uint256__to_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint64_t_bool_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value11, value10, value9, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 384)\n        let tail_1 := abi_encode_string(value0, add(headStart, 384))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value1, tail_1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        let tail_3 := abi_encode_string(value4, tail_2)\n        mstore(add(headStart, 160), sub(tail_3, headStart))\n        tail := abi_encode_string(value5, tail_3)\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), and(value7, 0xffffffffffffffff))\n        abi_encode_bool(value8, add(headStart, 256))\n        mstore(add(headStart, 288), value9)\n        mstore(add(headStart, 320), value10)\n        mstore(add(headStart, 352), value11)\n    }\n    function abi_encode_tuple_t_stringliteral_1a4b61c98b9841d602d12810015ff1c3d525198462b5406b1c092cc6774cfa0f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Only platform owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1721937db35aab2615e0f626ac86fd6a03a74d45be77c4af6172ceea56920f2a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Fee too high (max 20%)\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_04020914ee6be5faf51dc15f467e384e49a84b3a213963b76bedf8f68cabf15e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Only content owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_03cab24dbf79225d56793ac5f83d0ab6c041c4b887c6736ed6958564dace0807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Invalid deal ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_685a34e07ef4455da8571f5565310357c3f03d925bab32b05732db463b78b612__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Content does not exist\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_1b6b7ea1ca601eedacaf5021d2f04292cf19df119f1635d866f2b5c9b71440a1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Price must be > 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f80df61440352615d9c68bcc18d0f6784da2935eb86cb36e56d70ffaae053c76__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Content not active\")\n        tail := add(headStart, 96)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := extract_byte_array_length(slotValue)\n        mstore(add(headStart, _1), length)\n        let _2 := 64\n        let _3 := 1\n        switch and(slotValue, _3)\n        case 0 {\n            mstore(add(headStart, _2), and(slotValue, not(255)))\n            ret := add(add(headStart, shl(5, iszero(iszero(length)))), _2)\n        }\n        case 1 {\n            mstore(0, value0)\n            let dataPos := keccak256(0, _1)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _1) }\n            {\n                mstore(add(add(headStart, i), _2), sload(dataPos))\n                dataPos := add(dataPos, _3)\n            }\n            ret := add(add(headStart, i), _2)\n        }\n        tail := ret\n    }\n    function abi_encode_tuple_t_stringliteral_a0d422e805337c0dc07360547d1aa26fc70a2a5c62b1d22f8e314f6d43087aa4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"Purchase required to access CID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_37d410c1ccd9f50939709ebcd9d16c00c7b3cebea97e8a73c68ef8aca331ed97__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Access expired\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8d1b93b434e468e73514a2449ae955e822f73dcdf924bb4553be247ebca8755e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Insufficient payment\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e4bb3660efcaca24efbc5ce666b638ab6baa672862c4367f3966fa88eddb40ae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Owner cannot purchase own conten\")\n        mstore(add(headStart, 96), \"t\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_35845a4dd39b6d1819dfcaee0d0b6248786e49f1108e6ea29d0ec169f4a73e21__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Already has access\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_2bbe70e6500e9642f2862dc923170a5f09b5a43a51b0f2c3488a318564bb6925__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Withdraw failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_711da878a5a614cdfbd063fa65ca57efee38c107279c85c0146c92cd495af6c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Conversion failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e105af277794b536055375a9afc2a6a8c47099a20172c7909e8ff88d99f72aee__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Piece CID required\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3c3247ba153256ca0d68baeb08e827c5706942a406fc310a6bc53c49adac0c58__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Data CID required\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a055377333a83ca7a5b90a9ab8b65e060ce9c9a8dcacd7846f2dc39e04309773__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Title required\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d778fc0214c7f53fa977d7227c3e255517a7f16df13b2644af0f442df5cdbdcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Piece size must be > 0\")\n        tail := add(headStart, 96)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_string_memory_ptr__to_t_bytes_memory_ptr_t_string_memory_ptr_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 128)\n        let tail_1 := abi_encode_string(value0, add(headStart, 128))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value1, tail_1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), sub(tail_2, headStart))\n        tail := abi_encode_string(value3, tail_2)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_packed_t_bytes1_t_bytes1_t_address__to_t_bytes1_t_bytes1_t_address__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let _1 := 0xff00000000000000000000000000000000000000000000000000000000000000\n        mstore(pos, and(value0, _1))\n        mstore(add(pos, 1), and(value1, _1))\n        mstore(add(pos, 2), and(shl(96, value2), not(0xffffffffffffffffffffffff)))\n        end := add(pos, 22)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function panic_error_0x01()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_uint64_t_uint256_t_uint64_t_uint64_t_bytes_memory_ptr_t_userDefinedValueType$_FilActorId_$4907__to_t_uint64_t_uint256_t_uint64_t_uint64_t_bytes_memory_ptr_t_uint64__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), 192)\n        tail := abi_encode_string(value4, add(headStart, 192))\n        mstore(add(headStart, 160), and(value5, _1))\n    }\n    function abi_encode_tuple_packed_t_uint256__to_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, value0)\n        end := add(pos, 32)\n    }\n    function abi_encode_tuple_t_stringliteral_fd61d0da58dad259aa66f3fa1a93613cc3b690958f0ccf5500de84dec9fbf234__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"Invalid CBOR\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_eadd5f63832af00abbb5a29c2b0274a318c23767810298fe1b4b117cb100c1e4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"invalid maj (expected MajArray)\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_int256t_uint64t_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        validator_revert_uint64(value)\n        value1 := value\n        let offset := mload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let _2 := mload(_1)\n        let array := allocate_memory(array_allocation_size_bytes(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_1, 32), add(array, 32), _2)\n        value2 := array\n    }\n    function abi_encode_tuple_t_stringliteral_1820a3ee693fd526282dae94ffcf463680fc06df576ebc74d89979a9063a3e38__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"invalid maj (expected MajTag or \")\n        mstore(add(headStart, 96), \"MajByteString)\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_int256(x, y) -> product\n    {\n        product := mul(x, y)\n        if and(slt(x, 0), eq(y, 0x8000000000000000000000000000000000000000000000000000000000000000)) { panic_error_0x11() }\n        if iszero(or(iszero(x), eq(y, sdiv(product, x)))) { panic_error_0x11() }\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_6f82c34788d8778abb49e7830e3750f6cd371ae520d08cf5e4681c10bc23e2e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"cannot handle headers with extra\")\n        mstore(add(headStart, 96), \" > 27\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ba2de4de5403fbe104479ab34f8826931dc8b89be34d0073a9d00ec8cae45792__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"invalid cbor\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d0d358dd5cc14ba3833a2d551d087581cb46d4dabc6d51877f906253706dff57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 53)\n        mstore(add(headStart, 64), \"invalid maj (expected MajSignedI\")\n        mstore(add(headStart, 96), \"nt or MajUnsignedInt)\")\n        tail := add(headStart, 128)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function abi_encode_tuple_t_stringliteral_294d2bd5b6fb7e8eb608d7ff076f4babdc08155a7a6671f4f35801fb90c8bda4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"slicing out of range\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x51()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x51)\n        revert(0, 0x24)\n    }\n}",
              "id": 17,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x184 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x90875975 GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0xDD12CEFF GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE4847CF2 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE4847CF2 EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0xF096F2C0 EQ PUSH2 0x4CE JUMPI DUP1 PUSH4 0xFDC9EAC3 EQ PUSH2 0x506 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDD12CEFF EQ PUSH2 0x408 JUMPI DUP1 PUSH4 0xDFD230C8 EQ PUSH2 0x428 JUMPI DUP1 PUSH4 0xE4580245 EQ PUSH2 0x48E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB91D0A2F GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xB91D0A2F EQ PUSH2 0x3C0 JUMPI DUP1 PUSH4 0xCED14198 EQ PUSH2 0x3D3 JUMPI DUP1 PUSH4 0xD0B7830B EQ PUSH2 0x3F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x90875975 EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0x913A2FFE EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0xAAD68BDC EQ PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x317DAAE8 GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x67873F42 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0x67873F42 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x692BD51B EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x7509C330 EQ PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x317DAAE8 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x33BE97FF EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0x3CDEE4C6 EQ PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x12E8E2C3 GT PUSH2 0x169 JUMPI DUP1 PUSH4 0x12E8E2C3 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x16232247 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x28D0D85D EQ PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xADEC951 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x10799582 EQ PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x18B JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x4088 JUMP JUMPDEST PUSH2 0x51B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1E3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x54C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x40E1 JUMP JUMPDEST PUSH2 0x5F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x289 PUSH2 0x284 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x727 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4111 JUMP JUMPDEST PUSH2 0xABC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x412C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0xB28 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x4170 JUMP JUMPDEST PUSH2 0xBE2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x326 PUSH2 0x321 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0xD31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x41FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x356 CALLDATASIZE PUSH1 0x4 PUSH2 0x4339 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD DUP1 MLOAD PUSH1 0x4 DUP3 MSTORE SWAP3 DUP3 ADD SWAP2 SWAP1 SWAP4 ADD KECCAK256 SWAP2 MSTORE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x393 PUSH2 0x38E CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x1118 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x436E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x3BB CALLDATASIZE PUSH1 0x4 PUSH2 0x4088 JUMP JUMPDEST PUSH2 0x1486 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x3CE CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x14A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x289 PUSH2 0x3EE CALLDATASIZE PUSH1 0x4 PUSH2 0x4381 JUMP JUMPDEST PUSH2 0x1858 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x1C10 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x423 CALLDATASIZE PUSH1 0x4 PUSH2 0x4111 JUMP JUMPDEST PUSH2 0x1C9C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x471 PUSH2 0x443 CALLDATASIZE PUSH1 0x4 PUSH2 0x4381 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF SWAP1 SWAP3 AND SWAP2 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x4A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x1D06 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x4C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x43AD JUMP JUMPDEST PUSH2 0x1E91 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EE PUSH2 0x4E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x40B2 JUMP JUMPDEST PUSH2 0x2244 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x446C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x512 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B9 PUSH2 0x24DC JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x27B7363C90383630BA3337B9369037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x14 DUP2 GT ISZERO PUSH2 0x5F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46656520746F6F206869676820286D6178203230252900000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x662 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920636F6E74656E74206F776E65720000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x6BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206465616C2049440000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x7 DUP2 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH8 0xFFFFFFFFFFFFFFFF DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP3 MLOAD SWAP3 DUP4 MSTORE SWAP2 DUP6 SWAP2 PUSH32 0x394AF79EC5A12BEB5B87A9211E65472B1142C08DB3823B84C51DF1F4C56D0AFC SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x73B JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0x780 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP2 MLOAD PUSH2 0x180 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 SWAP1 DUP3 SWAP1 PUSH2 0x7A8 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7D4 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x821 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x821 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x804 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x83A SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x866 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8B3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x888 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8B3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x896 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x8ED SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x919 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x966 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x93B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x966 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x949 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0x97F SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9AB SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9F8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9CD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9F8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9DB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD SWAP2 SWAP3 POP AND PUSH1 0x0 SUB PUSH2 0xA6C JUMPI PUSH1 0x0 SWAP3 POP POP PUSH2 0xAB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA7C DUP4 PUSH1 0xE0 ADD MLOAD PUSH2 0x2645 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ PUSH2 0xA94 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP PUSH2 0xAB6 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x7 SIGNEXTEND SGT DUP1 ISZERO PUSH2 0xAB0 JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x7 SIGNEXTEND ISZERO JUMPDEST SWAP5 POP POP POP POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xB1C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xB08 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x27B7363C90383630BA3337B9369037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH2 0xBDD PUSH2 0xBD7 ADDRESS PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP1 MSTORE DUP3 MLOAD SWAP1 DUP2 ADD DUP4 MSTORE PUSH1 0x1 PUSH1 0xFA SHL DUP2 DUP5 ADD MSTORE PUSH1 0x5 PUSH1 0xF9 SHL PUSH1 0x41 DUP3 ADD MSTORE SWAP3 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x42 DUP4 ADD MSTORE DUP1 MLOAD PUSH1 0x36 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x56 DUP4 ADD SWAP1 SWAP2 MSTORE DUP2 MSTORE SWAP1 JUMP JUMPDEST DUP3 PUSH2 0x26CD JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xBF4 JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0xC39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCA4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920636F6E74656E74206F776E65720000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP5 GT PUSH2 0xCF4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5072696365206D757374206265203E2030000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x7 ADD DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH9 0xFF0000000000000000 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP10 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0xD51 JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0xD96 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP2 MLOAD PUSH2 0x180 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 SWAP1 DUP3 SWAP1 PUSH2 0xDBE SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDEA SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE37 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE0C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE37 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE1A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0xE50 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE7C SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEC9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE9E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xEC9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xEAC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0xF03 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF2F SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF7C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF51 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF7C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF5F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0xF95 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFC1 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x100E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFE3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x100E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFF1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0x10C9 JUMPI POP PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x10C9 JUMPI POP PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP1 POP DUP2 PUSH1 0x80 ADD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH2 0x100 ADD MLOAD DUP7 PUSH2 0x120 ADD MLOAD DUP8 PUSH1 0xE0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP9 SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP SWAP12 POP POP POP POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP1 SWAP3 SWAP5 SWAP7 SWAP9 POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x112C JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0x1171 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x11DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74656E74206E6F74206163746976650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x12C8 JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0xFE6C2A0BC70560C176DC5579CE090C1E46522984AB27A01F53F182E48AF348FC DUP4 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0x122B SWAP2 SWAP1 PUSH2 0x4552 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1242 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x126E SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12BB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1290 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x12BB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x129E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP3 POP POP PUSH2 0xAB6 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP3 MSTORE SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x60 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP1 DUP3 MSTORE SWAP4 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x1356 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x507572636861736520726571756972656420746F206163636573732043494400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD TIMESTAMP GT ISZERO PUSH2 0x13AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4163636573732065787069726564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0xFE6C2A0BC70560C176DC5579CE090C1E46522984AB27A01F53F182E48AF348FC DUP5 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0x13E7 SWAP2 SWAP1 PUSH2 0x4552 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x13FE SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x142A SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1477 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x144C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1477 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x145A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x14B4 JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0x14F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1562 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E74656E74206E6F74206163746976650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST DUP1 PUSH1 0x2 ADD SLOAD CALLVALUE LT ISZERO PUSH2 0x15B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E74207061796D656E74000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1638 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E65722063616E6E6F74207075726368617365206F776E20636F6E74656E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x16A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416C726561647920686173206163636573730000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH1 0x7 SLOAD CALLVALUE PUSH2 0x16B4 SWAP2 SWAP1 PUSH2 0x45F3 JUMP JUMPDEST PUSH2 0x16BE SWAP2 SWAP1 PUSH2 0x4620 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16CC DUP3 CALLVALUE PUSH2 0x4634 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH4 0x1E13380 PUSH2 0x16F8 SWAP2 SWAP1 PUSH2 0x4647 JUMP JUMPDEST SWAP1 MSTORE PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP6 MLOAD DUP2 SLOAD PUSH1 0xFF NOT AND SWAP1 ISZERO ISZERO OR DUP2 SSTORE SWAP2 DUP6 ADD MLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP3 ADD MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x9 DUP5 ADD DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x174C SWAP1 DUP5 SWAP1 PUSH2 0x4647 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0xA DUP4 ADD DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1763 DUP4 PUSH2 0x465A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP6 MSTORE SWAP2 DUP5 KECCAK256 SWAP1 SWAP2 ADD DUP9 SWAP1 SSTORE SWAP1 DUP6 ADD SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH2 0x8FC DUP5 ISZERO MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x17C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP2 ISZERO PUSH2 0x1809 JUMPI PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1807 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 CALLER SWAP1 DUP8 SWAP1 PUSH32 0x26E00FD8C1E2F9F49A7DD9112E06891CCB703EF8CADE25686CD7C00E73BDDF53 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x186C JUMPI POP PUSH1 0x5 SLOAD DUP2 LT JUMPDEST PUSH2 0x18B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DBDB9D195B9D08191BD95CC81B9BDD08195E1A5CDD PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP2 MLOAD PUSH2 0x180 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 SWAP1 DUP3 SWAP1 PUSH2 0x18D9 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1905 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1952 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1927 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1952 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1935 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x196B SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1997 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19E4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x19B9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x19E4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x19C7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x1A1E SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1A4A SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A97 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1A6C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1A97 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1A7A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0x1AB0 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1ADC SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1B29 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1AFE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1B29 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1B0C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 SWAP1 SWAP2 ADD MSTORE DUP2 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP6 AND SUB PUSH2 0x1BA8 JUMPI PUSH1 0x1 SWAP3 POP POP PUSH2 0x1C09 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP6 MSTORE DUP3 MSTORE SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x60 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH1 0xFF AND ISZERO DUP1 ISZERO DUP1 DUP4 MSTORE SWAP5 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x1C04 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP4 POP POP POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1C60 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x27B7363C90383630BA3337B9369037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1C99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xB1C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xB08 JUMPI POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1D59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x27B7363C90383630BA3337B9369037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE DUP2 DUP4 ADD DUP2 SWAP1 MSTORE DUP3 MLOAD PUSH1 0x20 DUP2 ADD DUP5 MSTORE PUSH1 0x1 PUSH1 0xFA SHL DUP2 DUP6 ADD MSTORE PUSH1 0x5 PUSH1 0xF9 SHL PUSH1 0x41 DUP3 ADD MSTORE ADDRESS SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x42 DUP3 ADD MSTORE DUP3 MLOAD PUSH1 0x36 DUP2 DUP4 SUB ADD DUP2 MSTORE PUSH1 0x56 DUP3 ADD SWAP1 SWAP4 MSTORE SWAP2 DUP3 MSTORE PUSH1 0x0 SWAP2 DUP2 SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1DC4 DUP6 PUSH2 0x2728 JUMP JUMPDEST SWAP1 MSTORE SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1DD4 DUP4 PUSH2 0x276E JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ PUSH2 0x1E28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5769746864726177206661696C65640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E34 DUP4 PUSH2 0x27DC JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1E85 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E76657273696F6E206661696C6564000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP8 MLOAD GT PUSH2 0x1EE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5069656365204349442072657175697265640000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP7 MLOAD GT PUSH2 0x1F34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4461746120434944207265717569726564000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP6 GT PUSH2 0x1F84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5072696365206D757374206265203E2030000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD GT PUSH2 0x1FD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5469746C65207265717569726564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x2025 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50696563652073697A65206D757374206265203E203000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0x2036 DUP4 PUSH2 0x465A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE DUP11 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP12 SWAP1 MSTORE DUP2 DUP4 ADD DUP11 SWAP1 MSTORE CALLER PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xE0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH2 0x100 DUP5 ADD MSTORE TIMESTAMP PUSH2 0x120 DUP5 ADD MSTORE PUSH2 0x140 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x160 DUP4 ADD DUP2 SWAP1 MSTORE DUP5 DUP2 MSTORE SWAP1 DUP2 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 DUP2 MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 DUP2 SWAP1 PUSH2 0x20B7 SWAP1 DUP3 PUSH2 0x46C1 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SWAP1 PUSH2 0x20CC SWAP1 DUP3 PUSH2 0x46C1 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SWAP1 PUSH2 0x2129 SWAP1 DUP3 PUSH2 0x46C1 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP3 ADD SWAP1 PUSH2 0x213E SWAP1 DUP3 PUSH2 0x46C1 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x7 DUP3 ADD DUP1 SLOAD PUSH2 0x100 DUP6 ADD MLOAD ISZERO ISZERO PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH9 0xFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP2 AND PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x8 DUP3 ADD SSTORE PUSH2 0x140 DUP3 ADD MLOAD PUSH1 0x9 DUP3 ADD SSTORE PUSH2 0x160 SWAP1 SWAP2 ADD MLOAD PUSH1 0xA SWAP1 SWAP2 ADD SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 ADD DUP3 SWAP1 SSTORE MLOAD DUP2 SWAP1 PUSH1 0x4 SWAP1 PUSH2 0x21DF SWAP1 DUP12 SWAP1 PUSH2 0x4781 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 SWAP1 SSTORE POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH32 0xCD812A0D696722931EC25325AE74CBFEFB3B88A77AAAFC379E52097BD6BA050D DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH2 0x2231 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x479D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP2 SWAP1 PUSH2 0x225F SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x228B SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x22D8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x22AD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x22D8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x22BB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x22ED SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2319 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2366 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x233B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2366 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2349 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD DUP1 SLOAD SWAP5 SWAP6 SWAP3 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP SWAP1 PUSH2 0x2395 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x23C1 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x240E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x23E3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x240E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x23F1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x5 ADD DUP1 SLOAD PUSH2 0x2423 SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x244F SWAP1 PUSH2 0x451E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x249C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2471 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x249C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x247F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP PUSH1 0x6 DUP4 ADD SLOAD PUSH1 0x7 DUP5 ADD SLOAD PUSH1 0x8 DUP6 ADD SLOAD PUSH1 0x9 DUP7 ADD SLOAD PUSH1 0xA SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 SWAP3 SWAP5 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND SWAP5 POP PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP3 DIV PUSH1 0xFF AND SWAP3 SWAP1 SWAP2 DUP13 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH1 0x5 SLOAD PUSH2 0x24EF SWAP2 SWAP1 PUSH2 0x4634 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2507 JUMPI PUSH2 0x2507 PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2530 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x1 JUMPDEST PUSH1 0x5 SLOAD DUP2 LT ISZERO PUSH2 0x25A1 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x258F JUMPI DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2576 JUMPI PUSH2 0x2576 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP2 PUSH2 0x258B DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP1 PUSH2 0x2599 DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2538 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25BD JUMPI PUSH2 0x25BD PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x25E6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x263D JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2606 JUMPI PUSH2 0x2606 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2620 JUMPI PUSH2 0x2620 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x2635 DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25EC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH1 0x0 PUSH2 0x2671 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x2876 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x2688 PUSH1 0x5 PUSH4 0x9904F2FF PUSH1 0x51 DUP7 PUSH2 0x28B7 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 SUB PUSH2 0x26AB JUMPI PUSH1 0x0 PUSH2 0x269F DUP3 PUSH2 0x28E1 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST SWAP2 SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH2 0x26DC DUP6 PUSH2 0x2945 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x26F6 PUSH1 0x5 PUSH4 0x3105F1A6 PUSH1 0x51 DUP7 DUP11 PUSH1 0x0 PUSH2 0x2973 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ PUSH2 0x271C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE749907 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x274A DUP4 PUSH1 0x0 PUSH2 0x2A86 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MLOAD ISZERO ISZERO SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH1 0x0 PUSH2 0x2791 DUP5 PUSH2 0x2AE2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x27AB PUSH1 0x5 PUSH4 0x87ED0A64 PUSH1 0x51 DUP7 PUSH1 0x0 DUP1 PUSH2 0x2973 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 SUB PUSH2 0x27C2 JUMPI PUSH1 0x0 PUSH2 0x269F DUP3 PUSH2 0x2B7C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x26C0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x20 ADD MLOAD ISZERO PUSH2 0x281B JUMPI PUSH1 0x40 MLOAD PUSH32 0x83041CEA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x282A PUSH1 0x0 NOT PUSH1 0x0 PUSH2 0x2A86 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2840 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x2BE0 JUMP JUMPDEST SWAP1 POP PUSH2 0x284C DUP2 DUP4 PUSH2 0x2C12 JUMP JUMPDEST ISZERO PUSH2 0x285F JUMPI POP PUSH1 0x0 SWAP5 PUSH1 0x1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x286A SWAP1 PUSH2 0x47FD JUMP JUMPDEST SWAP6 PUSH1 0x0 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x288D DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x2C3C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x289A DUP3 PUSH2 0x2C8A JUMP JUMPDEST SWAP1 POP PUSH2 0x28A6 DUP2 DUP6 PUSH2 0x2CAB JUMP JUMPDEST PUSH2 0x28AF DUP2 PUSH2 0x2CBB JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x2973 DUP1 PUSH2 0x28D2 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x1 PUSH4 0xFFFFFFFF DUP9 AND JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH2 0x2902 DUP5 DUP3 PUSH2 0x2D17 JUMP JUMPDEST SWAP3 POP SWAP1 POP PUSH1 0x2 DUP2 EQ PUSH2 0x2916 JUMPI PUSH2 0x2916 PUSH2 0x4821 JUMP JUMPDEST PUSH2 0x2920 DUP5 DUP4 PUSH2 0x2D94 JUMP JUMPDEST PUSH1 0x7 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP5 MSTORE SWAP2 POP PUSH2 0x2934 DUP5 DUP4 PUSH2 0x2D94 JUMP JUMPDEST POP PUSH1 0x7 SIGNEXTEND PUSH1 0x20 DUP5 ADD MSTORE POP SWAP1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2956 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x2DA2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2963 DUP3 PUSH2 0x2C8A JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP PUSH2 0x28A6 SWAP1 DUP3 SWAP1 PUSH2 0x2DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x2995 PUSH20 0xFE00000000000000000000000000000000000005 DUP6 PUSH2 0x2DD3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFE00000000000000000000000000000000000005 DUP10 DUP8 DUP8 PUSH2 0x29BB JUMPI PUSH1 0x0 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x1 JUMPDEST DUP12 DUP12 DUP16 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x29D6 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4837 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x29F0 SWAP2 PUSH2 0x4781 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2A2B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2A30 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x2A6C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8A7DB5BF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2A75 DUP2 PUSH2 0x2E59 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2AAC PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x2AD9 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2AC2 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP4 PUSH1 0x0 PUSH2 0x2F45 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x2AF4 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x3026 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B00 PUSH1 0x2 PUSH2 0x2C3C JUMP JUMPDEST PUSH2 0x2B0A SWAP1 DUP4 PUSH2 0x4647 JUMP JUMPDEST DUP5 MLOAD MLOAD SWAP1 SWAP3 POP PUSH2 0x2B19 SWAP1 PUSH2 0x2DA2 JUMP JUMPDEST PUSH2 0x2B23 SWAP1 DUP4 PUSH2 0x4647 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B2E DUP2 PUSH2 0x2DA2 JUMP JUMPDEST PUSH2 0x2B38 SWAP1 DUP4 PUSH2 0x4647 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x2B45 DUP4 PUSH2 0x2C8A JUMP JUMPDEST SWAP1 POP PUSH2 0x2B52 DUP2 PUSH1 0x2 PUSH2 0x3146 JUMP JUMPDEST DUP5 MLOAD MLOAD PUSH2 0x2B60 SWAP1 DUP3 SWAP1 PUSH2 0x2DBA JUMP JUMPDEST PUSH2 0x2B6A DUP2 DUP4 PUSH2 0x2DBA JUMP JUMPDEST PUSH2 0x2B73 DUP2 PUSH2 0x2CBB JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP4 MLOAD ISZERO PUSH2 0x2BBA JUMPI PUSH2 0x2BA5 DUP5 DUP3 PUSH2 0x3152 JUMP JUMPDEST DUP2 MLOAD SWAP2 SWAP4 POP SWAP2 POP ISZERO PUSH2 0x2BBA JUMPI PUSH2 0x28AF DUP3 PUSH2 0x3319 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 DUP4 ADD DUP2 DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C06 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x2AD9 DUP4 DUP4 PUSH1 0x0 PUSH2 0x2F45 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2C21 DUP5 DUP5 PUSH1 0x1 PUSH2 0x34A6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ PUSH2 0x2C32 JUMPI PUSH1 0x0 PUSH2 0x28AF JUMP JUMPDEST PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x17 DUP3 GT PUSH2 0x2C4E JUMPI POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xFF DUP3 GT PUSH2 0x2C5E JUMPI POP PUSH1 0x2 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP3 GT PUSH2 0x2C6F JUMPI POP PUSH1 0x3 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 GT PUSH2 0x2C82 JUMPI POP PUSH1 0x5 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x9 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C92 PUSH2 0x403C JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2C9E SWAP1 DUP4 PUSH2 0x35E1 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2CB7 DUP3 PUSH1 0x0 DUP4 PUSH2 0x3658 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ PUSH2 0x2D11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642043424F520000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP MLOAD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x2D27 DUP7 DUP7 PUSH2 0x3779 JUMP JUMPDEST SWAP7 POP SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0xFF DUP3 AND PUSH1 0x4 EQ PUSH2 0x2D8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C6964206D616A20286578706563746564204D616A41727261792900 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST SWAP6 SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x271C DUP6 DUP6 PUSH2 0x397C JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x2DB0 DUP4 MLOAD PUSH2 0x2C3C JUMP JUMPDEST PUSH2 0x2ADC SWAP2 SWAP1 PUSH2 0x4647 JUMP JUMPDEST PUSH2 0x2DC7 DUP3 PUSH1 0x2 DUP4 MLOAD PUSH2 0x3658 JUMP JUMPDEST DUP2 MLOAD PUSH2 0xBDD SWAP1 DUP3 PUSH2 0x3A22 JUMP JUMPDEST SELFBALANCE DUP2 DUP2 LT ISZERO PUSH2 0x2E18 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8F0F420600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x598 JUMP JUMPDEST DUP3 EXTCODEHASH ISZERO ISZERO DUP1 PUSH2 0x2E53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x64D954B000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E76 SWAP2 SWAP1 PUSH2 0x4887 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x2EB1 JUMPI DUP1 MLOAD ISZERO PUSH2 0x2EAC JUMPI PUSH1 0x40 MLOAD PUSH4 0xE749907 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2F39 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x51 EQ DUP1 PUSH2 0x2ED4 JUMPI POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x71 EQ JUMPDEST ISZERO PUSH2 0x2EFB JUMPI DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x2EAC JUMPI PUSH1 0x40 MLOAD PUSH4 0xE749907 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF1F6BCED00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x598 JUMP JUMPDEST SWAP2 SWAP6 SWAP2 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2F6B PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD DUP5 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x20 DUP5 MOD EQ PUSH1 0x1 DUP2 EQ PUSH2 0x2F9D JUMPI PUSH1 0x1F DUP5 AND PUSH1 0x20 SWAP1 DUP2 SUB DUP1 DUP7 ADD DUP5 MSTORE DUP4 ADD ADD SWAP3 POP PUSH2 0x2FA7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP3 POP DUP4 DUP3 MSTORE JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 DUP5 DUP7 PUSH1 0x4 PUSH2 0x1C2 STATICCALL POP PUSH1 0x20 DUP2 MLOAD ADD DUP2 ADD PUSH1 0x40 MSTORE DUP1 MLOAD SWAP4 POP JUMPDEST PUSH1 0x20 DUP5 EQ PUSH2 0x2FF5 JUMPI PUSH1 0x20 DUP2 ADD MLOAD ISZERO PUSH1 0x1 DUP2 EQ PUSH2 0x2FE5 JUMPI POP PUSH2 0x2FF5 JUMP JUMPDEST POP PUSH1 0x1F NOT SWAP1 SWAP4 ADD SWAP3 PUSH1 0x20 ADD PUSH2 0x2FC9 JUMP JUMPDEST SWAP3 DUP4 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 ISZERO PUSH2 0x300F JUMPI DUP2 PUSH2 0x301A JUMP JUMPDEST DUP1 MLOAD PUSH2 0x301A SWAP1 PUSH2 0x3A43 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x303A SWAP1 PUSH1 0x1 PUSH2 0x4647 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3052 JUMPI PUSH2 0x3052 PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x307C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 PUSH1 0x20 ADD MLOAD ISZERO ISZERO PUSH1 0x1 ISZERO ISZERO EQ PUSH2 0x3096 JUMPI PUSH1 0x0 PUSH2 0x309C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xF8 SHL JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x30AF JUMPI PUSH2 0x30AF PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x1 PUSH1 0x0 JUMPDEST DUP5 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x313D JUMPI DUP5 MLOAD DUP1 MLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x30E9 JUMPI PUSH2 0x30E9 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3106 JUMPI PUSH2 0x3106 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH2 0x3127 DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x3135 SWAP1 PUSH2 0x465A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x30CB JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2CB7 DUP3 PUSH1 0x4 DUP4 PUSH2 0x3A7B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3163 DUP7 DUP7 PUSH2 0x3779 JUMP JUMPDEST SWAP7 POP SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0xFF DUP3 AND PUSH1 0x6 EQ DUP1 PUSH2 0x3189 JUMPI POP PUSH1 0xFF DUP3 AND PUSH1 0x2 EQ JUMPDEST PUSH2 0x31FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C6964206D616A20286578706563746564204D616A546167206F7220 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4D616A42797465537472696E6729000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x5 NOT PUSH1 0xFF DUP4 AND ADD PUSH2 0x3235 JUMPI PUSH2 0x3211 DUP7 DUP7 PUSH2 0x3779 JUMP JUMPDEST SWAP7 POP SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0xFF DUP3 AND PUSH1 0x2 EQ PUSH2 0x3235 JUMPI PUSH2 0x3235 PUSH2 0x4821 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3241 DUP3 DUP8 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x325E JUMPI PUSH2 0x325E PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3288 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP8 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x32FD JUMPI DUP10 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x32A9 JUMPI PUSH2 0x32A9 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x32C6 JUMPI PUSH2 0x32C6 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH2 0x32E7 DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x32F5 SWAP1 PUSH2 0x465A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x328F JUMP JUMPDEST POP DUP2 PUSH2 0x3309 DUP6 DUP11 PUSH2 0x4647 JUMP JUMPDEST SWAP7 POP SWAP7 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0x3362 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SWAP2 DUP2 ADD SWAP2 DUP3 MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 MLOAD PUSH2 0x3372 SWAP2 SWAP1 PUSH2 0x4634 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x338A JUMPI PUSH2 0x338A PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x33B4 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x33CC JUMPI PUSH2 0x33CC PUSH2 0x47E7 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0xF8 SHL SUB PUSH2 0x3401 JUMPI POP PUSH1 0x1 JUMPDEST PUSH1 0x1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x348B JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x341F JUMPI PUSH2 0x341F PUSH2 0x47E7 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND DUP4 PUSH2 0x3452 PUSH1 0x1 DUP5 PUSH2 0x4634 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3462 JUMPI PUSH2 0x3462 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 PUSH2 0x3483 DUP2 PUSH2 0x465A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3404 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ISZERO PUSH2 0x351F JUMPI DUP5 PUSH1 0x20 ADD MLOAD DUP1 ISZERO PUSH2 0x34C2 JUMPI POP DUP4 PUSH1 0x20 ADD MLOAD JUMPDEST ISZERO PUSH2 0x34D0 JUMPI POP PUSH1 0x0 NOT PUSH2 0x351F JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD ISZERO DUP1 ISZERO PUSH2 0x34E8 JUMPI POP PUSH1 0x20 DUP5 ADD MLOAD ISZERO ISZERO PUSH1 0x1 EQ JUMPDEST ISZERO PUSH2 0x34F7 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x35DA JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD ISZERO ISZERO PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x350F JUMPI POP PUSH1 0x20 DUP5 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x351F JUMPI PUSH1 0x0 NOT SWAP2 POP POP PUSH2 0x35DA JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD GT ISZERO PUSH2 0x3536 JUMPI SWAP1 POP PUSH2 0x35DA JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD GT ISZERO PUSH2 0x355A JUMPI PUSH2 0x3552 DUP2 PUSH1 0x0 NOT PUSH2 0x491D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x35DA JUMP JUMPDEST DUP5 MLOAD DUP1 MLOAD DUP6 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x35CE JUMPI DUP1 DUP7 ADD MLOAD SWAP4 POP DUP1 DUP6 ADD MLOAD SWAP3 POP DUP3 DUP5 GT ISZERO PUSH2 0x359A JUMPI DUP7 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x35DA JUMP JUMPDEST DUP4 DUP4 GT ISZERO PUSH2 0x35BC JUMPI PUSH2 0x35AE DUP8 PUSH1 0x0 NOT PUSH2 0x491D JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x35DA JUMP JUMPDEST PUSH2 0x35C7 PUSH1 0x20 DUP3 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP PUSH2 0x356F JUMP JUMPDEST POP PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3601 PUSH1 0x20 DUP4 PUSH2 0x494D JUMP JUMPDEST ISZERO PUSH2 0x3629 JUMPI PUSH2 0x3611 PUSH1 0x20 DUP4 PUSH2 0x494D JUMP JUMPDEST PUSH2 0x361C SWAP1 PUSH1 0x20 PUSH2 0x4634 JUMP JUMPDEST PUSH2 0x3626 SWAP1 DUP4 PUSH2 0x4647 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 DUP2 DUP5 ADD ADD DUP2 DUP2 LT ISZERO PUSH2 0x364D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x17 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x367F JUMPI DUP3 MLOAD PUSH2 0x2E53 SWAP1 PUSH1 0xE0 PUSH1 0x5 DUP6 SWAP1 SHL AND DUP4 OR PUSH2 0x3A86 JUMP JUMPDEST PUSH1 0xFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x36C1 JUMPI DUP3 MLOAD PUSH2 0x36A8 SWAP1 PUSH1 0x18 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x3A86 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x2E53 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x1 PUSH2 0x3AEF JUMP JUMPDEST PUSH2 0xFFFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x3704 JUMPI DUP3 MLOAD PUSH2 0x36EB SWAP1 PUSH1 0x19 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x3A86 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x2E53 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x2 PUSH2 0x3AEF JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x3749 JUMPI DUP3 MLOAD PUSH2 0x3730 SWAP1 PUSH1 0x1A PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x3A86 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x2E53 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 PUSH2 0x3AEF JUMP JUMPDEST DUP3 MLOAD PUSH2 0x3760 SWAP1 PUSH1 0x1B PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x3A86 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x2E53 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x8 PUSH2 0x3AEF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x3789 DUP7 DUP7 PUSH2 0x3B74 JUMP JUMPDEST SWAP1 POP PUSH2 0x3796 PUSH1 0x1 DUP7 PUSH2 0x4647 JUMP JUMPDEST SWAP5 POP PUSH1 0x7 PUSH1 0x5 DUP3 SWAP1 SHR AND PUSH1 0x1F DUP3 AND PUSH1 0x1C DUP2 LT PUSH2 0x381A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742068616E646C6520686561646572732077697468206578747261 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x203E203237000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x18 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x3838 JUMPI SWAP1 SWAP5 POP PUSH1 0xFF AND SWAP3 POP DUP5 SWAP2 POP PUSH2 0x3975 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x18 SUB PUSH2 0x38C5 JUMPI PUSH1 0x0 PUSH2 0x384F DUP10 DUP10 PUSH2 0x3B74 JUMP JUMPDEST SWAP1 POP PUSH2 0x385C PUSH1 0x1 DUP10 PUSH2 0x4647 JUMP JUMPDEST SWAP8 POP PUSH1 0x18 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x38B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C69642063626F720000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST SWAP2 SWAP6 POP POP PUSH1 0xFF AND SWAP3 POP DUP5 SWAP2 POP PUSH2 0x3975 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x19 SUB PUSH2 0x38FF JUMPI PUSH1 0x0 PUSH2 0x38DC DUP10 DUP10 PUSH2 0x3BEA JUMP JUMPDEST SWAP1 POP PUSH2 0x38E9 PUSH1 0x2 DUP10 PUSH2 0x4647 JUMP JUMPDEST SWAP8 POP SWAP2 SWAP6 POP POP PUSH2 0xFFFF AND SWAP3 POP DUP5 SWAP2 POP PUSH2 0x3975 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x1A SUB PUSH2 0x393B JUMPI PUSH1 0x0 PUSH2 0x3916 DUP10 DUP10 PUSH2 0x3C4A JUMP JUMPDEST SWAP1 POP PUSH2 0x3923 PUSH1 0x4 DUP10 PUSH2 0x4647 JUMP JUMPDEST SWAP8 POP SWAP2 SWAP6 POP POP PUSH4 0xFFFFFFFF AND SWAP3 POP DUP5 SWAP2 POP PUSH2 0x3975 SWAP1 POP JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0x1B EQ PUSH2 0x394E JUMPI PUSH2 0x394E PUSH2 0x4821 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x395A DUP10 DUP10 PUSH2 0x3CAA JUMP JUMPDEST SWAP1 POP PUSH2 0x3967 PUSH1 0x8 DUP10 PUSH2 0x4647 JUMP JUMPDEST SWAP8 POP SWAP2 SWAP6 POP SWAP1 SWAP4 POP DUP6 SWAP3 POP POP POP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x398C DUP7 DUP7 PUSH2 0x3779 JUMP JUMPDEST SWAP7 POP SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0xFF DUP3 AND PUSH1 0x1 EQ DUP1 PUSH2 0x39B0 JUMPI POP PUSH1 0xFF DUP3 AND ISZERO JUMPDEST PUSH2 0x2D8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C6964206D616A20286578706563746564204D616A5369676E656449 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E74206F72204D616A556E7369676E6564496E74290000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x598 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2AD9 DUP4 DUP4 DUP5 MLOAD PUSH2 0x3D0A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A4E DUP3 PUSH2 0x3DDB JUMP JUMPDEST ISZERO PUSH2 0x3A5B JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x3A69 DUP2 PUSH2 0x3E24 JUMP JUMPDEST SWAP3 MLOAD PUSH1 0x1F NOT ADD PUSH1 0x8 MUL SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBDD DUP4 DUP4 DUP4 PUSH2 0x3658 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 MLOAD MLOAD PUSH1 0x0 PUSH2 0x3AAB DUP3 PUSH1 0x1 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x20 ADD MLOAD DUP3 LT PUSH2 0x3ACC JUMPI PUSH2 0x3ACC DUP6 PUSH2 0x3AC7 DUP4 PUSH1 0x2 PUSH2 0x45F3 JUMP JUMPDEST PUSH2 0x4025 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x20 DUP4 DUP3 ADD ADD DUP6 DUP2 MSTORE8 POP DUP1 MLOAD DUP3 GT ISZERO PUSH2 0x3AE5 JUMPI DUP2 DUP2 MSTORE JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD MLOAD PUSH1 0x0 PUSH2 0x3B13 DUP3 DUP6 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x20 ADD MLOAD DUP2 GT ISZERO PUSH2 0x3B30 JUMPI PUSH2 0x3B30 DUP7 PUSH2 0x3AC7 DUP4 PUSH1 0x2 PUSH2 0x45F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x3B40 DUP7 PUSH2 0x100 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x3B4A SWAP2 SWAP1 PUSH2 0x4634 JUMP JUMPDEST SWAP1 POP DUP7 MLOAD DUP3 DUP2 ADD DUP8 DUP4 NOT DUP3 MLOAD AND OR DUP2 MSTORE POP DUP1 MLOAD DUP4 GT ISZERO PUSH2 0x3B68 JUMPI DUP3 DUP2 MSTORE JUMPDEST POP SWAP6 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B81 DUP3 PUSH1 0x1 PUSH2 0x4647 JUMP JUMPDEST DUP4 MLOAD LT ISZERO PUSH2 0x3BC8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x736C6963696E67206F7574206F662072616E6765 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3BDA JUMPI PUSH2 0x3BDA PUSH2 0x47E7 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BF7 DUP3 PUSH1 0x2 PUSH2 0x4647 JUMP JUMPDEST DUP4 MLOAD LT ISZERO PUSH2 0x3C3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x736C6963696E67206F7574206F662072616E6765 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C57 DUP3 PUSH1 0x4 PUSH2 0x4647 JUMP JUMPDEST DUP4 MLOAD LT ISZERO PUSH2 0x3C9E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x736C6963696E67206F7574206F662072616E6765 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CB7 DUP3 PUSH1 0x8 PUSH2 0x4647 JUMP JUMPDEST DUP4 MLOAD LT ISZERO PUSH2 0x3CFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x736C6963696E67206F7574206F662072616E6765 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x598 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0xC0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 MLOAD DUP3 GT ISZERO PUSH2 0x3D2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x0 PUSH2 0x3D3C DUP5 DUP4 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x20 ADD MLOAD DUP2 GT ISZERO PUSH2 0x3D59 JUMPI PUSH2 0x3D59 DUP7 PUSH2 0x3AC7 DUP4 PUSH1 0x2 PUSH2 0x45F3 JUMP JUMPDEST DUP6 MLOAD DUP1 MLOAD DUP4 DUP3 ADD PUSH1 0x20 ADD SWAP2 PUSH1 0x0 SWAP2 DUP1 DUP6 GT ISZERO PUSH2 0x3D73 JUMPI DUP5 DUP3 MSTORE JUMPDEST POP POP POP PUSH1 0x20 DUP7 ADD JUMPDEST PUSH1 0x20 DUP7 LT PUSH2 0x3DB3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH2 0x3D92 PUSH1 0x20 DUP4 PUSH2 0x4647 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D9F PUSH1 0x20 DUP3 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP PUSH2 0x3DAC PUSH1 0x20 DUP8 PUSH2 0x4634 JUMP JUMPDEST SWAP6 POP PUSH2 0x3D7B JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 DUP9 SWAP1 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE POP DUP5 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 ADD DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3E19 JUMPI DUP2 MLOAD SWAP3 POP DUP3 ISZERO PUSH2 0x3E02 JUMPI POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 PUSH2 0x3E12 SWAP1 DUP3 PUSH2 0x4647 JUMP JUMPDEST SWAP1 POP PUSH2 0x3DE4 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH1 0x1 DUP2 EQ PUSH2 0x401C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0xF8F9CBFAE6CC78FBEFE7CDC3A1793DFCF4F0E8BBD8CEC470B6A28A7A5A3E1EFD DUP2 MSTORE PUSH32 0xF5ECF1B3E9DEBC68E1D9CFABC5997135BFB7A7A3938B7B606B5B4B3F2F1F0FFE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xF6E4ED9FF2D6B458EADCDF97BD91692DE2D4DA8FD2D0AC50C6AE9A8272523616 DUP2 DUP4 ADD MSTORE PUSH32 0xC8C0B887B0A8A4489C948C7F847C6125746C645C544C444038302820181008FF PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xF7CAE577EEC2A03CF3BAD76FB589591DEBB2DD67E0AA9834BEA6925F6A4A2E0E PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xE39ED557DB96902CD38ED14FAD815115C786AF479B7E83247363534337271707 PUSH1 0xA0 DUP3 ADD MSTORE PUSH32 0xC976C13BB96E881CB166A933A55E490D9D56952B8D4E801485467D2362422606 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x753A6D1B65325D0C552A4D1345224105391A310B29122104190A110309020100 PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xF8 SHL PUSH31 0x818283848586878898A8B8C8D8E8F929395969799A9B9D9E9FAAEB6BEDEEFF PUSH17 0x100000000000000000000000000000000 PUSH1 0x1 PUSH1 0x40 SHL PUSH5 0x100000000 PUSH3 0x10000 PUSH1 0x10 PUSH1 0x4 PUSH1 0x2 PUSH1 0x0 NOT DUP15 ADD SWAP1 DUP2 DIV DUP2 OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR DUP10 DUP2 DIV OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR SWAP2 DUP3 DIV SWAP1 SWAP2 OR PUSH1 0x1 ADD SWAP2 DUP3 MUL DUP4 SWAP1 DIV PUSH1 0xFF SUB SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP7 PUSH1 0x1 PUSH1 0xFF SHL DUP2 GT SWAP1 SWAP5 MUL SWAP2 SWAP1 DIV ADD SWAP4 POP DUP2 AND PUSH2 0x4016 JUMPI PUSH1 0x1 DUP4 ADD SWAP3 POP JUMPDEST POP PUSH2 0xAB6 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0x4031 DUP4 DUP4 PUSH2 0x35E1 JUMP JUMPDEST POP PUSH2 0x2E53 DUP4 DUP3 PUSH2 0x3A22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x4064 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1E8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x409B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x40A4 DUP4 PUSH2 0x4071 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x40C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1C99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x40F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x4106 DUP2 PUSH2 0x40CB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AD9 DUP3 PUSH2 0x4071 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4164 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4148 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x41A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x41C9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x41B1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x41EA DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x41AE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP1 DUP4 MSTORE PUSH2 0x4212 DUP2 DUP5 ADD DUP14 PUSH2 0x41D2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4226 DUP2 DUP13 PUSH2 0x41D2 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP11 SWAP1 SWAP11 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 0x60 DUP8 ADD MSTORE SWAP4 ISZERO ISZERO PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xE0 DUP4 ADD MSTORE ISZERO ISZERO PUSH2 0x100 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x42B3 JUMPI PUSH2 0x42B3 PUSH2 0x4274 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x42D5 JUMPI PUSH2 0x42D5 PUSH2 0x4274 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x42F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x4307 PUSH2 0x4302 DUP3 PUSH2 0x42BB JUMP JUMPDEST PUSH2 0x428A JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x431C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x434B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28AF DUP5 DUP3 DUP6 ADD PUSH2 0x42E3 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2AD9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x41D2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4394 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x43A4 PUSH1 0x20 DUP5 ADD PUSH2 0x4071 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x43C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x43DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43EA DUP11 DUP4 DUP12 ADD PUSH2 0x42E3 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x440C DUP11 DUP4 DUP12 ADD PUSH2 0x42E3 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4429 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4435 DUP11 DUP4 DUP12 ADD PUSH2 0x42E3 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x444B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4458 DUP10 DUP3 DUP11 ADD PUSH2 0x42E3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x180 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4481 PUSH2 0x180 DUP4 ADD DUP16 PUSH2 0x41D2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4493 DUP2 DUP16 PUSH2 0x41D2 JUMP JUMPDEST SWAP1 POP DUP13 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH1 0x60 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x44BC DUP2 DUP13 PUSH2 0x41D2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x44D0 DUP2 DUP12 PUSH2 0x41D2 JUMP JUMPDEST SWAP2 POP POP DUP8 PUSH1 0xC0 DUP4 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x44F8 PUSH2 0x100 DUP4 ADD DUP8 ISZERO ISZERO SWAP1 MSTORE JUMP JUMPDEST DUP5 PUSH2 0x120 DUP4 ADD MSTORE DUP4 PUSH2 0x140 DUP4 ADD MSTORE DUP3 PUSH2 0x160 DUP4 ADD MSTORE SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x4532 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xAB6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x0 DUP5 SLOAD PUSH2 0x4566 DUP2 PUSH2 0x451E JUMP JUMPDEST DUP1 DUP5 DUP8 ADD MSTORE PUSH1 0x40 PUSH1 0x1 DUP1 DUP5 AND PUSH1 0x0 DUP2 EQ PUSH2 0x4587 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x45A1 JUMPI PUSH2 0x45CF JUMP JUMPDEST PUSH1 0xFF NOT DUP6 AND DUP10 DUP5 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x5 SHL DUP10 ADD DUP4 ADD SWAP6 POP PUSH2 0x45CF JUMP JUMPDEST DUP10 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x45C7 JUMPI DUP2 SLOAD DUP12 DUP3 ADD DUP7 ADD MSTORE SWAP1 DUP4 ADD SWAP1 DUP9 ADD PUSH2 0x45AC JUMP JUMPDEST DUP11 ADD DUP5 ADD SWAP7 POP POP JUMPDEST POP SWAP4 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x2ADC JUMPI PUSH2 0x2ADC PUSH2 0x45DD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x462F JUMPI PUSH2 0x462F PUSH2 0x460A JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2ADC JUMPI PUSH2 0x2ADC PUSH2 0x45DD JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2ADC JUMPI PUSH2 0x2ADC PUSH2 0x45DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x466C JUMPI PUSH2 0x466C PUSH2 0x45DD JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xBDD JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x469A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x46B9 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x46A6 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x46DB JUMPI PUSH2 0x46DB PUSH2 0x4274 JUMP JUMPDEST PUSH2 0x46EF DUP2 PUSH2 0x46E9 DUP5 SLOAD PUSH2 0x451E JUMP JUMPDEST DUP5 PUSH2 0x4673 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x4724 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x470C JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x46B9 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4753 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x4734 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x4771 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x4793 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x41AE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x47B0 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x41D2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x47C2 DUP2 DUP8 PUSH2 0x41D2 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x40 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x47DC DUP2 DUP6 PUSH2 0x41D2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP8 PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP8 AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0xC0 PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x4871 PUSH1 0xC0 DUP5 ADD DUP7 PUSH2 0x41D2 JUMP JUMPDEST SWAP2 POP DUP1 DUP5 AND PUSH1 0xA0 DUP5 ADD MSTORE POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x489C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x48AE DUP2 PUSH2 0x40CB JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x48CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x48DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x48EA PUSH2 0x4302 DUP3 PUSH2 0x42BB JUMP JUMPDEST DUP2 DUP2 MSTORE DUP8 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x48FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4910 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x41AE JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP1 DUP3 MUL PUSH1 0x0 DUP3 SLT PUSH1 0x1 PUSH1 0xFF SHL DUP5 EQ AND ISZERO PUSH2 0x4939 JUMPI PUSH2 0x4939 PUSH2 0x45DD JUMP JUMPDEST DUP2 DUP2 SDIV DUP4 EQ DUP3 ISZERO OR PUSH2 0x2ADC JUMPI PUSH2 0x2ADC PUSH2 0x45DD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x495C JUMPI PUSH2 0x495C PUSH2 0x460A JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x499C JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x4982 JUMPI PUSH2 0x4982 PUSH2 0x45DD JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x498F JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x4966 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x49B3 JUMPI POP PUSH1 0x1 PUSH2 0x2ADC JUMP JUMPDEST DUP2 PUSH2 0x49C0 JUMPI POP PUSH1 0x0 PUSH2 0x2ADC JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x49D6 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x49E0 JUMPI PUSH2 0x49FC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x2ADC JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x49F1 JUMPI PUSH2 0x49F1 PUSH2 0x45DD JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x2ADC JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x4A1F JUMPI POP DUP2 DUP2 EXP PUSH2 0x2ADC JUMP JUMPDEST PUSH2 0x4A29 DUP4 DUP4 PUSH2 0x4961 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x4A3D JUMPI PUSH2 0x4A3D PUSH2 0x45DD JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD9 DUP4 DUP4 PUSH2 0x49A4 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E CHAINID 0xA5 PUSH18 0x81C649F8DF385366B853ADCC214C9B69BCC5 ADDRESS PUSH13 0xBF09C005C0B2BF1264736F6C63 NUMBER STOP ADDMOD EQ STOP CALLER ",
          "sourceMap": "483:10921:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1537:55;;;;;;;;;;-1:-1:-1;1537:55:1;;;;;:::i;:::-;;:::i;:::-;;;620:25:17;;;608:2;593:18;1537:55:1;;;;;;;;1790:29;;;;;;;;;;-1:-1:-1;1790:29:1;;;;-1:-1:-1;;;;;1790:29:1;;;;;;-1:-1:-1;;;;;820:55:17;;;802:74;;790:2;775:18;1790:29:1;656:226:17;10147:200:1;;;;;;;;;;-1:-1:-1;10147:200:1;;;;;:::i;:::-;;:::i;:::-;;6841:318;;;;;;;;;;-1:-1:-1;6841:318:1;;;;;:::i;:::-;;:::i;1825:42::-;;;;;;;;;;;;;;;;1750:34;;;;;;;;;;;;;;;;7165:739;;;;;;;;;;-1:-1:-1;7165:739:1;;;;;:::i;:::-;;:::i;:::-;;;1785:14:17;;1778:22;1760:41;;1748:2;1733:18;7165:739:1;1620:187:17;8857:134:1;;;;;;;;;;-1:-1:-1;8857:134:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;10552:158::-;;;;;;;;;;-1:-1:-1;10552:158:1;;;;;:::i;:::-;;:::i;9751:390::-;;;;;;;;;;-1:-1:-1;9751:390:1;;;;;:::i;:::-;;:::i;7910:941::-;;;;;;;;;;-1:-1:-1;7910:941:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;1663:53::-;;;;;;;;;;-1:-1:-1;1663:53:1;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;5596:795;;;;;;;;;;-1:-1:-1;5596:795:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1598:59::-;;;;;;;;;;-1:-1:-1;1598:59:1;;;;;:::i;:::-;;:::i;4267:1323::-;;;;;;:::i;:::-;;:::i;6397:438::-;;;;;;;;;;-1:-1:-1;6397:438:1;;;;;:::i;:::-;;:::i;10353:131::-;;;;;;;;;;;;;:::i;8997:142::-;;;;;;;;;;-1:-1:-1;8997:142:1;;;;;:::i;:::-;;:::i;1462:69::-;;;;;;;;;;-1:-1:-1;1462:69:1;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6746:14:17;;6739:22;6721:41;;6793:2;6778:18;;6771:34;;;;6821:18;;;6814:34;6709:2;6694:18;1462:69:1;6525:329:17;10760:607:1;;;;;;;;;;-1:-1:-1;10760:607:1;;;;;:::i;:::-;;:::i;2964:1297::-;;;;;;;;;;-1:-1:-1;2964:1297:1;;;;;:::i;:::-;;:::i;1401:55::-;;;;;;;;;;-1:-1:-1;1401:55:1;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;9145:600::-;;;;;;;;;;;;;:::i;1537:55::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;10147:200::-;2902:14;;-1:-1:-1;;;;;2902:14:1;2888:10;:28;2880:60;;;;-1:-1:-1;;;2880:60:1;;9512:2:17;2880:60:1;;;9494:21:17;9551:2;9531:18;;;9524:30;-1:-1:-1;;;9570:18:17;;;9563:49;9629:18;;2880:60:1;;;;;;;;;10260:2:::1;10241:15;:21;;10233:56;;;::::0;-1:-1:-1;;;10233:56:1;;9860:2:17;10233:56:1::1;::::0;::::1;9842:21:17::0;9899:2;9879:18;;;9872:30;9938:24;9918:18;;;9911:52;9980:18;;10233:56:1::1;9658:346:17::0;10233:56:1::1;10299:23;:41:::0;10147:200::o;6841:318::-;2747:14;:27;;;;;;;;;;:33;;;6931:11;;-1:-1:-1;;;;;2747:33:1;2784:10;2747:47;2739:78;;;;-1:-1:-1;;;2739:78:1;;10211:2:17;2739:78:1;;;10193:21:17;10250:2;10230:18;;;10223:30;10289:20;10269:18;;;10262:48;10327:18;;2739:78:1;10009:342:17;2739:78:1;6973:1:::1;6962:8;:12;;;6954:40;;;::::0;-1:-1:-1;;;6954:40:1;;10558:2:17;6954:40:1::1;::::0;::::1;10540:21:17::0;10597:2;10577:18;;;10570:30;10636:17;10616:18;;;10609:45;10671:18;;6954:40:1::1;10356:339:17::0;6954:40:1::1;7005:29;7037:27:::0;;;::::1;::::0;;;;;;;;7074:15:::1;::::0;::::1;:26:::0;;-1:-1:-1;;7074:26:1::1;;::::0;::::1;::::0;;::::1;::::0;;;7116:36;;10844:50:17;;;7037:27:1;;;7116:36:::1;::::0;10817:18:17;7116:36:1::1;;;;;;;6944:215;6841:318:::0;;;:::o;7165:739::-;7265:4;7243:11;2597:1;2583:11;:15;:48;;;;;2616:15;;2602:11;:29;2583:48;2575:83;;;;-1:-1:-1;;;2575:83:1;;11107:2:17;2575:83:1;;;11089:21:17;11146:2;11126:18;;;11119:30;-1:-1:-1;;;11165:18:17;;;11158:52;11227:18;;2575:83:1;10905:346:17;2575:83:1;7281:28:::1;7312:27:::0;;;::::1;::::0;;;;;;;7281:58;;::::1;::::0;::::1;::::0;;;;;;;7312:27;;7281:58:::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;7281:58:1;;;-1:-1:-1;;7281:58:1::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;-1:-1:-1;;;;;7281:58:1::1;::::0;;;;::::1;::::0;::::1;::::0;;;;;;;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;7281:58:1;;;-1:-1:-1;;7281:58:1::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;;;;-1:-1:-1;;;7281:58:1;;::::1;;;;;::::0;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;;;;7354:15:::1;::::0;::::1;::::0;;;-1:-1:-1;7354:20:1::1;-1:-1:-1::0;7354:20:1;7350:86:::1;;7397:5;7390:12;;;;;7350:86;7509:16;7527:46:::0;7577:57:::1;7618:7;:15;;;7577:40;:57::i;:::-;7508:126;;;;7649:9;7662:1;7649:14;7645:57;;7686:5;7679:12;;;;;;;7645:57;7824:1;7807:3;:13;;;7777:48;;;7776:121;;;;-1:-1:-1::0;7876:14:1::1;::::0;::::1;::::0;7846:50:::1;;::::0;7776:121:::1;7769:128;;;;;2668:1;7165:739:::0;;;;:::o;8857:134::-;-1:-1:-1;;;;;8959:25:1;;;;;;:18;:25;;;;;;;;;8952:32;;;;;;;;;;;;;;;;;8924:16;;8952:32;;;8959:25;8952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8857:134;;;:::o;10552:158::-;2902:14;;-1:-1:-1;;;;;2902:14:1;2888:10;:28;2880:60;;;;-1:-1:-1;;;2880:60:1;;9512:2:17;2880:60:1;;;9494:21:17;9551:2;9531:18;;;9524:30;-1:-1:-1;;;9570:18:17;;;9563:49;9629:18;;2880:60:1;9310:343:17;2880:60:1;10631:72:::1;10652:42;10688:4;-1:-1:-1::0;;;;;;;;;;;;;;1500:98:12;;;;;;;-1:-1:-1;;;1523:74:12;;;23241:28:17;-1:-1:-1;;;23285:11:17;;;23278:36;23347:15;;;-1:-1:-1;;23343:53:17;23330:11;;;23323:74;1523::12;;;;;;;;;23413:12:17;;;1523:74:12;;;1500:98;;;1391:214;10652:42:1::1;10696:6;10631:20;:72::i;:::-;;;10552:158:::0;:::o;9751:390::-;9891:11;2597:1;2583:11;:15;:48;;;;;2616:15;;2602:11;:29;2583:48;2575:83;;;;-1:-1:-1;;;2575:83:1;;11107:2:17;2575:83:1;;;11089:21:17;11146:2;11126:18;;;11119:30;-1:-1:-1;;;11165:18:17;;;11158:52;11227:18;;2575:83:1;10905:346:17;2575:83:1;2747:14:::1;:27:::0;;;::::1;::::0;;;;;;:33:::1;;::::0;9921:11;;-1:-1:-1;;;;;2747:33:1::1;2784:10;2747:47;2739:78;;;::::0;-1:-1:-1;;;2739:78:1;;10211:2:17;2739:78:1::1;::::0;::::1;10193:21:17::0;10250:2;10230:18;;;10223:30;10289:20;10269:18;;;10262:48;10327:18;;2739:78:1::1;10009:342:17::0;2739:78:1::1;9965:1:::2;9952:10;:14;9944:44;;;::::0;-1:-1:-1;;;9944:44:1;;11900:2:17;9944:44:1::2;::::0;::::2;11882:21:17::0;11939:2;11919:18;;;11912:30;11978:19;11958:18;;;11951:47;12015:18;;9944:44:1::2;11698:341:17::0;9944:44:1::2;-1:-1:-1::0;;9999:29:1::2;10031:27:::0;;;::::2;::::0;;;;;;;10068:13:::2;::::0;::::2;:26:::0;;;;10104:17:::2;;:30:::0;;;::::2;;-1:-1:-1::0;;;10104:30:1::2;-1:-1:-1::0;;10104:30:1;;::::2;::::0;;;::::2;::::0;;9751:390::o;7910:941::-;8014:19;8043:25;8078:13;8101;8124:14;8148:18;8176:14;8200:18;8228:20;7983:11;2597:1;2583:11;:15;:48;;;;;2616:15;;2602:11;:29;2583:48;2575:83;;;;-1:-1:-1;;;2575:83:1;;11107:2:17;2575:83:1;;;11089:21:17;11146:2;11126:18;;;11119:30;-1:-1:-1;;;11165:18:17;;;11158:52;11227:18;;2575:83:1;10905:346:17;2575:83:1;8265:28:::1;8296:27:::0;;;::::1;::::0;;;;;;;8265:58;;::::1;::::0;::::1;::::0;;;;;;;8296:27;;8265:58:::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;8265:58:1;;;-1:-1:-1;;8265:58:1::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;-1:-1:-1;;;;;8265:58:1::1;::::0;;;;::::1;::::0;::::1;::::0;;;;;;;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;8265:58:1;;;-1:-1:-1;;8265:58:1::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;8265:58:1;::::1;;;;;::::0;;;;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;;;;8366:13;::::1;::::0;;;-1:-1:-1;;;;;;;;8352:27:1::1;:10;:27;::::0;8351:203:::1;;-1:-1:-1::0;8410:24:1::1;::::0;;;:11:::1;:24;::::0;;;;;;;8435:10:::1;8410:36:::0;;;;;;;:47;::::1;;:143:::0;::::1;;;-1:-1:-1::0;8506:24:1::1;::::0;;;:11:::1;:24;::::0;;;;;;;8531:10:::1;8506:36:::0;;;;;;;:47:::1;;::::0;8487:15:::1;:66;;8410:143;8333:221;;8586:7;:13;;;8613:7;:19;;;8646:7;:13;;;8673:7;:13;;;8700:7;:17;;;8731:7;:18;;;8763:7;:15;;;8792:7;:18;;;8824:10;8565:279;;;;;;;;;;;;;;;;;;;;7910:941:::0;;;;;;;;;;;;:::o;5596:795::-;5678:13;5656:11;2597:1;2583:11;:15;:48;;;;;2616:15;;2602:11;:29;2583:48;2575:83;;;;-1:-1:-1;;;2575:83:1;;11107:2:17;2575:83:1;;;11089:21:17;11146:2;11126:18;;;11119:30;-1:-1:-1;;;11165:18:17;;;11158:52;11227:18;;2575:83:1;10905:346:17;2575:83:1;5703:29:::1;5735:27:::0;;;::::1;::::0;;;;;;5780:17:::1;::::0;::::1;::::0;-1:-1:-1;;;5780:17:1;::::1;;;5772:48;;;::::0;-1:-1:-1;;;5772:48:1;;12246:2:17;5772:48:1::1;::::0;::::1;12228:21:17::0;12285:2;12265:18;;;12258:30;12324:20;12304:18;;;12297:48;12362:18;;5772:48:1::1;12044:342:17::0;5772:48:1::1;5884:13;::::0;::::1;::::0;-1:-1:-1;;;;;5884:13:1::1;5870:10;:27:::0;5866:155:::1;;5944:10;-1:-1:-1::0;;;;;5918:55:1::1;5931:11;5918:55;5956:7;:16;;5918:55;;;;;;:::i;:::-;;;;;;;;5994:7;:16;;5987:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5866:155;6073:24;6100::::0;;;:11:::1;:24;::::0;;;;;;;6125:10:::1;6100:36:::0;;;;;;;;6073:63;;::::1;::::0;::::1;::::0;;;;::::1;;;;::::0;;;;;::::1;::::0;;;::::1;::::0;;;;::::1;;::::0;;;;;;;;6146:61:::1;;;::::0;-1:-1:-1;;;6146:61:1;;13687:2:17;6146:61:1::1;::::0;::::1;13669:21:17::0;13726:2;13706:18;;;13699:30;13765:33;13745:18;;;13738:61;13816:18;;6146:61:1::1;13485:355:17::0;6146:61:1::1;6244:6;:17;;;6225:15;:36;;6217:63;;;::::0;-1:-1:-1;;;6217:63:1;;14047:2:17;6217:63:1::1;::::0;::::1;14029:21:17::0;14086:2;14066:18;;;14059:30;14125:16;14105:18;;;14098:44;14159:18;;6217:63:1::1;13845:338:17::0;6217:63:1::1;6322:10;-1:-1:-1::0;;;;;6296:55:1::1;6309:11;6296:55;6334:7;:16;;6296:55;;;;;;:::i;:::-;;;;;;;;6368:7;:16;;6361:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5596:795:::0;;;;:::o;1598:59::-;;;;;;;;;;;;;;;;;;;;4267:1323;4343:11;2597:1;2583:11;:15;:48;;;;;2616:15;;2602:11;:29;2583:48;2575:83;;;;-1:-1:-1;;;2575:83:1;;11107:2:17;2575:83:1;;;11089:21:17;11146:2;11126:18;;;11119:30;-1:-1:-1;;;11165:18:17;;;11158:52;11227:18;;2575:83:1;10905:346:17;2575:83:1;4366:29:::1;4398:27:::0;;;::::1;::::0;;;;;;4443:17:::1;::::0;::::1;::::0;-1:-1:-1;;;4443:17:1;::::1;;;4435:48;;;::::0;-1:-1:-1;;;4435:48:1;;12246:2:17;4435:48:1::1;::::0;::::1;12228:21:17::0;12285:2;12265:18;;;12258:30;12324:20;12304:18;;;12297:48;12362:18;;4435:48:1::1;12044:342:17::0;4435:48:1::1;4514:7;:13;;;4501:9;:26;;4493:59;;;::::0;-1:-1:-1;;;4493:59:1;;14390:2:17;4493:59:1::1;::::0;::::1;14372:21:17::0;14429:2;14409:18;;;14402:30;14468:22;14448:18;;;14441:50;14508:18;;4493:59:1::1;14188:344:17::0;4493:59:1::1;4584:13;::::0;::::1;::::0;-1:-1:-1;;;;;4584:13:1::1;4570:10;:27:::0;4562:73:::1;;;::::0;-1:-1:-1;;;4562:73:1;;14739:2:17;4562:73:1::1;::::0;::::1;14721:21:17::0;14778:2;14758:18;;;14751:30;14817:34;14797:18;;;14790:62;14888:3;14868:18;;;14861:31;14909:19;;4562:73:1::1;14537:397:17::0;4562:73:1::1;4654:24;::::0;;;:11:::1;:24;::::0;;;;;;;4679:10:::1;4654:36:::0;;;;;;;:47;::::1;;4653:48;4645:79;;;::::0;-1:-1:-1;;;4645:79:1;;15141:2:17;4645:79:1::1;::::0;::::1;15123:21:17::0;15180:2;15160:18;;;15153:30;15219:20;15199:18;;;15192:48;15257:18;;4645:79:1::1;14939:342:17::0;4645:79:1::1;4735:20;4798:3;4771:23;;4759:9;:35;;;;:::i;:::-;4758:43;;;;:::i;:::-;4735:66:::0;-1:-1:-1;4811:21:1::1;4835:24;4735:66:::0;4835:9:::1;:24;:::i;:::-;4811:48;;4950:147;;;;;;;;4987:4;4950:147;;;;;;5019:15;4950:147;;;;5060:15;5078:8;5060:26;;;;:::i;:::-;4950:147:::0;;4911:24:::1;::::0;;;:11:::1;:24;::::0;;;;;;;4936:10:::1;4911:36:::0;;;;;;;:186;;;;-1:-1:-1;;4911:186:1::1;::::0;::::1;;;::::0;;;;::::1;::::0;;;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;::::1;::::0;;;;5140:22:::1;::::0;::::1;:35:::0;;5166:9:::1;::::0;4911:24;5140:35:::1;::::0;5166:9;;5140:35:::1;:::i;:::-;::::0;;;-1:-1:-1;;5185:20:1::1;::::0;::::1;:22:::0;;;:20:::1;:22;::::0;::::1;:::i;:::-;::::0;;;-1:-1:-1;;5284:10:1::1;5261:34;::::0;;;:22:::1;:34;::::0;;;;;;;:52;;::::1;::::0;::::1;::::0;;;;;;;;;;::::1;::::0;;;5361:13;;::::1;::::0;5353:46;;-1:-1:-1;;;;;5361:13:1;;::::1;::::0;5353:46:::1;::::0;::::1;;::::0;;;;5261:34;5353:46;;5361:13;5353:46;::::1;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;5413:16:1;;5409:93:::1;;5453:14;::::0;5445:46:::1;::::0;-1:-1:-1;;;;;5453:14:1;;::::1;::::0;5445:46;::::1;;;::::0;5478:12;;5453:14:::1;5445:46:::0;5453:14;5445:46;5478:12;5453:14;5445:46;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;5409:93;5558:13;::::0;::::1;::::0;5517:66:::1;::::0;5573:9:::1;620:25:17::0;;-1:-1:-1;;;;;5558:13:1;;::::1;::::0;5546:10:::1;::::0;5533:11;;5517:66:::1;::::0;608:2:17;593:18;5517:66:1::1;;;;;;;4356:1234;;;4267:1323:::0;;:::o;6397:438::-;6502:4;6480:11;2597:1;2583:11;:15;:48;;;;;2616:15;;2602:11;:29;2583:48;2575:83;;;;-1:-1:-1;;;2575:83:1;;11107:2:17;2575:83:1;;;11089:21:17;11146:2;11126:18;;;11119:30;-1:-1:-1;;;11165:18:17;;;11158:52;11227:18;;2575:83:1;10905:346:17;2575:83:1;6518:28:::1;6549:27:::0;;;::::1;::::0;;;;;;;6518:58;;::::1;::::0;::::1;::::0;;;;;;;6549:27;;6518:58:::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;6518:58:1;;;-1:-1:-1;;6518:58:1::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;-1:-1:-1;;;;;6518:58:1::1;::::0;;;;::::1;::::0;::::1;::::0;;;;;;;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;6518:58:1;;;-1:-1:-1;;6518:58:1::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;6518:58:1;::::1;;;;;::::0;;;;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;;;;6635:13;::::1;::::0;;;-1:-1:-1;;;;;;6626:22:1;;::::1;::::0;;::::1;::::0;6622:64:::1;;6671:4;6664:11;;;;;6622:64;6696:24;6723::::0;;;:11:::1;:24;::::0;;;;;;;-1:-1:-1;;;;;6723:31:1;::::1;::::0;;;;;;;;6696:58;;::::1;::::0;::::1;::::0;;;;::::1;;;::::0;::::1;::::0;;;;;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;;::::1;::::0;;;;;;;;6771:57:::1;;;6811:6;:17;;;6792:15;:36;;6771:57;6764:64;;;;2668:1;6397:438:::0;;;;;:::o;10353:131::-;2902:14;;-1:-1:-1;;;;;2902:14:1;2888:10;:28;2880:60;;;;-1:-1:-1;;;2880:60:1;;9512:2:17;2880:60:1;;;9494:21:17;9551:2;9531:18;;;9524:30;-1:-1:-1;;;9570:18:17;;;9563:49;9629:18;;2880:60:1;9310:343:17;2880:60:1;10430:14:::1;::::0;10422:55:::1;::::0;-1:-1:-1;;;;;10430:14:1;;::::1;::::0;10455:21:::1;10422:55:::0;::::1;;;::::0;10430:14:::1;10422:55:::0;10430:14;10422:55;10455:21;10430:14;10422:55;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;10353:131::o:0;8997:142::-;-1:-1:-1;;;;;9103:29:1;;;;;;:22;:29;;;;;;;;;9096:36;;;;;;;;;;;;;;;;;9068:16;;9096:36;;;9103:29;9096:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8997:142;;;:::o;10760:607::-;2902:14;;10843:7;;-1:-1:-1;;;;;2902:14:1;2888:10;:28;2880:60;;;;-1:-1:-1;;;2880:60:1;;9512:2:17;2880:60:1;;;9494:21:17;9551:2;9531:18;;;9524:30;-1:-1:-1;;;9570:18:17;;;9563:49;9629:18;;2880:60:1;9310:343:17;2880:60:1;10912:140:::1;::::0;;-1:-1:-1;;;;;;10912:140:1;;::::1;-1:-1:-1::0;;;1500:98:12;;-1:-1:-1;1500:98:12;;;;-1:-1:-1;;;1523:74:12;;;23241:28:17;-1:-1:-1;;;23285:11:17;;;23278:36;10995:4:1::1;23347:15:17::0;;;-1:-1:-1;;23343:53:17;23330:11;;;23323:74;1523::12;;;;;;;;;23413:12:17;;;1523:74:12;;;1500:98;;;-1:-1:-1;;10912:140:1;;::::1;;;;11015:27;11035:6;11015:19;:27::i;:::-;10912:140:::0;;10862:190;-1:-1:-1;11063:16:1::1;::::0;11114:33:::1;10862:190:::0;11114:25:::1;:33::i;:::-;11062:85;;;;11165:9;11178:1;11165:14;11157:42;;;::::0;-1:-1:-1;;;11157:42:1;;16567:2:17;11157:42:1::1;::::0;::::1;16549:21:17::0;16606:2;16586:18;;;16579:30;16645:17;16625:18;;;16618:45;16680:18;;11157:42:1::1;16365:339:17::0;11157:42:1::1;11211:24;11237:14:::0;11255:22:::1;11273:3;11255:17;:22::i;:::-;11210:67;;;;11295:9;11287:39;;;::::0;-1:-1:-1;;;11287:39:1;;16911:2:17;11287:39:1::1;::::0;::::1;16893:21:17::0;16950:2;16930:18;;;16923:30;16989:19;16969:18;;;16962:47;17026:18;;11287:39:1::1;16709:341:17::0;11287:39:1::1;-1:-1:-1::0;11344:16:1;-1:-1:-1;;;;2950:1:1::1;10760:607:::0;;;:::o;2964:1297::-;3195:7;3242:1;3222:10;:17;:21;3214:52;;;;-1:-1:-1;;;3214:52:1;;17257:2:17;3214:52:1;;;17239:21:17;17296:2;17276:18;;;17269:30;17335:20;17315:18;;;17308:48;17373:18;;3214:52:1;17055:342:17;3214:52:1;3310:1;3290:9;3284:23;:27;3276:57;;;;-1:-1:-1;;;3276:57:1;;17604:2:17;3276:57:1;;;17586:21:17;17643:2;17623:18;;;17616:30;17682:19;17662:18;;;17655:47;17719:18;;3276:57:1;17402:341:17;3276:57:1;3360:1;3351:6;:10;3343:40;;;;-1:-1:-1;;;3343:40:1;;11900:2:17;3343:40:1;;;11882:21:17;11939:2;11919:18;;;11912:30;11978:19;11958:18;;;11951:47;12015:18;;3343:40:1;11698:341:17;3343:40:1;3424:1;3407:6;3401:20;:24;3393:51;;;;-1:-1:-1;;;3393:51:1;;17950:2:17;3393:51:1;;;17932:21:17;17989:2;17969:18;;;17962:30;18028:16;18008:18;;;18001:44;18062:18;;3393:51:1;17748:338:17;3393:51:1;3476:1;3462:11;:15;3454:50;;;;-1:-1:-1;;;3454:50:1;;18293:2:17;3454:50:1;;;18275:21:17;18332:2;18312:18;;;18305:30;18371:24;18351:18;;;18344:52;18413:18;;3454:50:1;18091:346:17;3454:50:1;3536:15;:17;;3515:18;;;3536:17;;;:::i;:::-;;;;-1:-1:-1;3593:429:1;;;;;;;;;;;;;;;;;;;;;;;;3723:10;3593:429;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3593:429:1;;;;;;3906:4;3593:429;;;;3936:15;3593:429;;;;;;;;;;;;;;;;3564:26;;;;;;;;;;;:458;;3515:38;;-1:-1:-1;3593:429:1;;3564:26;;:458;;:26;:458;:::i;:::-;-1:-1:-1;3564:458:1;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3564:458:1;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3564:458:1;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3564:458:1;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3564:458:1;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3564:458:1;-1:-1:-1;;3564:458:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4052:10;3564:458;4033:30;;;:18;:30;;;;;;;;:47;;3564:458;4033:47;;;;;;;;;;;;;;;4090:32;4069:10;;4090:20;;:32;;4111:10;;4090:32;:::i;:::-;;;;;;;;;;;;;:45;;;;4177:10;-1:-1:-1;;;;;4151:76:1;4165:10;4151:76;4189:10;4201:9;4212:6;4220;4151:76;;;;;;;;;:::i;:::-;;;;;;;;4244:10;2964:1297;-1:-1:-1;;;;;;;2964:1297:1:o;1401:55::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1401:55:1;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1401:55:1;;;;-1:-1:-1;1401:55:1;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1401:55:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1401:55:1;;;;;;;;;:::o;9145:600::-;9199:16;9227:31;9293:1;9275:15;;:19;;;;:::i;:::-;9261:34;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9261:34:1;-1:-1:-1;9227:68:1;-1:-1:-1;9305:13:1;9350:1;9333:186;9357:15;;9353:1;:19;9333:186;;;9397:14;:17;;;;;;;;;;:27;;;-1:-1:-1;;;9397:27:1;;;;9393:116;;;9468:1;9444:14;9459:5;9444:21;;;;;;;;:::i;:::-;;;;;;;;;;:25;9487:7;;;;:::i;:::-;;;;9393:116;9374:3;;;;:::i;:::-;;;;9333:186;;;;9569:23;9609:5;9595:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9595:20:1;;9569:46;;9630:9;9625:90;9649:5;9645:1;:9;9625:90;;;9687:14;9702:1;9687:17;;;;;;;;:::i;:::-;;;;;;;9675:6;9682:1;9675:9;;;;;;;;:::i;:::-;;;;;;;;;;:29;9656:3;;;;:::i;:::-;;;;9625:90;;;-1:-1:-1;9732:6:1;9145:600;-1:-1:-1;;;9145:600:1:o;11915:621:2:-;-1:-1:-1;;;;;;;;;11980:6:2;-1:-1:-1;;;;;;;;;11980:6:2;12042:24;12069;:6;:22;;;:24::i;:::-;12042:51;;12105:16;12123:19;12146:171;1139:1:8;1873:10;1288:4:14;12296:11:2;12146:22;:171::i;:::-;12104:213;;;;12332:9;12345:1;12332:14;12328:100;;12370:1;12373:43;:6;:41;:43::i;:::-;12362:55;;;;;;;11915:621;;;:::o;12328:100::-;-1:-1:-1;;;;;;;;;;;;;;;;;12438:52:2;12508:9;;12519;;-1:-1:-1;11915:621:2;;-1:-1:-1;;;;11915:621:2:o;1772:574::-;1873:6;1881:12;1905:24;1932:35;:16;:33;:35::i;:::-;1905:62;;1979:16;1997:17;2018:194;1139:1:8;1183:9;1288:4:14;2153:11:2;2178:5;2197;2018:14;:194::i;:::-;1978:234;;;;2226:4;:11;2241:1;2226:16;2222:83;;2265:29;;-1:-1:-1;;;2265:29:2;;;;;;;;;;;2222:83;2323:9;;;;-1:-1:-1;1772:574:2;-1:-1:-1;;;;1772:574:2:o;1450:217:10:-;-1:-1:-1;;;;;;;;;;;;;;;;;1546:23:10;1572:29;1588:5;1595;1572:15;:29::i;:::-;1618:42;;;;;;;;;1637:10;;1618:42;;;1649:10;;;;1618:42;;;;;;;;;;1450:217;-1:-1:-1;;;1450:217:10:o;2738:641:2:-;-1:-1:-1;;;;;;;;;;;;2830:6:2;-1:-1:-1;;;;;;2830:6:2;2875:24;2902:39;:6;:37;:39::i;:::-;2875:66;;2953:16;2971:19;2994:195;1139:1:8;1239:10;1288:4:14;3134:11:2;3159:1;3174:5;2994:14;:195::i;:::-;2952:237;;;;3204:9;3217:1;3204:14;3200:88;;3242:1;3245:31;:6;:29;:31::i;3200:88::-;-1:-1:-1;;;;;;;;;;;;;;;;;3298:35:2;-1:-1:-1;2362:469:10;2437:7;2446:4;2466:5;:9;;;2462:72;;;2498:25;;;;;;;;;;;;;;2462:72;2544:20;2567:32;-1:-1:-1;;2593:5:10;2567:15;:32::i;:::-;2544:55;;2609:28;2640:37;2656:5;:9;;;2667:5;:9;;;2640:15;:37::i;:::-;2609:68;;2691:31;2705:11;2718:3;2691:13;:31::i;:::-;2687:78;;;-1:-1:-1;2746:1:10;;2749:4;;-1:-1:-1;2362:469:10;-1:-1:-1;;;2362:469:10:o;2687:78::-;2799:15;;2791:24;;;:::i;:::-;2783:33;;;-1:-1:-1;2362:469:10;-1:-1:-1;;;;2362:469:10:o;9209:258:6:-;9268:12;9292:16;9311:31;9338:2;9330:11;;9311:18;:31::i;:::-;9292:50;;9352:26;9381:21;9393:8;9381:11;:21::i;:::-;9352:50;-1:-1:-1;9413:19:6;9352:50;9429:2;9413:15;:19::i;:::-;9450:10;:3;:8;:10::i;:::-;9443:17;9209:258;-1:-1:-1;;;;9209:258:6:o;6185:623:9:-;6363:6;6371:12;6663:8;;6746:55;6753:6;6761:10;6773:5;6780:11;6363:6;6796:4;6746:55;;;:::i;:::-;6739:62;;;;;;6185:623;;;;;;;:::o;4835:432:6:-;-1:-1:-1;;;;;;;;;;;;;;;;;4982:12:6;;5044:31;:7;4982:12;5044:22;:31::i;:::-;5027:48;-1:-1:-1;5027:48:6;-1:-1:-1;5099:1:6;5092:8;;5085:16;;;;:::i;:::-;5139:31;:7;5162;5139:22;:31::i;:::-;5112:58;;;;;;;;-1:-1:-1;5208:31:6;:7;5112:58;5208:22;:31::i;:::-;-1:-1:-1;5180:59:6;;5181:14;;;5180:59;-1:-1:-1;5181:3:6;;4835:432;-1:-1:-1;;4835:432:6:o;3422:287:5:-;3507:12;3531:16;3550:28;3568:4;:9;;;3550:17;:28::i;:::-;3531:47;;3588:26;3617:21;3629:8;3617:11;:21::i;:::-;3664:9;;3588:50;;-1:-1:-1;3649:25:5;;3588:50;;3649:14;:25::i;5150:621:9:-;5364:6;5372:12;5396:44;1344:42;5434:5;5396:22;:44::i;:::-;5452:12;;1344:42;5554:10;5567:5;5574:11;:43;;1717:10;5574:43;;;1551:10;5574:43;5619:5;5626:11;5639:6;5536:110;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5536:110:9;;;;;;;;;;5487:169;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5451:205;;;;5671:7;5666:63;;5701:17;;;;;;;;;;;;;;5666:63;5746:18;5759:4;5746:12;:18::i;:::-;5739:25;;;;;;5150:621;;;;;;;;;:::o;3222:156:15:-;3301:16;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;3301:16:15;3335:36;3358:3;3341:21;;;;;;24735:19:17;;24779:2;24770:12;;24606:182;3341:21:15;;;;;;;;;;;;;3364:3;3369:1;3335:5;:36::i;:::-;3328:43;;3222:156;;;;;:::o;1780:617:6:-;1892:12;1916:16;1946:24;1973:36;:6;:18;;;:34;:36::i;:::-;1946:63;;2032:21;2051:1;2032:18;:21::i;:::-;2020:33;;;;:::i;:::-;2093:25;;:30;2020:33;;-1:-1:-1;2075:49:6;;:17;:49::i;:::-;2063:61;;;;:::i;:::-;;;2146:30;2164:11;2146:17;:30::i;:::-;2134:42;;;;:::i;:::-;;;2186:26;2215:21;2227:8;2215:11;:21::i;:::-;2186:50;-1:-1:-1;2247:22:6;2186:50;2267:1;2247:19;:22::i;:::-;2294:25;;:30;2279:46;;:3;;:14;:46::i;:::-;2335:27;:3;2350:11;2335:14;:27::i;:::-;2380:10;:3;:8;:10::i;:::-;2373:17;1780:617;-1:-1:-1;;;;;1780:617:6:o;3725:406:4:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;3892:10:4;;:14;3888:180;;3939:22;:3;3953:7;3939:13;:22::i;:::-;3979:10;;3922:39;;-1:-1:-1;3922:39:4;-1:-1:-1;3979:14:4;3975:83;;4020:23;:3;:21;:23::i;3975:83::-;-1:-1:-1;;4085:39:4;;;-1:-1:-1;4085:39:4;;;4104:12;;;;;;;;;4085:39;;;;;;;;;;;4078:46;-1:-1:-1;;3725:406:4:o;2744:146:15:-;2831:16;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;2831:16:15;2865:18;2871:3;2876;2881:1;2865:5;:18::i;20279:190::-;20376:4;20391:10;20404:15;20408:1;20411;20414:4;20404:3;:15::i;:::-;20391:28;;20437:6;20445:1;20437:9;20436:26;;20457:5;20436:26;;;20450:4;20429:33;20279:190;-1:-1:-1;;;;20279:190:15:o;2421:356:14:-;2486:7;2522:2;2509:9;:15;2505:248;;-1:-1:-1;2547:1:14;;2421:356;-1:-1:-1;2421:356:14:o;2505:248::-;2582:4;2569:9;:17;2565:188;;-1:-1:-1;2609:1:14;;2421:356;-1:-1:-1;2421:356:14:o;2565:188::-;2644:6;2631:9;:19;2627:126;;-1:-1:-1;2673:1:14;;2421:356;-1:-1:-1;2421:356:14:o;2627:126::-;2708:10;2695:9;:23;2691:62;;-1:-1:-1;2741:1:14;;2421:356;-1:-1:-1;2421:356:14:o;2691:62::-;-1:-1:-1;2769:1:14;;2421:356;-1:-1:-1;2421:356:14:o;1487:173:16:-;1543:22;;:::i;:::-;1589:8;;1577:31;;1599:8;1577:11;:31::i;:::-;-1:-1:-1;1631:1:16;1618:10;;;:14;:4;1487:173;-1:-1:-1;1487:173:16:o;2403:134::-;2485:45;2503:3;840:1;2524:5;2485:17;:45::i;:::-;2403:134;;:::o;1666:157::-;1725:12;1757:3;:9;;;1770:1;1757:14;1749:39;;;;-1:-1:-1;;;1749:39:16;;24995:2:17;1749:39:16;;;24977:21:17;25034:2;25014:18;;;25007:30;25073:14;25053:18;;;25046:42;25105:18;;1749:39:16;24793:336:17;1749:39:16;-1:-1:-1;1805:7:16;:11;;1666:157::o;3165:308:11:-;3249:4;3255;3271:9;3290:8;3331:34;3347:8;3357:7;3331:15;:34::i;:::-;3309:56;-1:-1:-1;3309:56:11;;-1:-1:-1;3309:56:11;;;-1:-1:-1;3383:15:11;;;1250:1;3383:15;3375:59;;;;-1:-1:-1;;;3375:59:11;;25336:2:17;3375:59:11;;;25318:21:17;25375:2;25355:18;;;25348:30;25414:33;25394:18;;;25387:61;25465:18;;3375:59:11;25134:355:17;3375:59:11;3453:3;3458:7;;-1:-1:-1;;;;3165:308:11:o;8767:257:5:-;8850:22;;;8931:26;:7;8949;8931:17;:26::i;2783:140:14:-;2848:7;2904:5;:12;2874:27;2888:5;:12;2874:13;:27::i;:::-;:42;;;;:::i;2825:187:16:-;2912:62;2930:3;945:1;2960:5;:12;2912:17;:62::i;:::-;2984:7;;:21;;2999:5;2984:14;:21::i;7032:350:9:-;7132:21;7167:15;;;7163:85;;;7205:32;;;;;;;;25668:25:17;;;25709:18;;;25702:34;;;25641:18;;7205:32:9;25494:248:17;7163:85:9;2285:17:14;;2328:15;;;7311:65:9;;7350:15;;;;;;;;;;;;;;7311:65;7107:275;;7032:350;;:::o;9676:689::-;9748:6;9756:12;9781:11;9794:19;9815:25;9855:12;9844:49;;;;;;;;;;;;:::i;:::-;9780:113;;-1:-1:-1;9780:113:9;-1:-1:-1;9780:113:9;-1:-1:-1;9908:31:9;;;9904:417;;9959:19;;:24;9955:93;;10010:23;;-1:-1:-1;;;10010:23:9;;;;;;;;;;;9955:93;9904:417;;;10068:31;;;1288:4:14;10068:31:9;;:70;;-1:-1:-1;10103:35:9;;;1249:4:14;10103:35:9;10068:70;10064:257;;;10158:12;:19;10181:1;10158:24;10154:93;;10209:23;;-1:-1:-1;;;10209:23:9;;;;;;;;;;;10064:257;10284:26;;;;;10874:18:17;10862:31;;10284:26:9;;;10844:50:17;10817:18;;10284:26:9;10700:200:17;10064:257:9;10339:4;;10345:12;;-1:-1:-1;9676:689:9;;-1:-1:-1;;;9676:689:9:o;33970:2292:15:-;34079:18;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;34079:18:15;34302:4;34297:3;34293:14;34340:3;34334:10;34357:7;34398:4;34392:11;34445:1;34438:4;34430:6;34426:17;34423:24;34519:1;34514:214;;;;34801:17;;;34813:4;34791:28;;;35000:19;;;34984:36;;34887:20;;34883:31;;-1:-1:-1;34416:650:15;;34514:214;34567:4;34558:7;34554:18;34543:29;;34662:6;34653:7;34646:23;34416:650;;35106:1;35099:4;35090:7;35086:18;35079:29;35165:6;35160:3;35152:6;35146:4;35141:3;35136;35125:47;35121:52;35268:4;35258:7;35252:14;35248:25;35239:7;35235:39;35229:4;35222:53;35441:7;35435:14;35418:31;;35462:467;35489:4;35475:19;;35462:467;;35591:4;35578:18;;35572:25;35569:31;35658:1;35653:40;;;;35758:5;;;35653:40;-1:-1:-1;;;35870:19:15;;;;35686:4;35673:18;35462:467;;;35943:26;;;-1:-1:-1;;36012:18:15;;36122:4;36115:12;;36108:25;;;36216:11;;:39;;36249:6;36216:39;;;36240:5;;36230:16;;:9;:16::i;:::-;36205:8;;;:50;:1;33970:2292;-1:-1:-1;;;33970:2292:15:o;1248:389:3:-;1380:7;;:14;1327:12;;1351:16;;1380:18;;1397:1;1380:18;:::i;:::-;1370:29;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1370:29:3;;1351:48;;1419:3;:7;;;:15;;1430:4;1419:15;;;:45;;1459:4;1419:45;;;-1:-1:-1;;;1419:45:3;1410:3;1414:1;1410:6;;;;;;;;:::i;:::-;;;;:54;-1:-1:-1;;;;;1410:54:3;;;;;;;;-1:-1:-1;1488:1:3;1475:10;1499:111;1520:7;;:14;1516:18;;1499:111;;;1568:7;;:10;;1576:1;;1568:10;;;;;;:::i;:::-;;;;;;;;;1555:3;1559:5;1555:10;;;;;;;;:::i;:::-;;;;:23;-1:-1:-1;;;;;1555:23:3;;;;;;;;-1:-1:-1;1592:7:3;;;;:::i;:::-;;;;1536:3;;;;;:::i;:::-;;;;1499:111;;;-1:-1:-1;1627:3:3;;1248:389;-1:-1:-1;;;1248:389:3:o;3756:148:16:-;3843:54;3867:3;1044:1;3890:6;3843:23;:54::i;4687:759:11:-;4766:12;4780:4;4796:9;4815:8;4856:34;4872:8;4882:7;4856:15;:34::i;:::-;4834:56;-1:-1:-1;4834:56:11;;-1:-1:-1;4834:56:11;;;-1:-1:-1;4908:13:11;;;1304:1;4908:13;;:37;;-1:-1:-1;4925:20:11;;;1187:1;4925:20;4908:37;4900:96;;;;-1:-1:-1;;;4900:96:11;;26787:2:17;4900:96:11;;;26769:21:17;26826:2;26806:18;;;26799:30;26865:34;26845:18;;;26838:62;26936:16;26916:18;;;26909:44;26970:19;;4900:96:11;26585:410:17;4900:96:11;-1:-1:-1;;5011:13:11;;;;5007:142;;5062:34;5078:8;5088:7;5062:15;:34::i;:::-;5040:56;-1:-1:-1;5040:56:11;;-1:-1:-1;5040:56:11;;;-1:-1:-1;5117:20:11;;;1187:1;5117:20;5110:28;;;;:::i;:::-;5159:12;5174:13;5184:3;5174:7;:13;:::i;:::-;5159:28;;5197:18;5228:3;5218:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5218:14:11;-1:-1:-1;5197:35:11;-1:-1:-1;5242:16:11;5289:7;5272:128;5302:7;5298:1;:11;5272:128;;;5351:8;5360:1;5351:11;;;;;;;;:::i;:::-;;;;;;;;;5330:5;5336:11;5330:18;;;;;;;;:::i;:::-;;;;:32;-1:-1:-1;;;;;5330:32:11;;;;;;;;-1:-1:-1;5376:13:11;;;;:::i;:::-;;;;5311:3;;;;;:::i;:::-;;;;5272:128;;;-1:-1:-1;5418:5:11;5425:13;5435:3;5425:7;:13;:::i;:::-;5410:29;;;;;;;;;4687:759;;;;;:::o;1793:482:3:-;-1:-1:-1;;;;;;;;;;;;;;;;;1902:3:3;:10;1916:1;1902:15;1898:87;;-1:-1:-1;;1940:34:3;;;;;;;;;;;;;;;-1:-1:-1;1940:34:3;;;;;;;;;;;;;;;;;1793:482::o;1898:87::-;1995:16;2037:1;2024:3;:10;:14;;;;:::i;:::-;2014:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2014:25:3;;1995:44;;2049:8;2080:3;2084:1;2080:6;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;2080:14:3;2076:55;;-1:-1:-1;2116:4:3;2076:55;2155:1;2141:82;2162:3;:10;2158:1;:14;2141:82;;;2206:3;2210:1;2206:6;;;;;;;;:::i;:::-;;;;;;;2193:3;2197:5;2201:1;2197;:5;:::i;:::-;2193:10;;;;;;;;:::i;:::-;;;;:19;-1:-1:-1;;;;;2193:19:3;;;;;;;;-1:-1:-1;2174:3:3;;;;:::i;:::-;;;;2141:82;;;-1:-1:-1;2240:28:3;;;;;;;;;;;;;;;;;;;1793:482;-1:-1:-1;;1793:482:3:o;18594:1058:15:-;18714:3;18742:1;18753:185;;;;18780:1;:5;;;:14;;;;;18789:1;:5;;;18780:14;18777:150;;;-1:-1:-1;;;18777:150:15;;;18830:5;;;;:12;;;:27;;-1:-1:-1;18846:5:15;;;;:11;;18853:4;18846:11;18830:27;18827:100;;;18866:1;18859:8;;;;;18827:100;18889:5;;;;:11;;18896:4;18889:11;:27;;;;-1:-1:-1;18904:5:15;;;;:12;18889:27;18886:41;;;-1:-1:-1;;18918:9:15;;;;;18886:41;18960:1;:8;;;18951:1;:8;;;:17;18948:39;;;18980:7;-1:-1:-1;18970:17:15;;18948:39;19024:1;:8;;;19015:1;:8;;;:17;19012:39;;;19041:10;19044:7;-1:-1:-1;;19041:10:15;:::i;:::-;19034:17;;;;;19012:39;19156:5;;:12;;19300:8;;19268:4;19255:18;;;;19296;;19062:10;;;;;19334:279;19350:3;19348:1;:5;19334:279;;;19426:1;19420:5;19416:12;19410:19;19400:29;;19472:1;19466:5;19462:12;19456:19;19446:29;;19513:6;19506;:13;19503:35;;;19531:7;19521:17;;;;;;;;;;;19503:35;19575:6;19568;:13;19565:35;;;19590:10;19593:7;-1:-1:-1;;19590:10:15;:::i;:::-;19583:17;;;;;;;;;;;19565:35;19354:5;19357:2;19354:5;;:::i;:::-;;;19334:279;;;;19630:1;19623:8;;;;;;;;18594:1058;;;;;;:::o;1020:555:0:-;-1:-1:-1;;;;;;;;;;;;;;;;;1119:13:0;1130:2;1119:8;:13;:::i;:::-;:18;1115:81;;1171:13;1182:2;1171:8;:13;:::i;:::-;1165:20;;:2;:20;:::i;:::-;1153:32;;;;:::i;:::-;;;1115:81;1251:12;;;;:23;;;1324:4;1318:11;1342:16;;;-1:-1:-1;1371:14:0;;1318:11;1417:18;;;1409:27;1452:12;;;1449:60;;;1493:1;1490;1483:12;1449:60;1529:4;1522:17;-1:-1:-1;1565:3:0;;1020:555;-1:-1:-1;;1020:555:0:o;6153:759:16:-;6296:2;6287:5;:11;;;6283:623;;6314:7;;:48;;6340:20;6350:1;6341:10;;;6340:20;;;6314:19;:48::i;6283:623::-;6392:4;6383:5;:13;;;6379:527;;6412:7;;:45;;6453:2;6439:10;6448:1;6439:10;;;;6438:17;6412:19;:45::i;:::-;-1:-1:-1;6471:7:16;;:27;;;;;6496:1;6471:17;:27::i;6379:527::-;6528:6;6519:5;:15;;;6515:391;;6550:7;;:45;;6591:2;6577:10;6586:1;6577:10;;;;6576:17;6550:19;:45::i;:::-;-1:-1:-1;6609:7:16;;:27;;;;;6634:1;6609:17;:27::i;6515:391::-;6666:10;6657:5;:19;;;6653:253;;6692:7;;:45;;6733:2;6719:10;6728:1;6719:10;;;;6718:17;6692:19;:45::i;:::-;-1:-1:-1;6751:7:16;;:27;;;;;6776:1;6751:17;:27::i;6653:253::-;6809:7;;:45;;6850:2;6836:10;6845:1;6836:10;;;;6835:17;6809:19;:45::i;:::-;-1:-1:-1;6868:7:16;;:27;;;;;6893:1;6868:17;:27::i;15893:1381:11:-;15976:5;15983:6;15991:4;16007:11;16021:27;16032:4;16038:9;16021:10;:27::i;:::-;16007:41;-1:-1:-1;16058:14:11;16071:1;16058:14;;:::i;:::-;;-1:-1:-1;16094:19:11;16112:1;16094:19;;;;16143:4;16135:12;;16255:2;16249:8;;16241:58;;;;-1:-1:-1;;;16241:58:11;;27616:2:17;16241:58:11;;;27598:21:17;27655:2;27635:18;;;27628:30;27694:34;27674:18;;;27667:62;27765:7;27745:18;;;27738:35;27790:19;;16241:58:11;27414:401:17;16241:58:11;16351:2;16345:3;:8;;;16341:67;;;16377:3;;-1:-1:-1;16369:28:11;;;-1:-1:-1;16387:9:11;;-1:-1:-1;16369:28:11;;-1:-1:-1;16369:28:11;16341:67;16452:3;:9;;16459:2;16452:9;16448:234;;16477:10;16490:27;16501:4;16507:9;16490:10;:27::i;:::-;16477:40;-1:-1:-1;16531:14:11;16544:1;16531:14;;:::i;:::-;;;16575:2;16567:4;:10;;;;16559:35;;;;-1:-1:-1;;;16559:35:11;;28022:2:17;16559:35:11;;;28004:21:17;28061:2;28041:18;;;28034:30;28100:14;28080:18;;;28073:42;28132:18;;16559:35:11;27820:336:17;16559:35:11;16650:3;;-1:-1:-1;;16642:29:11;;;-1:-1:-1;16661:9:11;;-1:-1:-1;16642:29:11;;-1:-1:-1;16642:29:11;16448:234;16729:3;:9;;16736:2;16729:9;16725:159;;16754:14;16771:28;16783:4;16789:9;16771:11;:28::i;:::-;16754:45;-1:-1:-1;16813:14:11;16826:1;16813:14;;:::i;:::-;;-1:-1:-1;16849:3:11;;-1:-1:-1;;16841:32:11;;;-1:-1:-1;16813:14:11;;-1:-1:-1;16841:32:11;;-1:-1:-1;16841:32:11;16725:159;16931:3;:9;;16938:2;16931:9;16927:159;;16956:14;16973:28;16985:4;16991:9;16973:11;:28::i;:::-;16956:45;-1:-1:-1;17015:14:11;17028:1;17015:14;;:::i;:::-;;-1:-1:-1;17051:3:11;;-1:-1:-1;;17043:32:11;;;-1:-1:-1;17015:14:11;;-1:-1:-1;17043:32:11;;-1:-1:-1;17043:32:11;16927:159;17136:3;:9;;17143:2;17136:9;17129:17;;;;:::i;:::-;17156:14;17173:28;17185:4;17191:9;17173:11;:28::i;:::-;17156:45;-1:-1:-1;17211:14:11;17224:1;17211:14;;:::i;:::-;;-1:-1:-1;17243:3:11;;-1:-1:-1;17248:7:11;;-1:-1:-1;17211:14:11;;-1:-1:-1;;;15893:1381:11;;;;;;:::o;11420:376::-;11499:5;11506:4;11522:9;11541:10;11586:34;11602:8;11612:7;11586:15;:34::i;:::-;11562:58;-1:-1:-1;11562:58:11;;-1:-1:-1;11562:58:11;;;-1:-1:-1;11638:19:11;;;1153:1;11638:19;;:44;;-1:-1:-1;11661:21:11;;;;11638:44;11630:110;;;;-1:-1:-1;;;11630:110:11;;28363:2:17;11630:110:11;;;28345:21:17;28402:2;28382:18;;;28375:30;28441:34;28421:18;;;28414:62;28512:23;28492:18;;;28485:51;28553:19;;11630:110:11;28161:417:17;4539:146:0;-1:-1:-1;;;;;;;;;;;;;;;;;4648:30:0;4655:3;4660:4;4666;:11;4648:6;:30::i;29225:516:15:-;29296:6;29316:9;29323:1;29316:6;:9::i;:::-;29313:22;;;-1:-1:-1;29334:1:15;;29225:516;-1:-1:-1;29225:516:15:o;29313:22::-;29412:4;29406:11;;29400:18;29478:17;29400:18;29478:9;:17::i;:::-;29672:8;;-1:-1:-1;;29668:19:15;29690:1;29664:28;29657:36;;;;29225:516;-1:-1:-1;;29225:516:15:o;7090:171:16:-;7217:37;7235:3;7240:5;7247:6;7217:17;:37::i;4948:699:0:-;-1:-1:-1;;;;;;;;;;;;;;;;;5058:7:0;;:14;5047:8;5100:7;5058:14;5106:1;5100:7;:::i;:::-;5082:25;;5128:3;:12;;;5121:3;:19;5117:77;;5156:27;5163:3;5168:14;:10;5181:1;5168:14;:::i;:::-;5156:6;:27::i;:::-;5296:3;5290:10;5417:2;5411:3;5403:6;5399:16;5395:25;5447:4;5441;5433:19;;5543:6;5537:13;5525:10;5522:29;5519:91;;;5585:10;5577:6;5570:26;5519:91;-1:-1:-1;5637:3:0;;4948:699;-1:-1:-1;;;;4948:699:0:o;8083:795::-;-1:-1:-1;;;;;;;;;;;;;;;;;8200:7:0;;:14;8189:8;8243:9;8200:14;8243:3;:9;:::i;:::-;8224:28;;8280:3;:12;;;8266:11;:26;8262:85;;;8308:28;8315:3;8320:15;:11;8334:1;8320:15;:::i;8308:28::-;8357:9;8384:1;8370:10;8377:3;8370;:10;:::i;:::-;8369:16;;;;:::i;:::-;8357:28;;8487:3;8481:10;8606:11;8598:6;8594:24;8676:4;8668;8664:9;8657:4;8651:11;8647:27;8644:37;8638:4;8631:51;;8774:6;8768:13;8755:11;8752:30;8749:93;;;8816:11;8808:6;8801:27;8749:93;-1:-1:-1;8868:3:0;;8083:795;-1:-1:-1;;;;;;8083:795:0:o;13965:184:11:-;14037:5;14075:9;:5;14083:1;14075:9;:::i;:::-;14062:2;:9;:22;;14054:55;;;;-1:-1:-1;;;14054:55:11;;30159:2:17;14054:55:11;;;30141:21:17;30198:2;30178:18;;;30171:30;-1:-1:-1;;;30217:18:17;;;30210:50;30277:18;;14054:55:11;29957:344:17;14054:55:11;14132:2;14135:5;14132:9;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;13965:184:11;;;;:::o;14358:276::-;14431:6;14470:9;:5;14478:1;14470:9;:::i;:::-;14457:2;:9;:22;;14449:55;;;;-1:-1:-1;;;14449:55:11;;30159:2:17;14449:55:11;;;30141:21:17;30198:2;30178:18;;;30171:30;-1:-1:-1;;;30217:18:17;;;30210:50;30277:18;;14449:55:11;29957:344:17;14449:55:11;-1:-1:-1;14566:25:11;14578:4;14566:25;14560:32;14618:9;;;14358:276::o;14843:::-;14916:6;14955:9;:5;14963:1;14955:9;:::i;:::-;14942:2;:9;:22;;14934:55;;;;-1:-1:-1;;;14934:55:11;;30159:2:17;14934:55:11;;;30141:21:17;30198:2;30178:18;;;30171:30;-1:-1:-1;;;30217:18:17;;;30210:50;30277:18;;14934:55:11;29957:344:17;14934:55:11;-1:-1:-1;15051:25:11;15063:4;15051:25;15045:32;15103:9;;;14843:276::o;15328:::-;15401:6;15440:9;:5;15448:1;15440:9;:::i;:::-;15427:2;:9;:22;;15419:55;;;;-1:-1:-1;;;15419:55:11;;30159:2:17;15419:55:11;;;30141:21:17;30198:2;30178:18;;;30171:30;-1:-1:-1;;;30217:18:17;;;30210:50;30277:18;;15419:55:11;29957:344:17;15419:55:11;-1:-1:-1;15536:25:11;15548:4;15536:25;15530:32;15588:9;;;15328:276::o;2844:1427:0:-;-1:-1:-1;;;;;;;;;;;;;;;;;2970:4:0;:11;2963:3;:18;;2955:27;;;;;;3004:7;;:14;2993:8;3047:9;3053:3;3004:14;3047:9;:::i;:::-;3028:28;;3084:3;:12;;;3070:11;:26;3066:85;;;3112:28;3119:3;3124:15;:11;3138:1;3124:15;:::i;3112:28::-;3284:10;;3367:13;;3480:25;;;3496:2;3480:25;;3161:9;;3579:23;;;3576:86;;;3636:11;3628:6;3621:27;3576:86;-1:-1:-1;;;3692:2:0;3682:13;;3765:165;3779:2;3772:3;:9;3765:165;;3848:10;;3835:24;;3886:10;3894:2;3842:4;3886:10;:::i;:::-;;-1:-1:-1;3910:9:0;3917:2;3910:9;;:::i;:::-;;-1:-1:-1;3783:9:0;3790:2;3783:9;;:::i;:::-;;;3765:165;;;4091:10;4150:11;;-1:-1:-1;;4017:2:0;:8;;;4009:3;:17;4008:23;4146:22;;;4103:9;;4087:26;;;;4198:21;4185:35;;-1:-1:-1;4261:3:0;;-1:-1:-1;;2844:1427:0;;;;;:::o;28180:447:15:-;28248:4;;28353;28347:11;;28248:4;28377:222;28393:1;:8;28391:1;:10;28377:222;;;28445:17;;;-1:-1:-1;28503:10:15;;28500:27;;-1:-1:-1;28522:5:15;;28180:447;-1:-1:-1;;;;28180:447:15:o;28500:27::-;28582:4;28566:21;;;;28403:5;;;;:::i;:::-;;;28377:222;;;-1:-1:-1;28615:4:15;;28180:447;-1:-1:-1;;;;28180:447:15:o;30071:2276::-;30135:6;30182:8;;30208:1;30203:45;;;;30777:4;30771:11;;30819:66;30799:87;;30923:66;30916:4;30910:11;;30903:87;31027:66;31014:11;;;31007:87;31131:66;31124:4;31118:11;;31111:87;31235:66;31228:4;31222:11;;31215:87;31339:66;31332:4;31326:11;;31319:87;31443:66;31436:4;31430:11;;31423:87;31547:66;31540:4;31534:11;;31527:87;30487:5;31644:13;;;31631:27;;;-1:-1:-1;;;31688:64:15;30677:35;-1:-1:-1;;;30573:11:15;30529:7;30446:4;30405;30364;-1:-1:-1;;30321:8:15;;30357:12;;;30351:19;;30398:12;;;30392:19;;;30439:12;;;30433:19;;;30480:13;;;30474:20;30522:15;;;30516:22;;;30566:19;;;30560:26;;;30614:27;;;30608:34;;;30670:43;;;30664:50;;;30327:1;30736:9;31878:13;;;31874:25;;;31941:3;31937:11;31931:18;;;31925:25;30736:9;;-1:-1:-1;;;31996:75:15;;31987:85;;;31921:37;;;31980:93;;-1:-1:-1;32236:21:15;;32230:87;;32296:1;32293;32289:9;32284:14;;32230:87;;30175:2156;;30203:45;-1:-1:-1;30233:1:15;;30071:2276;-1:-1:-1;;30071:2276:15:o;2004:167:0:-;2099:7;;2116:19;2099:3;2126:8;2116:4;:19::i;:::-;;2145;2152:3;2157:6;2145;:19::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:196:17:-;82:20;;-1:-1:-1;;;;;131:54:17;;121:65;;111:93;;200:1;197;190:12;215:254;283:6;291;344:2;332:9;323:7;319:23;315:32;312:52;;;360:1;357;350:12;312:52;383:29;402:9;383:29;:::i;:::-;373:39;459:2;444:18;;;;431:32;;-1:-1:-1;;;215:254:17:o;887:180::-;946:6;999:2;987:9;978:7;974:23;970:32;967:52;;;1015:1;1012;1005:12;967:52;-1:-1:-1;1038:23:17;;887:180;-1:-1:-1;887:180:17:o;1072:129::-;1157:18;1150:5;1146:30;1139:5;1136:41;1126:69;;1191:1;1188;1181:12;1206:313;1273:6;1281;1334:2;1322:9;1313:7;1309:23;1305:32;1302:52;;;1350:1;1347;1340:12;1302:52;1386:9;1373:23;1363:33;;1446:2;1435:9;1431:18;1418:32;1459:30;1483:5;1459:30;:::i;:::-;1508:5;1498:15;;;1206:313;;;;;:::o;1812:186::-;1871:6;1924:2;1912:9;1903:7;1899:23;1895:32;1892:52;;;1940:1;1937;1930:12;1892:52;1963:29;1982:9;1963:29;:::i;2003:632::-;2174:2;2226:21;;;2296:13;;2199:18;;;2318:22;;;2145:4;;2174:2;2397:15;;;;2371:2;2356:18;;;2145:4;2440:169;2454:6;2451:1;2448:13;2440:169;;;2515:13;;2503:26;;2584:15;;;;2549:12;;;;2476:1;2469:9;2440:169;;;-1:-1:-1;2626:3:17;;2003:632;-1:-1:-1;;;;;;2003:632:17:o;2640:409::-;2714:6;2722;2730;2783:2;2771:9;2762:7;2758:23;2754:32;2751:52;;;2799:1;2796;2789:12;2751:52;2835:9;2822:23;2812:33;;2892:2;2881:9;2877:18;2864:32;2854:42;;2946:2;2935:9;2931:18;2918:32;2993:5;2986:13;2979:21;2972:5;2969:32;2959:60;;3015:1;3012;3005:12;2959:60;3038:5;3028:15;;;2640:409;;;;;:::o;3054:250::-;3139:1;3149:113;3163:6;3160:1;3157:13;3149:113;;;3239:11;;;3233:18;3220:11;;;3213:39;3185:2;3178:10;3149:113;;;-1:-1:-1;;3296:1:17;3278:16;;3271:27;3054:250::o;3309:271::-;3351:3;3389:5;3383:12;3416:6;3411:3;3404:19;3432:76;3501:6;3494:4;3489:3;3485:14;3478:4;3471:5;3467:16;3432:76;:::i;:::-;3562:2;3541:15;-1:-1:-1;;3537:29:17;3528:39;;;;3569:4;3524:50;;3309:271;-1:-1:-1;;3309:271:17:o;3585:999::-;3927:4;3956:3;3986:2;3975:9;3968:21;4012:45;4053:2;4042:9;4038:18;4030:6;4012:45;:::i;:::-;3998:59;;4105:9;4097:6;4093:22;4088:2;4077:9;4073:18;4066:50;4133:33;4159:6;4151;4133:33;:::i;:::-;4197:2;4182:18;;4175:34;;;;-1:-1:-1;;;;;;;4245:55:17;;;;4240:2;4225:18;;4218:83;4345:14;;4338:22;4332:3;4317:19;;4310:51;4392:3;4377:19;;4370:35;;;;4454:18;4442:31;4436:3;4421:19;;4414:60;4505:3;4490:19;;4483:35;4562:14;4555:22;4549:3;4534:19;;;4527:51;4125:41;3585:999;-1:-1:-1;;3585:999:17:o;4589:184::-;-1:-1:-1;;;4638:1:17;4631:88;4738:4;4735:1;4728:15;4762:4;4759:1;4752:15;4778:275;4849:2;4843:9;4914:2;4895:13;;-1:-1:-1;;4891:27:17;4879:40;;4949:18;4934:34;;4970:22;;;4931:62;4928:88;;;4996:18;;:::i;:::-;5032:2;5025:22;4778:275;;-1:-1:-1;4778:275:17:o;5058:186::-;5106:4;5139:18;5131:6;5128:30;5125:56;;;5161:18;;:::i;:::-;-1:-1:-1;5227:2:17;5206:15;-1:-1:-1;;5202:29:17;5233:4;5198:40;;5058:186::o;5249:462::-;5291:5;5344:3;5337:4;5329:6;5325:17;5321:27;5311:55;;5362:1;5359;5352:12;5311:55;5398:6;5385:20;5429:48;5445:31;5473:2;5445:31;:::i;:::-;5429:48;:::i;:::-;5502:2;5493:7;5486:19;5548:3;5541:4;5536:2;5528:6;5524:15;5520:26;5517:35;5514:55;;;5565:1;5562;5555:12;5514:55;5630:2;5623:4;5615:6;5611:17;5604:4;5595:7;5591:18;5578:55;5678:1;5653:16;;;5671:4;5649:27;5642:38;;;;5657:7;5249:462;-1:-1:-1;;;5249:462:17:o;5716:320::-;5784:6;5837:2;5825:9;5816:7;5812:23;5808:32;5805:52;;;5853:1;5850;5843:12;5805:52;5893:9;5880:23;5926:18;5918:6;5915:30;5912:50;;;5958:1;5955;5948:12;5912:50;5981:49;6022:7;6013:6;6002:9;5998:22;5981:49;:::i;6041:220::-;6190:2;6179:9;6172:21;6153:4;6210:45;6251:2;6240:9;6236:18;6228:6;6210:45;:::i;6266:254::-;6334:6;6342;6395:2;6383:9;6374:7;6370:23;6366:32;6363:52;;;6411:1;6408;6401:12;6363:52;6447:9;6434:23;6424:33;;6476:38;6510:2;6499:9;6495:18;6476:38;:::i;:::-;6466:48;;6266:254;;;;;:::o;6859:1077::-;7002:6;7010;7018;7026;7034;7042;7095:3;7083:9;7074:7;7070:23;7066:33;7063:53;;;7112:1;7109;7102:12;7063:53;7152:9;7139:23;7181:18;7222:2;7214:6;7211:14;7208:34;;;7238:1;7235;7228:12;7208:34;7261:49;7302:7;7293:6;7282:9;7278:22;7261:49;:::i;:::-;7251:59;;7363:2;7352:9;7348:18;7335:32;7319:48;;7392:2;7382:8;7379:16;7376:36;;;7408:1;7405;7398:12;7376:36;7431:51;7474:7;7463:8;7452:9;7448:24;7431:51;:::i;:::-;7421:61;;7529:2;7518:9;7514:18;7501:32;7491:42;;7586:2;7575:9;7571:18;7558:32;7542:48;;7615:2;7605:8;7602:16;7599:36;;;7631:1;7628;7621:12;7599:36;7654:51;7697:7;7686:8;7675:9;7671:24;7654:51;:::i;:::-;7644:61;;7758:3;7747:9;7743:19;7730:33;7714:49;;7788:2;7778:8;7775:16;7772:36;;;7804:1;7801;7794:12;7772:36;;7827:51;7870:7;7859:8;7848:9;7844:24;7827:51;:::i;:::-;7817:61;;;7925:3;7914:9;7910:19;7897:33;7887:43;;6859:1077;;;;;;;;:::o;7941:1364::-;8450:3;8439:9;8432:22;8413:4;8477:46;8518:3;8507:9;8503:19;8495:6;8477:46;:::i;:::-;8571:9;8563:6;8559:22;8554:2;8543:9;8539:18;8532:50;8605:33;8631:6;8623;8605:33;:::i;:::-;8591:47;;8674:6;8669:2;8658:9;8654:18;8647:34;-1:-1:-1;;;;;8721:6:17;8717:55;8712:2;8701:9;8697:18;8690:83;8822:9;8814:6;8810:22;8804:3;8793:9;8789:19;8782:51;8856:33;8882:6;8874;8856:33;:::i;:::-;8842:47;;8938:9;8930:6;8926:22;8920:3;8909:9;8905:19;8898:51;8966:33;8992:6;8984;8966:33;:::i;:::-;8958:41;;;9036:6;9030:3;9019:9;9015:19;9008:35;9092:18;9084:6;9080:31;9074:3;9063:9;9059:19;9052:60;9121:44;9160:3;9149:9;9145:19;9137:6;1594:13;1587:21;1575:34;;1524:91;9121:44;9202:6;9196:3;9185:9;9181:19;9174:35;9246:7;9240:3;9229:9;9225:19;9218:36;9291:7;9285:3;9274:9;9270:19;9263:36;7941:1364;;;;;;;;;;;;;;;:::o;11256:437::-;11335:1;11331:12;;;;11378;;;11399:61;;11453:4;11445:6;11441:17;11431:27;;11399:61;11506:2;11498:6;11495:14;11475:18;11472:38;11469:218;;-1:-1:-1;;;11540:1:17;11533:88;11644:4;11641:1;11634:15;11672:4;11669:1;11662:15;12517:963;12626:4;12655:2;12684;12673:9;12666:21;12707:1;12740:6;12734:13;12770:36;12796:9;12770:36;:::i;:::-;12842:6;12837:2;12826:9;12822:18;12815:34;12868:2;12889:1;12921:2;12910:9;12906:18;12938:1;12933:158;;;;13105:1;13100:354;;;;12899:555;;12933:158;-1:-1:-1;;12981:24:17;;12961:18;;;12954:52;13059:14;;13052:22;13049:1;13045:30;13030:46;;13026:55;;;-1:-1:-1;12933:158:17;;13100:354;13131:6;13128:1;13121:17;13179:2;13176:1;13166:16;13204:1;13218:180;13232:6;13229:1;13226:13;13218:180;;;13325:14;;13301:17;;;13297:26;;13290:50;13368:16;;;;13247:10;;13218:180;;;13422:17;;13418:26;;;-1:-1:-1;;12899:555:17;-1:-1:-1;13471:3:17;;12517:963;-1:-1:-1;;;;;;;;12517:963:17:o;15286:184::-;-1:-1:-1;;;15335:1:17;15328:88;15435:4;15432:1;15425:15;15459:4;15456:1;15449:15;15475:168;15548:9;;;15579;;15596:15;;;15590:22;;15576:37;15566:71;;15617:18;;:::i;15648:184::-;-1:-1:-1;;;15697:1:17;15690:88;15797:4;15794:1;15787:15;15821:4;15818:1;15811:15;15837:120;15877:1;15903;15893:35;;15908:18;;:::i;:::-;-1:-1:-1;15942:9:17;;15837:120::o;15962:128::-;16029:9;;;16050:11;;;16047:37;;;16064:18;;:::i;16095:125::-;16160:9;;;16181:10;;;16178:36;;;16194:18;;:::i;16225:135::-;16264:3;16285:17;;;16282:43;;16305:18;;:::i;:::-;-1:-1:-1;16352:1:17;16341:13;;16225:135::o;18442:544::-;18543:2;18538:3;18535:11;18532:448;;;18579:1;18604:5;18600:2;18593:17;18649:4;18645:2;18635:19;18719:2;18707:10;18703:19;18700:1;18696:27;18690:4;18686:38;18755:4;18743:10;18740:20;18737:47;;;-1:-1:-1;18778:4:17;18737:47;18833:2;18828:3;18824:12;18821:1;18817:20;18811:4;18807:31;18797:41;;18888:82;18906:2;18899:5;18896:13;18888:82;;;18951:17;;;18932:1;18921:13;18888:82;;;18892:3;;;18442:544;;;:::o;19162:1349::-;19286:3;19280:10;19313:18;19305:6;19302:30;19299:56;;;19335:18;;:::i;:::-;19364:96;19453:6;19413:38;19445:4;19439:11;19413:38;:::i;:::-;19407:4;19364:96;:::i;:::-;19515:4;;19579:2;19568:14;;19596:1;19591:663;;;;20298:1;20315:6;20312:89;;;-1:-1:-1;20367:19:17;;;20361:26;20312:89;-1:-1:-1;;19119:1:17;19115:11;;;19111:24;19107:29;19097:40;19143:1;19139:11;;;19094:57;20414:81;;19561:944;;19591:663;12464:1;12457:14;;;12501:4;12488:18;;-1:-1:-1;;19627:20:17;;;19745:236;19759:7;19756:1;19753:14;19745:236;;;19848:19;;;19842:26;19827:42;;19940:27;;;;19908:1;19896:14;;;;19775:19;;19745:236;;;19749:3;20009:6;20000:7;19997:19;19994:201;;;20070:19;;;20064:26;-1:-1:-1;;20153:1:17;20149:14;;;20165:3;20145:24;20141:37;20137:42;20122:58;20107:74;;19994:201;-1:-1:-1;;;;;20241:1:17;20225:14;;;20221:22;20208:36;;-1:-1:-1;19162:1349:17:o;21872:287::-;22001:3;22039:6;22033:13;22055:66;22114:6;22109:3;22102:4;22094:6;22090:17;22055:66;:::i;:::-;22137:16;;;;;21872:287;-1:-1:-1;;21872:287:17:o;22164:617::-;22435:3;22424:9;22417:22;22398:4;22462:46;22503:3;22492:9;22488:19;22480:6;22462:46;:::i;:::-;22556:9;22548:6;22544:22;22539:2;22528:9;22524:18;22517:50;22590:33;22616:6;22608;22590:33;:::i;:::-;22576:47;;22659:6;22654:2;22643:9;22639:18;22632:34;22714:9;22706:6;22702:22;22697:2;22686:9;22682:18;22675:50;22742:33;22768:6;22760;22742:33;:::i;:::-;22734:41;22164:617;-1:-1:-1;;;;;;;22164:617:17:o;22786:184::-;-1:-1:-1;;;22835:1:17;22828:88;22935:4;22932:1;22925:15;22959:4;22956:1;22949:15;23436:297;23554:12;;23601:4;23590:16;;;23584:23;;23554:12;23619:16;;23616:111;;;-1:-1:-1;;23693:4:17;23689:17;;;;23686:1;23682:25;23678:38;23667:50;;23436:297;-1:-1:-1;23436:297:17:o;23738:184::-;-1:-1:-1;;;23787:1:17;23780:88;23887:4;23884:1;23877:15;23911:4;23908:1;23901:15;23927:674;24201:4;24230:18;24287:2;24279:6;24275:15;24264:9;24257:34;24327:6;24322:2;24311:9;24307:18;24300:34;24382:2;24374:6;24370:15;24365:2;24354:9;24350:18;24343:43;24434:2;24426:6;24422:15;24417:2;24406:9;24402:18;24395:43;24475:3;24469;24458:9;24454:19;24447:32;24496:46;24537:3;24526:9;24522:19;24514:6;24496:46;:::i;:::-;24488:54;;24591:2;24583:6;24579:15;24573:3;24562:9;24558:19;24551:44;;23927:674;;;;;;;;;:::o;25747:833::-;25842:6;25850;25858;25911:2;25899:9;25890:7;25886:23;25882:32;25879:52;;;25927:1;25924;25917:12;25879:52;25956:9;25950:16;25940:26;;26009:2;25998:9;25994:18;25988:25;26022:30;26046:5;26022:30;:::i;:::-;26120:2;26105:18;;26099:25;26071:5;;-1:-1:-1;26147:18:17;26136:30;;26133:50;;;26179:1;26176;26169:12;26133:50;26202:22;;26255:4;26247:13;;26243:27;-1:-1:-1;26233:55:17;;26284:1;26281;26274:12;26233:55;26313:2;26307:9;26338:48;26354:31;26382:2;26354:31;:::i;26338:48::-;26409:2;26402:5;26395:17;26449:7;26444:2;26439;26435;26431:11;26427:20;26424:33;26421:53;;;26470:1;26467;26460:12;26421:53;26483:67;26547:2;26542;26535:5;26531:14;26526:2;26522;26518:11;26483:67;:::i;:::-;26569:5;26559:15;;;;;25747:833;;;;;:::o;27000:292::-;27072:9;;;27039:7;27097:9;;-1:-1:-1;;;27108:73:17;;27093:89;27090:115;;;27185:18;;:::i;:::-;27258:1;27249:7;27244:16;27241:1;27238:23;27234:1;27227:9;27224:38;27214:72;;27266:18;;:::i;27297:112::-;27329:1;27355;27345:35;;27360:18;;:::i;:::-;-1:-1:-1;27394:9:17;;27297:112::o;28583:422::-;28672:1;28715:5;28672:1;28729:270;28750:7;28740:8;28737:21;28729:270;;;28809:4;28805:1;28801:6;28797:17;28791:4;28788:27;28785:53;;;28818:18;;:::i;:::-;28868:7;28858:8;28854:22;28851:55;;;28888:16;;;;28851:55;28967:22;;;;28927:15;;;;28729:270;;;28733:3;28583:422;;;;;:::o;29010:806::-;29059:5;29089:8;29079:80;;-1:-1:-1;29130:1:17;29144:5;;29079:80;29178:4;29168:76;;-1:-1:-1;29215:1:17;29229:5;;29168:76;29260:4;29278:1;29273:59;;;;29346:1;29341:130;;;;29253:218;;29273:59;29303:1;29294:10;;29317:5;;;29341:130;29378:3;29368:8;29365:17;29362:43;;;29385:18;;:::i;:::-;-1:-1:-1;;29441:1:17;29427:16;;29456:5;;29253:218;;29555:2;29545:8;29542:16;29536:3;29530:4;29527:13;29523:36;29517:2;29507:8;29504:16;29499:2;29493:4;29490:12;29486:35;29483:77;29480:159;;;-1:-1:-1;29592:19:17;;;29624:5;;29480:159;29671:34;29696:8;29690:4;29671:34;:::i;:::-;29741:6;29737:1;29733:6;29729:19;29720:7;29717:32;29714:58;;;29752:18;;:::i;:::-;29790:20;;29010:806;-1:-1:-1;;;29010:806:17:o;29821:131::-;29881:5;29910:36;29937:8;29931:4;29910:36;:::i"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "3815800",
            "executionCost": "72776",
            "totalCost": "3888576"
          },
          "external": {
            "addMarketBalance(uint256)": "infinite",
            "checkDealActivation(uint256)": "infinite",
            "getAllActiveContent()": "infinite",
            "getCID(uint256)": "infinite",
            "getContentInfo(uint256)": "infinite",
            "getUserOwnedContent(address)": "infinite",
            "getUserPurchasedContent(address)": "infinite",
            "hasAccess(uint256,address)": "infinite",
            "next_content_id()": "2330",
            "piece_cid_to_content(bytes)": "infinite",
            "platform_fee_percentage()": "2374",
            "platform_owner()": "2406",
            "purchaseAccess(uint256)": "infinite",
            "setPlatformFee(uint256)": "24536",
            "storeContent(bytes,string,uint256,string,string,uint256)": "infinite",
            "stored_content(uint256)": "infinite",
            "updateContentStatus(uint256,uint256,bool)": "51233",
            "updateDealStatus(uint256,uint64)": "28402",
            "user_access(uint256,address)": "6971",
            "user_owned_content(address,uint256)": "4780",
            "user_purchased_content(address,uint256)": "4823",
            "withdrawMarketBalance(uint256)": "infinite",
            "withdrawPlatformFees()": "infinite"
          }
        },
        "methodIdentifiers": {
          "addMarketBalance(uint256)": "67873f42",
          "checkDealActivation(uint256)": "33be97ff",
          "getAllActiveContent()": "fdc9eac3",
          "getCID(uint256)": "913a2ffe",
          "getContentInfo(uint256)": "7509c330",
          "getUserOwnedContent(address)": "3cdee4c6",
          "getUserPurchasedContent(address)": "dd12ceff",
          "hasAccess(uint256,address)": "ced14198",
          "next_content_id()": "317daae8",
          "piece_cid_to_content(bytes)": "90875975",
          "platform_fee_percentage()": "28d0d85d",
          "platform_owner()": "10799582",
          "purchaseAccess(uint256)": "b91d0a2f",
          "setPlatformFee(uint256)": "12e8e2c3",
          "storeContent(bytes,string,uint256,string,string,uint256)": "e4847cf2",
          "stored_content(uint256)": "f096f2c0",
          "updateContentStatus(uint256,uint256,bool)": "692bd51b",
          "updateDealStatus(uint256,uint64)": "16232247",
          "user_access(uint256,address)": "dfd230c8",
          "user_owned_content(address,uint256)": "0adec951",
          "user_purchased_content(address,uint256)": "aad68bdc",
          "withdrawMarketBalance(uint256)": "e4580245",
          "withdrawPlatformFees()": "d0b7830b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ActorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailToCallActor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"InvalidCodec\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidResponseLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NegativeValueNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"content_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AccessPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"content_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data_cid\",\"type\":\"string\"}],\"name\":\"CIDRetrieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"content_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"piece_cid\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data_cid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"ContentStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"content_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"deal_id\",\"type\":\"uint64\"}],\"name\":\"DealActivated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addMarketBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_content_id\",\"type\":\"uint256\"}],\"name\":\"checkDealActivation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveContent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_content_id\",\"type\":\"uint256\"}],\"name\":\"getCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_content_id\",\"type\":\"uint256\"}],\"name\":\"getContentInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"is_active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"created_at\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"deal_id\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"piece_size\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"user_has_access\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserOwnedContent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPurchasedContent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_content_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"next_content_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"piece_cid_to_content\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform_fee_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_content_id\",\"type\":\"uint256\"}],\"name\":\"purchaseAccess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee_percentage\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_piece_cid\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_data_cid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_piece_size\",\"type\":\"uint256\"}],\"name\":\"storeContent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stored_content\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"piece_cid\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"data_cid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"piece_size\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"deal_id\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"is_active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"created_at\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_earnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"access_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_content_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_is_active\",\"type\":\"bool\"}],\"name\":\"updateContentStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_content_id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_deal_id\",\"type\":\"uint64\"}],\"name\":\"updateDealStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_access\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"has_access\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"purchased_at\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires_at\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_owned_content\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_purchased_content\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawMarketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPlatformFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"ActorNotFound()\":[{\"notice\":\"the actor is not found\"}],\"FailToCallActor()\":[{\"notice\":\"an error happened trying to call the actor\"}],\"InvalidCodec(uint64)\":[{\"notice\":\"the codec received is not valid\"}],\"InvalidResponseLength()\":[{\"notice\":\"the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\"}],\"NotEnoughBalance(uint256,uint256)\":[{\"notice\":\"the smart contract has no enough balance to transfer\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FilecoinCIDStore.sol\":\"FilecoinCIDStore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"contracts/FilecoinCIDStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {MarketAPI} from \\\"filecoin-solidity-api/contracts/v0.8/MarketAPI.sol\\\";\\nimport {CommonTypes} from \\\"filecoin-solidity-api/contracts/v0.8/types/CommonTypes.sol\\\";\\nimport {MarketTypes} from \\\"filecoin-solidity-api/contracts/v0.8/types/MarketTypes.sol\\\";\\nimport {FilAddresses} from \\\"filecoin-solidity-api/contracts/v0.8/utils/FilAddresses.sol\\\";\\nimport {BigInts} from \\\"filecoin-solidity-api/contracts/v0.8/utils/BigInts.sol\\\";\\n\\ncontract FilecoinCIDStore {\\n    struct StoredContent {\\n        bytes piece_cid;        // Filecoin piece CID\\n        string data_cid;        // Original data CID\\n        uint256 price;          // Price to access in attoFIL\\n        address owner;          // Content owner\\n        string title;           // Content title\\n        string description;     // Content description\\n        uint256 piece_size;     // Size of the piece\\n        uint64 deal_id;         // Filecoin deal ID (0 if no deal yet)\\n        bool is_active;         // Whether content is active for purchase\\n        uint256 created_at;     // Creation timestamp\\n        uint256 total_earnings; // Total earnings from this content\\n        uint256 access_count;   // Number of times accessed\\n    }\\n\\n    struct UserAccess {\\n        bool has_access;\\n        uint256 purchased_at;\\n        uint256 expires_at;     // Access expiration (365 days)\\n    }\\n\\n    mapping(uint256 => StoredContent) public stored_content;\\n    mapping(uint256 => mapping(address => UserAccess)) public user_access;\\n    mapping(address => uint256[]) public user_owned_content;\\n    mapping(address => uint256[]) public user_purchased_content;\\n    mapping(bytes => uint256) public piece_cid_to_content; // piece CID -> content ID\\n\\n    uint256 public next_content_id = 1;\\n    address public platform_owner;\\n    uint256 public platform_fee_percentage = 5; // 5% platform fee\\n\\n    event ContentStored(\\n        uint256 indexed content_id,\\n        address indexed owner,\\n        bytes piece_cid,\\n        string data_cid,\\n        uint256 price,\\n        string title\\n    );\\n\\n    event AccessPurchased(\\n        uint256 indexed content_id,\\n        address indexed buyer,\\n        address indexed seller,\\n        uint256 price\\n    );\\n\\n    event CIDRetrieved(\\n        uint256 indexed content_id,\\n        address indexed user,\\n        string data_cid\\n    );\\n\\n    event DealActivated(\\n        uint256 indexed content_id,\\n        uint64 deal_id\\n    );\\n\\n    constructor() {\\n        platform_owner = msg.sender;\\n    }\\n\\n    modifier contentExists(uint256 _content_id) {\\n        require(_content_id > 0 && _content_id < next_content_id, \\\"Content does not exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyContentOwner(uint256 _content_id) {\\n        require(stored_content[_content_id].owner == msg.sender, \\\"Only content owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyPlatformOwner() {\\n        require(msg.sender == platform_owner, \\\"Only platform owner\\\");\\n        _;\\n    }\\n\\n    function storeContent(\\n        bytes memory _piece_cid,\\n        string memory _data_cid,\\n        uint256 _price,\\n        string memory _title,\\n        string memory _description,\\n        uint256 _piece_size\\n    ) external returns (uint256) {\\n        require(_piece_cid.length > 0, \\\"Piece CID required\\\");\\n        require(bytes(_data_cid).length > 0, \\\"Data CID required\\\");\\n        require(_price > 0, \\\"Price must be > 0\\\");\\n        require(bytes(_title).length > 0, \\\"Title required\\\");\\n        require(_piece_size > 0, \\\"Piece size must be > 0\\\");\\n\\n        uint256 content_id = next_content_id++;\\n\\n        stored_content[content_id] = StoredContent({\\n            piece_cid: _piece_cid,\\n            data_cid: _data_cid,\\n            price: _price,\\n            owner: msg.sender,\\n            title: _title,\\n            description: _description,\\n            piece_size: _piece_size,\\n            deal_id: 0, // No deal initially\\n            is_active: true,\\n            created_at: block.timestamp,\\n            total_earnings: 0,\\n            access_count: 0\\n        });\\n\\n        user_owned_content[msg.sender].push(content_id);\\n        piece_cid_to_content[_piece_cid] = content_id;\\n\\n        emit ContentStored(content_id, msg.sender, _piece_cid, _data_cid, _price, _title);\\n        return content_id;\\n    }\\n\\n    function purchaseAccess(uint256 _content_id) external payable contentExists(_content_id) {\\n        StoredContent storage content = stored_content[_content_id];\\n        require(content.is_active, \\\"Content not active\\\");\\n        require(msg.value >= content.price, \\\"Insufficient payment\\\");\\n        require(msg.sender != content.owner, \\\"Owner cannot purchase own content\\\");\\n        require(!user_access[_content_id][msg.sender].has_access, \\\"Already has access\\\");\\n\\n        uint256 platform_fee = (msg.value * platform_fee_percentage) / 100;\\n        uint256 owner_payment = msg.value - platform_fee;\\n\\n        // Grant access to user (1 year)\\n        user_access[_content_id][msg.sender] = UserAccess({\\n            has_access: true,\\n            purchased_at: block.timestamp,\\n            expires_at: block.timestamp + 365 days\\n        });\\n\\n        // Update content stats\\n        content.total_earnings += msg.value;\\n        content.access_count++;\\n\\n        // Add to user's purchased content\\n        user_purchased_content[msg.sender].push(_content_id);\\n\\n        // Transfer payments\\n        payable(content.owner).transfer(owner_payment);\\n        if (platform_fee > 0) {\\n            payable(platform_owner).transfer(platform_fee);\\n        }\\n\\n        emit AccessPurchased(_content_id, msg.sender, content.owner, msg.value);\\n    }\\n\\n    function getCID(uint256 _content_id) external contentExists(_content_id) returns (string memory) {\\n        StoredContent storage content = stored_content[_content_id];\\n        require(content.is_active, \\\"Content not active\\\");\\n\\n        // Owner can always access\\n        if (msg.sender == content.owner) {\\n            emit CIDRetrieved(_content_id, msg.sender, content.data_cid);\\n            return content.data_cid;\\n        }\\n\\n        // Check if user has valid access\\n        UserAccess memory access = user_access[_content_id][msg.sender];\\n        require(access.has_access, \\\"Purchase required to access CID\\\");\\n        require(block.timestamp <= access.expires_at, \\\"Access expired\\\");\\n\\n        emit CIDRetrieved(_content_id, msg.sender, content.data_cid);\\n        return content.data_cid;\\n    }\\n\\n    function hasAccess(uint256 _content_id, address _user) external view contentExists(_content_id) returns (bool) {\\n        StoredContent memory content = stored_content[_content_id];\\n\\n        // Owner always has access\\n        if (_user == content.owner) {\\n            return true;\\n        }\\n\\n        UserAccess memory access = user_access[_content_id][_user];\\n        return access.has_access && block.timestamp <= access.expires_at;\\n    }\\n\\n    function updateDealStatus(uint256 _content_id, uint64 _deal_id) external onlyContentOwner(_content_id) {\\n        require(_deal_id > 0, \\\"Invalid deal ID\\\");\\n\\n        StoredContent storage content = stored_content[_content_id];\\n        content.deal_id = _deal_id;\\n\\n        emit DealActivated(_content_id, _deal_id);\\n    }\\n\\n    function checkDealActivation(uint256 _content_id) external view contentExists(_content_id) returns (bool) {\\n        StoredContent memory content = stored_content[_content_id];\\n\\n        if (content.deal_id == 0) {\\n            return false; // No deal created yet\\n        }\\n\\n        // Check deal activation status from Filecoin network\\n        (int256 exit_code, MarketTypes.GetDealActivationReturn memory ret) = MarketAPI\\n            .getDealActivation(content.deal_id);\\n\\n        if (exit_code != 0) {\\n            return false;\\n        }\\n\\n        // Check if deal is activated and not terminated\\n        return (CommonTypes.ChainEpoch.unwrap(ret.activated) > 0) &&\\n               (CommonTypes.ChainEpoch.unwrap(ret.terminated) == 0);\\n    }\\n\\n    function getContentInfo(uint256 _content_id) external view contentExists(_content_id) returns (\\n        string memory title,\\n        string memory description,\\n        uint256 price,\\n        address owner,\\n        bool is_active,\\n        uint256 created_at,\\n        uint64 deal_id,\\n        uint256 piece_size,\\n        bool user_has_access\\n    ) {\\n        StoredContent memory content = stored_content[_content_id];\\n        bool has_access = (msg.sender == content.owner) ||\\n                         (user_access[_content_id][msg.sender].has_access &&\\n                          block.timestamp <= user_access[_content_id][msg.sender].expires_at);\\n\\n        return (\\n            content.title,\\n            content.description,\\n            content.price,\\n            content.owner,\\n            content.is_active,\\n            content.created_at,\\n            content.deal_id,\\n            content.piece_size,\\n            has_access\\n        );\\n    }\\n\\n    function getUserOwnedContent(address _user) external view returns (uint256[] memory) {\\n        return user_owned_content[_user];\\n    }\\n\\n    function getUserPurchasedContent(address _user) external view returns (uint256[] memory) {\\n        return user_purchased_content[_user];\\n    }\\n\\n    function getAllActiveContent() external view returns (uint256[] memory) {\\n        uint256[] memory active_content = new uint256[](next_content_id - 1);\\n        uint256 count = 0;\\n\\n        for (uint256 i = 1; i < next_content_id; i++) {\\n            if (stored_content[i].is_active) {\\n                active_content[count] = i;\\n                count++;\\n            }\\n        }\\n\\n        // Resize array to actual count\\n        uint256[] memory result = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            result[i] = active_content[i];\\n        }\\n\\n        return result;\\n    }\\n\\n    function updateContentStatus(\\n        uint256 _content_id,\\n        uint256 _new_price,\\n        bool _is_active\\n    ) external contentExists(_content_id) onlyContentOwner(_content_id) {\\n        require(_new_price > 0, \\\"Price must be > 0\\\");\\n\\n        StoredContent storage content = stored_content[_content_id];\\n        content.price = _new_price;\\n        content.is_active = _is_active;\\n    }\\n\\n    function setPlatformFee(uint256 _fee_percentage) external onlyPlatformOwner {\\n        require(_fee_percentage <= 20, \\\"Fee too high (max 20%)\\\");\\n        platform_fee_percentage = _fee_percentage;\\n    }\\n\\n    function withdrawPlatformFees() external onlyPlatformOwner {\\n        payable(platform_owner).transfer(address(this).balance);\\n    }\\n\\n    // Add balance to Filecoin market escrow for making deals\\n    function addMarketBalance(uint256 _value) external onlyPlatformOwner {\\n        MarketAPI.addBalance(FilAddresses.fromEthAddress(address(this)), _value);\\n    }\\n\\n    // Withdraw from Filecoin market escrow\\n    function withdrawMarketBalance(uint256 _value) external onlyPlatformOwner returns (uint256) {\\n        MarketTypes.WithdrawBalanceParams memory params = MarketTypes.WithdrawBalanceParams(\\n            FilAddresses.fromEthAddress(address(this)),\\n            BigInts.fromUint256(_value)\\n        );\\n        (int256 exit_code, CommonTypes.BigInt memory ret) = MarketAPI.withdrawBalance(params);\\n        require(exit_code == 0, \\\"Withdraw failed\\\");\\n\\n        (uint256 withdrawn_amount, bool converted) = BigInts.toUint256(ret);\\n        require(converted, \\\"Conversion failed\\\");\\n\\n        return withdrawn_amount;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x05f60d6eecd55815ea5e9d9ea6144d0b6b7d728cb52a9a24130e17ca72542e27\",\"license\":\"MIT\"},\"filecoin-solidity-api/contracts/v0.8/MarketAPI.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./types/MarketTypes.sol\\\";\\nimport \\\"./cbor/MarketCbor.sol\\\";\\nimport \\\"./cbor/BytesCbor.sol\\\";\\nimport \\\"./cbor/FilecoinCbor.sol\\\";\\n\\nimport \\\"./types/CommonTypes.sol\\\";\\nimport \\\"./utils/Misc.sol\\\";\\nimport \\\"./utils/Actor.sol\\\";\\n\\n/// @title This library is a proxy to the singleton Storage Market actor (address: f05). Calling one of its methods will result in a cross-actor call being performed.\\n/// @author Zondax AG\\nlibrary MarketAPI {\\n    using BytesCBOR for bytes;\\n    using MarketCBOR for *;\\n    using FilecoinCBOR for *;\\n\\n    /// @notice Deposits the received value into the balance held in escrow.\\n    /// @param providerOrClient address that will have its escrow balance increased\\n    /// @param value amount of funds to be added to the escrow balance\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return data (must be of length 0)\\n    function addBalance(CommonTypes.FilAddress memory providerOrClient, uint256 value) internal returns (int256, bytes memory) {\\n        bytes memory raw_request = providerOrClient.serializeAddress();\\n\\n        (int256 exit_code, bytes memory data) = Actor.callByID(\\n            MarketTypes.ActorID,\\n            MarketTypes.AddBalanceMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request,\\n            value,\\n            false\\n        );\\n        if (data.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n\\n        return (exit_code, data);\\n    }\\n\\n    /// @notice Attempt to withdraw the specified amount from the balance held in escrow.\\n    /// @notice If less than the specified amount is available, yields the entire available balance.\\n    /// @param params `provider_or_client` address, `tokenAmount` to be withdrawn\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return amount that has been withdrawn\\n    function withdrawBalance(MarketTypes.WithdrawBalanceParams memory params) internal returns (int256, CommonTypes.BigInt memory) {\\n        bytes memory raw_request = params.serializeWithdrawBalanceParams();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByID(\\n            MarketTypes.ActorID,\\n            MarketTypes.WithdrawBalanceMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request,\\n            0,\\n            false\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeBytesBigInt());\\n        }\\n\\n        CommonTypes.BigInt memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Return the escrow balance and locked amount for an address.\\n    /// @param addr filecoin address for which escrow balance/locked amount will be queried\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the escrow balance and locked amount for an address.\\n    function getBalance(CommonTypes.FilAddress memory addr) internal view returns (int256, MarketTypes.GetBalanceReturn memory) {\\n        bytes memory raw_request = addr.serializeAddress();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(MarketTypes.ActorID, MarketTypes.GetBalanceMethodNum, Misc.CBOR_CODEC, raw_request);\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeGetBalanceReturn());\\n        }\\n\\n        MarketTypes.GetBalanceReturn memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice This will be available after the deal is published (whether or not is is activated) and up until some undefined period after it is terminated.\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the data commitment and size of a deal proposal.\\n    function getDealDataCommitment(uint64 dealID) internal view returns (int256, MarketTypes.GetDealDataCommitmentReturn memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealDataCommitmentMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeGetDealDataCommitmentReturn());\\n        }\\n\\n        MarketTypes.GetDealDataCommitmentReturn memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the client for the specified deal\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the client of a deal proposal.\\n    function getDealClient(uint64 dealID) internal view returns (int256, uint64) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(MarketTypes.ActorID, MarketTypes.GetDealClientMethodNum, Misc.CBOR_CODEC, raw_request);\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeUint64());\\n        }\\n\\n        uint64 empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the provider for a specified deal\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the provider of a deal proposal.\\n    function getDealProvider(uint64 dealID) internal view returns (int256, uint64) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealProviderMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeUint64());\\n        }\\n\\n        uint64 empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the label of a storage deal\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the label of a deal\\n    function getDealLabel(uint64 dealID) internal view returns (int256, CommonTypes.DealLabel memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(MarketTypes.ActorID, MarketTypes.GetDealLabelMethodNum, Misc.CBOR_CODEC, raw_request);\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeDealLabel());\\n        }\\n\\n        CommonTypes.DealLabel memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the start epoch and duration(in epochs) of a deal proposal.\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the start epoch and duration (in epochs) of a deal proposal.\\n    function getDealTerm(uint64 dealID) internal view returns (int256, MarketTypes.GetDealTermReturn memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(MarketTypes.ActorID, MarketTypes.GetDealTermMethodNum, Misc.CBOR_CODEC, raw_request);\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeGetDealTermReturn());\\n        }\\n\\n        MarketTypes.GetDealTermReturn memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the total price that will be paid from the client to the provider for this deal.\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the per-epoch price of a deal\\n    function getDealTotalPrice(uint64 dealID) internal view returns (int256, CommonTypes.BigInt memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealTotalPriceMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeBytesBigInt());\\n        }\\n\\n        CommonTypes.BigInt memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice get the client collateral requirement for a deal\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the client collateral requirement for a deal\\n    function getDealClientCollateral(uint64 dealID) internal view returns (int256, CommonTypes.BigInt memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealClientCollateralMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeBytesBigInt());\\n        }\\n\\n        CommonTypes.BigInt memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the provider's collateral requirement for a deal\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the provider collateral requirement for a deal\\n    function getDealProviderCollateral(uint64 dealID) internal view returns (int256, CommonTypes.BigInt memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealProviderCollateralMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeBytesBigInt());\\n        }\\n\\n        CommonTypes.BigInt memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the verified flag for a deal\\n    /// @notice Note that the source of truth for verified allocations and claims is the verified registry actor.\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the verified flag for a deal\\n    function getDealVerified(uint64 dealID) internal view returns (int256, bool) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealVerifiedMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeBool());\\n        }\\n\\n        bool empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Fetches activation state for a deal.\\n    /// @notice This will be available from when the proposal is published until an undefined period after the deal finishes (either normally or by termination).\\n    /// @return USR_NOT_FOUND if the deal doesn't exist (yet), or EX_DEAL_EXPIRED if the deal has been removed from state.\\n    function getDealActivation(uint64 dealID) internal view returns (int256, MarketTypes.GetDealActivationReturn memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealActivationMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeGetDealActivationReturn());\\n        }\\n\\n        MarketTypes.GetDealActivationReturn memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Publish a new set of storage deals (not yet included in a sector).\\n    /// @param params arrays of deals (with their proposals, signatures, etc.)\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return ids of the published deals\\n    function publishStorageDeals(MarketTypes.PublishStorageDealsParams memory params) internal returns (int256, MarketTypes.PublishStorageDealsReturn memory) {\\n        bytes memory raw_request = params.serializePublishStorageDealsParams();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByID(\\n            MarketTypes.ActorID,\\n            MarketTypes.PublishStorageDealsMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request,\\n            0,\\n            false\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializePublishStorageDealsReturn());\\n        }\\n\\n        MarketTypes.PublishStorageDealsReturn memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n}\\n\",\"keccak256\":\"0xaf6d5df9974a85cd1270cde54cf699d91c4039939fa4efe0d916791243e66c91\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/cbor/BigIntCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for BigInt type\\n/// @author Zondax AG\\nlibrary BigIntCBOR {\\n    /// @notice serialize BigInt instance to bytes\\n    /// @param num BigInt instance to serialize\\n    /// @return serialized BigInt as bytes\\n    function serializeBigInt(CommonTypes.BigInt memory num) internal pure returns (bytes memory) {\\n        bytes memory raw = new bytes(num.val.length + 1);\\n\\n        raw[0] = num.neg == true ? bytes1(0x01) : bytes1(0x00);\\n\\n        uint index = 1;\\n        for (uint i = 0; i < num.val.length; i++) {\\n            raw[index] = num.val[i];\\n            index++;\\n        }\\n\\n        return raw;\\n    }\\n\\n    /// @notice deserialize big int (encoded as bytes) to BigInt instance\\n    /// @param raw as bytes to parse\\n    /// @return parsed BigInt instance\\n    function deserializeBigInt(bytes memory raw) internal pure returns (CommonTypes.BigInt memory) {\\n        if (raw.length == 0) {\\n            return CommonTypes.BigInt(hex\\\"00\\\", false);\\n        }\\n\\n        bytes memory val = new bytes(raw.length - 1);\\n        bool neg = false;\\n\\n        if (raw[0] == 0x01) {\\n            neg = true;\\n        }\\n\\n        for (uint i = 1; i < raw.length; i++) {\\n            val[i - 1] = raw[i];\\n        }\\n\\n        return CommonTypes.BigInt(val, neg);\\n    }\\n}\\n\",\"keccak256\":\"0xbe9eb7f33f943e12a2ca6d8a02178c30cef91f8c9db1c1b50f88a77e31784ac4\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/cbor/BytesCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"./BigIntCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for bytes\\n/// @author Zondax AG\\nlibrary BytesCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n    using BigIntCBOR for bytes;\\n\\n    /// @notice serialize raw bytes as cbor bytes string encoded\\n    /// @param data raw data in bytes\\n    /// @return encoded cbor bytes\\n    function serializeBytes(bytes memory data) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getBytesSize(data);\\n\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeBytes(data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize raw address (in bytes) as cbor bytes string encoded (how an address is passed to filecoin actors)\\n    /// @param addr raw address in bytes\\n    /// @return encoded address as cbor bytes\\n    function serializeAddress(bytes memory addr) internal pure returns (bytes memory) {\\n        return serializeBytes(addr);\\n    }\\n\\n    /// @notice encoded null value as cbor\\n    /// @return cbor encoded null\\n    function serializeNull() internal pure returns (bytes memory) {\\n        CBOR.CBORBuffer memory buf = CBOR.create(1);\\n\\n        buf.writeNull();\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize cbor encoded filecoin address to bytes\\n    /// @param ret cbor encoded filecoin address\\n    /// @return raw bytes representing a filecoin address\\n    function deserializeAddress(bytes memory ret) internal pure returns (bytes memory) {\\n        bytes memory addr;\\n        uint byteIdx = 0;\\n\\n        (addr, byteIdx) = ret.readBytes(byteIdx);\\n\\n        return addr;\\n    }\\n\\n    /// @notice deserialize cbor encoded string\\n    /// @param ret cbor encoded string (in bytes)\\n    /// @return decoded string\\n    function deserializeString(bytes memory ret) internal pure returns (string memory) {\\n        string memory response;\\n        uint byteIdx = 0;\\n\\n        (response, byteIdx) = ret.readString(byteIdx);\\n\\n        return response;\\n    }\\n\\n    /// @notice deserialize cbor encoded bool\\n    /// @param ret cbor encoded bool (in bytes)\\n    /// @return decoded bool\\n    function deserializeBool(bytes memory ret) internal pure returns (bool) {\\n        bool response;\\n        uint byteIdx = 0;\\n\\n        (response, byteIdx) = ret.readBool(byteIdx);\\n\\n        return response;\\n    }\\n\\n    /// @notice deserialize cbor encoded BigInt\\n    /// @param ret cbor encoded BigInt (in bytes)\\n    /// @return decoded BigInt\\n    /// @dev BigInts are cbor encoded as bytes string first. That is why it unwraps the cbor encoded bytes first, and then parse the result into BigInt\\n    function deserializeBytesBigInt(bytes memory ret) internal pure returns (CommonTypes.BigInt memory) {\\n        bytes memory tmp;\\n        uint byteIdx = 0;\\n\\n        if (ret.length > 0) {\\n            (tmp, byteIdx) = ret.readBytes(byteIdx);\\n            if (tmp.length > 0) {\\n                return tmp.deserializeBigInt();\\n            }\\n        }\\n\\n        return CommonTypes.BigInt(new bytes(0), false);\\n    }\\n\\n    /// @notice deserialize cbor encoded uint64\\n    /// @param rawResp cbor encoded uint64 (in bytes)\\n    /// @return decoded uint64\\n    function deserializeUint64(bytes memory rawResp) internal pure returns (uint64) {\\n        uint byteIdx = 0;\\n        uint64 value;\\n\\n        (value, byteIdx) = rawResp.readUInt64(byteIdx);\\n        return value;\\n    }\\n\\n    /// @notice deserialize cbor encoded int64\\n    /// @param rawResp cbor encoded int64 (in bytes)\\n    /// @return decoded int64\\n    function deserializeInt64(bytes memory rawResp) internal pure returns (int64) {\\n        uint byteIdx = 0;\\n        int64 value;\\n\\n        (value, byteIdx) = rawResp.readInt64(byteIdx);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0x092be34452eead511a33e8d5c0a0878bf53ac5747ada8788099a81bdf888eccf\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/cbor/FilecoinCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for general data types on the filecoin network.\\n/// @author Zondax AG\\nlibrary FilecoinCBOR {\\n    using Buffer for Buffer.buffer;\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for *;\\n    using BigIntCBOR for *;\\n\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant TAG_TYPE_CID_CODE = 42;\\n    uint8 private constant PAYLOAD_LEN_8_BITS = 24;\\n\\n    /// @notice Write a CID into a CBOR buffer.\\n    /// @dev The CBOR major will be 6 (type 'tag') and the tag type value is 42, as per CBOR tag assignments.\\n    /// @dev https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml\\n    /// @param buf buffer containing the actual CBOR serialization process\\n    /// @param value CID value to serialize as CBOR\\n    function writeCid(CBOR.CBORBuffer memory buf, bytes memory value) internal pure {\\n        buf.buf.appendUint8(uint8(((MAJOR_TYPE_TAG << 5) | PAYLOAD_LEN_8_BITS)));\\n        buf.buf.appendUint8(TAG_TYPE_CID_CODE);\\n        // See https://ipld.io/specs/codecs/dag-cbor/spec/#links for explanation on 0x00 prefix.\\n        buf.writeBytes(bytes.concat(hex'00', value));\\n    }\\n\\n    function readCid(bytes memory cborData, uint byteIdx) internal pure returns (CommonTypes.Cid memory, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = cborData.parseCborHeader(byteIdx);\\n        require(maj == MAJOR_TYPE_TAG, \\\"expected major type tag when parsing cid\\\");\\n        require(value == TAG_TYPE_CID_CODE, \\\"expected tag 42 when parsing cid\\\");\\n\\n        bytes memory raw;\\n        (raw, byteIdx) = cborData.readBytes(byteIdx);\\n        require(raw[0] == 0x00, \\\"expected first byte to be 0 when parsing cid\\\");\\n\\n        // Pop off the first byte, which corresponds to the historical multibase 0x00 byte.\\n        // https://ipld.io/specs/codecs/dag-cbor/spec/#links\\n        CommonTypes.Cid memory ret;\\n        ret.data = new bytes(raw.length - 1);\\n        for (uint256 i = 1; i < raw.length; i++) {\\n            ret.data[i-1] = raw[i];\\n        }\\n\\n        return (ret, byteIdx);\\n    }\\n\\n    /// @notice serialize filecoin address to cbor encoded\\n    /// @param addr filecoin address to serialize\\n    /// @return cbor serialized data as bytes\\n    function serializeAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getBytesSize(addr.data);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeBytes(addr.data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize a BigInt value wrapped in a cbor fixed array.\\n    /// @param value BigInt to serialize as cbor inside an\\n    /// @return cbor serialized data as bytes\\n    function serializeArrayBigInt(CommonTypes.BigInt memory value) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory valueBigInt = value.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getBytesSize(valueBigInt);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.writeBytes(value.serializeBigInt());\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize a FilAddress value wrapped in a cbor fixed array.\\n    /// @param addr FilAddress to serialize as cbor inside an\\n    /// @return cbor serialized data as bytes\\n    function serializeArrayFilAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getBytesSize(addr.data);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.writeBytes(addr.data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize a FilAddress wrapped on a cbor fixed array coming from a actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of FilAddress created based on parsed data\\n    function deserializeArrayFilAddress(bytes memory rawResp) internal pure returns (CommonTypes.FilAddress memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        require(len == 1, \\\"Wrong numbers of parameters (should find 1)\\\");\\n\\n        (ret.data, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize a BigInt wrapped on a cbor fixed array coming from a actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of BigInt created based on parsed data\\n    function deserializeArrayBigInt(bytes memory rawResp) internal pure returns (CommonTypes.BigInt memory) {\\n        uint byteIdx = 0;\\n        uint len;\\n        bytes memory tmp;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 1);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        return tmp.deserializeBigInt();\\n    }\\n\\n    /// @notice serialize UniversalReceiverParams struct to cbor in order to pass as arguments to an actor\\n    /// @param params UniversalReceiverParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeUniversalReceiverParams(CommonTypes.UniversalReceiverParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getPrefixSize(params.type_);\\n        capacity += Misc.getBytesSize(params.payload);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeUInt64(params.type_);\\n        buf.writeBytes(params.payload);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize UniversalReceiverParams cbor to struct when receiving a message\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of UniversalReceiverParams created based on parsed data\\n    function deserializeUniversalReceiverParams(bytes memory rawResp) internal pure returns (CommonTypes.UniversalReceiverParams memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        require(len == 2, \\\"Wrong numbers of parameters (should find 2)\\\");\\n\\n        (ret.type_, byteIdx) = rawResp.readUInt32(byteIdx);\\n        (ret.payload, byteIdx) = rawResp.readBytes(byteIdx);\\n    }\\n\\n    /// @notice attempt to read a FilActorId value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a FilActorId decoded from input bytes and the byte index after moving past the value\\n    function readFilActorId(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.FilActorId, uint) {\\n        uint64 tmp = 0;\\n\\n        (tmp, byteIdx) = rawResp.readUInt64(byteIdx);\\n        return (CommonTypes.FilActorId.wrap(tmp), byteIdx);\\n    }\\n\\n    /// @notice write FilActorId into a cbor buffer\\n    /// @dev FilActorId is just wrapping a uint64\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param id FilActorId to serialize as cbor\\n    function writeFilActorId(CBOR.CBORBuffer memory buf, CommonTypes.FilActorId id) internal pure {\\n        buf.writeUInt64(CommonTypes.FilActorId.unwrap(id));\\n    }\\n\\n    /// @notice attempt to read a ChainEpoch value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a ChainEpoch decoded from input bytes and the byte index after moving past the value\\n    function readChainEpoch(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.ChainEpoch, uint) {\\n        int64 tmp = 0;\\n\\n        (tmp, byteIdx) = rawResp.readInt64(byteIdx);\\n        return (CommonTypes.ChainEpoch.wrap(tmp), byteIdx);\\n    }\\n\\n    /// @notice write ChainEpoch into a cbor buffer\\n    /// @dev ChainEpoch is just wrapping a int64\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param id ChainEpoch to serialize as cbor\\n    function writeChainEpoch(CBOR.CBORBuffer memory buf, CommonTypes.ChainEpoch id) internal pure {\\n        buf.writeInt64(CommonTypes.ChainEpoch.unwrap(id));\\n    }\\n\\n    /// @notice write DealLabel into a cbor buffer\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param label DealLabel to serialize as cbor\\n    function writeDealLabel(CBOR.CBORBuffer memory buf, CommonTypes.DealLabel memory label) internal pure {\\n        label.isString ? buf.writeString(string(label.data)) : buf.writeBytes(label.data);\\n    }\\n\\n    /// @notice deserialize DealLabel cbor to struct when receiving a message\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of DealLabel created based on parsed data\\n    function deserializeDealLabel(bytes memory rawResp) internal pure returns (CommonTypes.DealLabel memory) {\\n        uint byteIdx = 0;\\n        CommonTypes.DealLabel memory label;\\n\\n        (label, byteIdx) = readDealLabel(rawResp, byteIdx);\\n        return label;\\n    }\\n\\n    /// @notice attempt to read a DealLabel value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a DealLabel decoded from input bytes and the byte index after moving past the value\\n    function readDealLabel(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.DealLabel memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = CBORDecoder.parseCborHeader(rawResp, byteIdx);\\n        require(maj == MajByteString || maj == MajTextString, \\\"invalid maj (expected MajByteString or MajTextString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = rawResp[i];\\n            slice_index++;\\n        }\\n\\n        return (CommonTypes.DealLabel(slice, maj == MajTextString), byteIdx + len);\\n    }\\n}\\n\",\"keccak256\":\"0x9c73c2969df5325f1f86c401b05b8983e633e8bd21c1c72b2b9039a731174098\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/cbor/MarketCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"../types/MarketTypes.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"../utils/Misc.sol\\\";\\nimport \\\"../utils/FilAddresses.sol\\\";\\nimport \\\"../utils/CborDecode.sol\\\";\\n\\nimport \\\"./FilecoinCbor.sol\\\";\\nimport \\\"./BigIntCbor.sol\\\";\\nimport \\\"./FilecoinCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR parameters serialization and return values deserialization for Market actor exported methods.\\n/// @author Zondax AG\\nlibrary MarketCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n    using BigIntCBOR for *;\\n    using FilecoinCBOR for *;\\n\\n    /// @notice serialize WithdrawBalanceParams struct to cbor in order to pass as arguments to the market actor\\n    /// @param params WithdrawBalanceParams to serialize as cbor\\n    /// @return response cbor serialized data as bytes\\n    function serializeWithdrawBalanceParams(MarketTypes.WithdrawBalanceParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory tokenAmount = params.tokenAmount.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getBytesSize(params.provider_or_client.data);\\n        capacity += Misc.getBytesSize(tokenAmount);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeBytes(params.provider_or_client.data);\\n        buf.writeBytes(tokenAmount);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize GetBalanceReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetBalanceReturn created based on parsed data\\n    function deserializeGetBalanceReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetBalanceReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n        bytes memory tmp;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.balance = tmp.deserializeBigInt();\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.locked = tmp.deserializeBigInt();\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetDealDataCommitmentReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetDealDataCommitmentReturn created based on parsed data\\n    function deserializeGetDealDataCommitmentReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetDealDataCommitmentReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n\\n        if (len > 0) {\\n            (ret.data, byteIdx) = rawResp.readBytes(byteIdx);\\n            (ret.size, byteIdx) = rawResp.readUInt64(byteIdx);\\n        } else {\\n            ret.data = new bytes(0);\\n            ret.size = 0;\\n        }\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetDealTermReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetDealTermReturn created based on parsed data\\n    function deserializeGetDealTermReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetDealTermReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.start, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n        (ret.duration, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetDealActivationReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetDealActivationReturn created based on parsed data\\n    function deserializeGetDealActivationReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetDealActivationReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.activated, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n        (ret.terminated, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice serialize PublishStorageDealsParams struct to cbor in order to pass as arguments to the market actor\\n    /// @param params PublishStorageDealsParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializePublishStorageDealsParams(MarketTypes.PublishStorageDealsParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getPrefixSize(params.deals.length);\\n\\n        for (uint64 i = 0; i < params.deals.length; i++) {\\n            capacity += Misc.getPrefixSize(2);\\n            capacity += Misc.getPrefixSize(11);\\n\\n            capacity += Misc.getCidSize(params.deals[i].proposal.piece_cid.data);\\n            capacity += Misc.getPrefixSize(params.deals[i].proposal.piece_size);\\n            capacity += Misc.getBoolSize();\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.client.data);\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.provider.data);\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.label.data);\\n            capacity += Misc.getChainEpochSize(params.deals[i].proposal.start_epoch);\\n            capacity += Misc.getChainEpochSize(params.deals[i].proposal.end_epoch);\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.storage_price_per_epoch.serializeBigInt());\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.provider_collateral.serializeBigInt());\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.client_collateral.serializeBigInt());\\n\\n            capacity += Misc.getBytesSize(params.deals[i].client_signature);\\n        }\\n\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.startFixedArray(uint64(params.deals.length));\\n\\n        for (uint64 i = 0; i < params.deals.length; i++) {\\n            buf.startFixedArray(2);\\n\\n            buf.startFixedArray(11);\\n\\n            buf.writeCid(params.deals[i].proposal.piece_cid.data);\\n            buf.writeUInt64(params.deals[i].proposal.piece_size);\\n            buf.writeBool(params.deals[i].proposal.verified_deal);\\n            buf.writeBytes(params.deals[i].proposal.client.data);\\n            buf.writeBytes(params.deals[i].proposal.provider.data);\\n            buf.writeDealLabel(params.deals[i].proposal.label);\\n            buf.writeChainEpoch(params.deals[i].proposal.start_epoch);\\n            buf.writeChainEpoch(params.deals[i].proposal.end_epoch);\\n            buf.writeBytes(params.deals[i].proposal.storage_price_per_epoch.serializeBigInt());\\n            buf.writeBytes(params.deals[i].proposal.provider_collateral.serializeBigInt());\\n            buf.writeBytes(params.deals[i].proposal.client_collateral.serializeBigInt());\\n\\n            buf.writeBytes(params.deals[i].client_signature);\\n        }\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize PublishStorageDealsReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of PublishStorageDealsReturn created based on parsed data\\n    function deserializePublishStorageDealsReturn(bytes memory rawResp) internal pure returns (MarketTypes.PublishStorageDealsReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.ids = new uint64[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (ret.ids[i], byteIdx) = rawResp.readUInt64(byteIdx);\\n        }\\n\\n        (ret.valid_deals, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice serialize deal id (uint64) to cbor in order to pass as arguments to the market actor\\n    /// @param id deal id to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeDealID(uint64 id) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getPrefixSize(uint256(id));\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeUInt64(id);\\n\\n        return buf.data();\\n    }\\n\\n    function deserializeMarketDealNotifyParams(bytes memory rawResp) internal pure returns (MarketTypes.MarketDealNotifyParams memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.dealProposal, byteIdx) = rawResp.readBytes(byteIdx);\\n        (ret.dealId, byteIdx) = rawResp.readUInt64(byteIdx);\\n    }\\n\\n    function serializeDealProposal(MarketTypes.DealProposal memory dealProposal) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory storage_price_per_epoch = dealProposal.storage_price_per_epoch.serializeBigInt();\\n        bytes memory provider_collateral = dealProposal.provider_collateral.serializeBigInt();\\n        bytes memory client_collateral = dealProposal.client_collateral.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(11);\\n        capacity += Misc.getCidSize(dealProposal.piece_cid.data);\\n        capacity += Misc.getPrefixSize(dealProposal.piece_size);\\n        capacity += Misc.getBoolSize();\\n        capacity += Misc.getBytesSize(dealProposal.client.data);\\n        capacity += Misc.getBytesSize(dealProposal.provider.data);\\n        capacity += Misc.getBytesSize(dealProposal.label.data);\\n        capacity += Misc.getChainEpochSize(dealProposal.start_epoch);\\n        capacity += Misc.getChainEpochSize(dealProposal.end_epoch);\\n        capacity += Misc.getBytesSize(storage_price_per_epoch);\\n        capacity += Misc.getBytesSize(provider_collateral);\\n        capacity += Misc.getBytesSize(client_collateral);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(11);\\n\\n        buf.writeCid(dealProposal.piece_cid.data);\\n        buf.writeUInt64(dealProposal.piece_size);\\n        buf.writeBool(dealProposal.verified_deal);\\n        buf.writeBytes(dealProposal.client.data);\\n        buf.writeBytes(dealProposal.provider.data);\\n        buf.writeDealLabel(dealProposal.label);\\n        buf.writeChainEpoch(dealProposal.start_epoch);\\n        buf.writeChainEpoch(dealProposal.end_epoch);\\n        buf.writeBytes(storage_price_per_epoch);\\n        buf.writeBytes(provider_collateral);\\n        buf.writeBytes(client_collateral);\\n\\n        return buf.data();\\n    }\\n\\n    function deserializeDealProposal(bytes memory rawResp) internal pure returns (MarketTypes.DealProposal memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n        bytes memory tmp;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 11);\\n\\n        (ret.piece_cid, byteIdx) = rawResp.readCid(byteIdx);\\n        (ret.piece_size, byteIdx) = rawResp.readUInt64(byteIdx);\\n        (ret.verified_deal, byteIdx) = rawResp.readBool(byteIdx);\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.client = FilAddresses.fromBytes(tmp);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.provider = FilAddresses.fromBytes(tmp);\\n\\n        (ret.label, byteIdx) = rawResp.readDealLabel(byteIdx);\\n\\n        (ret.start_epoch, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n        (ret.end_epoch, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n\\n        bytes memory storage_price_per_epoch_bytes;\\n        (storage_price_per_epoch_bytes, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.storage_price_per_epoch = storage_price_per_epoch_bytes.deserializeBigInt();\\n\\n        bytes memory provider_collateral_bytes;\\n        (provider_collateral_bytes, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.provider_collateral = provider_collateral_bytes.deserializeBigInt();\\n\\n        bytes memory client_collateral_bytes;\\n        (client_collateral_bytes, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.client_collateral = client_collateral_bytes.deserializeBigInt();\\n    }\\n}\\n\",\"keccak256\":\"0x9cf1651b4b4eac52fc6f89f9e903203a7e2d7b4a65035092e871a242fed58a08\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/types/CommonTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n\\n/// @title Filecoin actors' common types for Solidity.\\n/// @author Zondax AG\\nlibrary CommonTypes {\\n    /// @dev Protocol byte values\\n    /// @notice These constants represent the byte value for each protocol.\\n    ///         For more information see the Filecoin documentation: \\n    ///         https://docs.filecoin.io/smart-contracts/filecoin-evm-runtime/address-types\\n    bytes1 constant PROTOCOL_ID = hex\\\"00\\\";\\n    bytes1 constant PROTOCOL_SECP256K1 = hex\\\"01\\\";\\n    bytes1 constant PROTOCOL_ACTOR = hex\\\"02\\\";\\n    bytes1 constant PROTOCOL_BLS = hex\\\"03\\\";\\n    bytes1 constant PROTOCOL_DELEGATED = hex\\\"04\\\";\\n\\n    /// @dev EAM actor ID\\n    /// @notice This constant represents the EAM actor ID.\\n    bytes1 constant EAM_ID = hex\\\"0a\\\";\\n\\n    /// @dev Protocols address lengths\\n    /// @notice These constants represent the address lengths for each protocol.\\n    ///         For more information see the Filecoin specification: \\n    ///         https://spec.filecoin.io/#section-appendix\\n    uint256 constant MIN_PROTOCOL_ID_ADDRESS_LENGTH = 1;\\n    uint256 constant MAX_PROTOCOL_ID_ADDRESS_LENGTH = 11;\\n    uint256 constant PROTOCOL_SECP256K1_ACTOR_ADDRESS_LENGTH = 21; // used for both SECP256K1 and ACTOR\\n    uint256 constant PROTOCOL_BLS_ADDRESS_LENGTH = 49;\\n    uint256 constant PROTOCOL_DELEGATED_EAM_ADDRESS_LENGTH = 22;\\n\\n    /// @dev RecieverHook method number\\n    /// @notice This constant represents the UniversalReceiverHook method number.\\n    uint256 constant UniversalReceiverHookMethodNum = 3726118371;\\n\\n    /// @dev Deal label maximum length in bytes\\n    /// @notice This constant represents the maximum length of a deal label in bytes.\\n    uint256 constant MAX_DEAL_LABEL_LENGTH = 256;\\n\\n    /// @param idx index for the failure in batch\\n    /// @param code failure code\\n    struct FailCode {\\n        uint32 idx;\\n        uint32 code;\\n    }\\n\\n    /// @param success_count total successes in batch\\n    /// @param fail_codes list of failures code and index for each failure in batch\\n    struct BatchReturn {\\n        uint32 success_count;\\n        FailCode[] fail_codes;\\n    }\\n\\n    /// @param type_ asset type\\n    /// @param payload payload corresponding to asset type\\n    struct UniversalReceiverParams {\\n        uint32 type_;\\n        bytes payload;\\n    }\\n\\n    /// @param val contains the actual arbitrary number written as binary\\n    /// @param neg indicates if val is negative or not\\n    struct BigInt {\\n        bytes val;\\n        bool neg;\\n    }\\n\\n    /// @param data filecoin address in bytes format\\n    struct FilAddress {\\n        bytes data;\\n    }\\n\\n    /// @param data cid in bytes format\\n    struct Cid {\\n        bytes data;\\n    }\\n\\n    /// @param data deal proposal label in bytes format (it can be utf8 string or arbitrary bytes string).\\n    /// @param isString indicates if the data is string or raw bytes\\n    struct DealLabel {\\n        bytes data;\\n        bool isString;\\n    }\\n\\n    type FilActorId is uint64;\\n\\n    type ChainEpoch is int64;\\n}\\n\",\"keccak256\":\"0x94cffb55dcfccb2533faab1f573a4e7cf5883bc656044d3c2832ceb2e02d1168\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/types/MarketTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\nimport \\\"./CommonTypes.sol\\\";\\n\\n/// @title Filecoin market actor types for Solidity.\\n/// @author Zondax AG\\nlibrary MarketTypes {\\n    CommonTypes.FilActorId constant ActorID = CommonTypes.FilActorId.wrap(5);\\n    uint constant AddBalanceMethodNum = 822473126;\\n    uint constant WithdrawBalanceMethodNum = 2280458852;\\n    uint constant GetBalanceMethodNum = 726108461;\\n    uint constant GetDealDataCommitmentMethodNum = 1157985802;\\n    uint constant GetDealClientMethodNum = 128053329;\\n    uint constant GetDealProviderMethodNum = 935081690;\\n    uint constant GetDealLabelMethodNum = 46363526;\\n    uint constant GetDealTermMethodNum = 163777312;\\n    uint constant GetDealTotalPriceMethodNum = 4287162428;\\n    uint constant GetDealClientCollateralMethodNum = 200567895;\\n    uint constant GetDealProviderCollateralMethodNum = 2986712137;\\n    uint constant GetDealVerifiedMethodNum = 2627389465;\\n    uint constant GetDealActivationMethodNum = 2567238399;\\n    uint constant PublishStorageDealsMethodNum = 2236929350;\\n\\n    /// @param provider_or_client the address of provider or client.\\n    /// @param tokenAmount the token amount to withdraw.\\n    struct WithdrawBalanceParams {\\n        CommonTypes.FilAddress provider_or_client;\\n        CommonTypes.BigInt tokenAmount;\\n    }\\n\\n    /// @param balance the escrow balance for this address.\\n    /// @param locked the escrow locked amount for this address.\\n    struct GetBalanceReturn {\\n        CommonTypes.BigInt balance;\\n        CommonTypes.BigInt locked;\\n    }\\n\\n    /// @param data the data commitment of this deal.\\n    /// @param size the size of this deal.\\n    struct GetDealDataCommitmentReturn {\\n        bytes data;\\n        uint64 size;\\n    }\\n\\n    /// @param start the chain epoch to start the deal.\\n    /// @param duration the duration of the deal.\\n    struct GetDealTermReturn {\\n        CommonTypes.ChainEpoch start;\\n        CommonTypes.ChainEpoch duration;\\n    }\\n\\n    /// @param activated Epoch at which the deal was activated, or -1.\\n    /// @param terminated Epoch at which the deal was terminated abnormally, or -1.\\n    struct GetDealActivationReturn {\\n        CommonTypes.ChainEpoch activated;\\n        CommonTypes.ChainEpoch terminated;\\n    }\\n\\n    /// @param deals list of deal proposals signed by a client\\n    struct PublishStorageDealsParams {\\n        ClientDealProposal[] deals;\\n    }\\n\\n    /// @param ids returned storage deal IDs.\\n    /// @param valid_deals represent all the valid deals.\\n    struct PublishStorageDealsReturn {\\n        uint64[] ids;\\n        bytes valid_deals;\\n    }\\n\\n    /// @param piece_cid PieceCID.\\n    /// @param piece_size the size of the piece.\\n    /// @param verified_deal if the deal is verified or not.\\n    /// @param client the address of the storage client.\\n    /// @param provider the address of the storage provider.\\n    /// @param label any label that client choose for the deal.\\n    /// @param start_epoch the chain epoch to start the deal.\\n    /// @param end_epoch the chain epoch to end the deal.\\n    /// @param storage_price_per_epoch the token amount to pay to provider per epoch.\\n    /// @param provider_collateral the token amount as collateral paid by the provider.\\n    /// @param client_collateral the token amount as collateral paid by the client.\\n    struct DealProposal {\\n        CommonTypes.Cid piece_cid;\\n        uint64 piece_size;\\n        bool verified_deal;\\n        CommonTypes.FilAddress client;\\n        CommonTypes.FilAddress provider;\\n        CommonTypes.DealLabel label;\\n        CommonTypes.ChainEpoch start_epoch;\\n        CommonTypes.ChainEpoch end_epoch;\\n        CommonTypes.BigInt storage_price_per_epoch;\\n        CommonTypes.BigInt provider_collateral;\\n        CommonTypes.BigInt client_collateral;\\n    }\\n\\n    /// @param proposal Proposal\\n    /// @param client_signature the signature signed by the client.\\n    struct ClientDealProposal {\\n        DealProposal proposal;\\n        bytes client_signature;\\n    }\\n\\n    struct MarketDealNotifyParams {\\n        bytes dealProposal;\\n        uint64 dealId;\\n    }\\n}\\n\",\"keccak256\":\"0xd57cc68c571263899da168822442018a70df5d99398f47325532a529f4b9650b\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/utils/Actor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Misc.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Call actors utilities library, meant to interact with Filecoin builtin actors\\n/// @author Zondax AG\\nlibrary Actor {\\n    /// @notice precompile address for the call_actor precompile\\n    address constant CALL_ACTOR_ADDRESS = 0xfe00000000000000000000000000000000000003;\\n\\n    /// @notice precompile address for the call_actor_id precompile\\n    address constant CALL_ACTOR_ID = 0xfe00000000000000000000000000000000000005;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a static_call to the desired actor\\n    uint64 constant READ_ONLY_FLAG = 0x00000001;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a call to the desired actor\\n    uint64 constant DEFAULT_FLAG = 0x00000000;\\n\\n    /// @notice the provided address is not valid\\n    error InvalidAddress(bytes addr);\\n\\n    /// @notice the smart contract has no enough balance to transfer\\n    error NotEnoughBalance(uint256 balance, uint256 value);\\n\\n    /// @notice the provided actor id is not valid\\n    error InvalidActorID(CommonTypes.FilActorId actorId);\\n\\n    /// @notice an error happened trying to call the actor\\n    error FailToCallActor();\\n\\n    /// @notice the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\\n    error InvalidResponseLength();\\n\\n    /// @notice the codec received is not valid\\n    error InvalidCodec(uint64);\\n\\n    /// @notice the called actor returned an error as part of its expected behaviour\\n    error ActorError(int256 errorCode);\\n\\n    /// @notice the actor is not found\\n    error ActorNotFound();\\n\\n    /// @notice allows to interact with an specific actor by its address (bytes format)\\n    /// @param actor_address actor address (bytes format) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByAddress(\\n        bytes memory actor_address,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (int256, bytes memory) {\\n        if (actor_address.length < 2) {\\n            revert InvalidAddress(actor_address);\\n        }\\n\\n        validatePrecompileCall(CALL_ACTOR_ADDRESS, value);\\n\\n        // We have to delegate-call the call-actor precompile because the call-actor precompile will\\n        // call the target actor on our behalf. This will _not_ delegate to the target `actor_address`.\\n        //\\n        // Specifically:\\n        //\\n        // - `static_call == false`: `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(CALL)-> actor_address\\n        // - `static_call == true`:  `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(STATICCALL)-> actor_address\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ADDRESS).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, actor_address)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to interact with an specific actor by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (int256, bytes memory) {\\n        validatePrecompileCall(CALL_ACTOR_ID, value);\\n\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ID).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, target)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice Readonly version of CallByID\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByIDReadOnly(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request\\n    ) internal view returns (int256, bytes memory) {\\n        function(CommonTypes.FilActorId, uint256, uint64, bytes memory, uint256, bool) internal view returns (int256, bytes memory) callFn;\\n        function(CommonTypes.FilActorId, uint256, uint64, bytes memory, uint256, bool) internal returns (int256, bytes memory) helper = callByID;\\n        assembly {\\n            callFn := helper\\n        }\\n        return callFn(target, method_num, codec, raw_request, 0, true);\\n    }\\n\\n    /// @notice allows to run some generic validations before calling the precompile actor\\n    /// @param addr precompile actor address to run check to\\n    /// @param value tokens to be transferred to the called actor\\n    function validatePrecompileCall(address addr, uint256 value) internal view {\\n        uint balance = address(this).balance;\\n        if (balance < value) {\\n            revert NotEnoughBalance(balance, value);\\n        }\\n\\n        bool actorExists = Misc.addressExists(addr);\\n        if (!actorExists) {\\n            revert ActorNotFound();\\n        }\\n    }\\n\\n    /// @notice allows to interact with an non-singleton actors by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transfered to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\\n    function callNonSingletonByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (int256, bytes memory) {\\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\\n            revert InvalidActorID(target);\\n        }\\n\\n        return callByID(target, method_num, codec, raw_request, value, static_call);\\n    }\\n\\n    /// @notice Readonly version of CallNonSingletonByID\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\\n    function callNonSingletonByIDReadOnly(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request\\n    ) internal view returns (int256, bytes memory) {\\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\\n            revert InvalidActorID(target);\\n        }\\n\\n        return callByIDReadOnly(target, method_num, codec, raw_request);\\n    }\\n\\n    /// @notice parse the response an actor returned\\n    /// @notice it will validate the return code (success) and the codec (valid one)\\n    /// @param raw_response raw data (bytes) the actor returned\\n    /// @return exit code if an error occured, 0 otherwise\\n    /// @return the actual raw data (payload, in bytes) to be parsed according to the actor and method called\\n    function readRespData(bytes memory raw_response) internal pure returns (int256, bytes memory) {\\n        (int256 exit, uint64 return_codec, bytes memory return_value) = abi.decode(raw_response, (int256, uint64, bytes));\\n\\n        if (return_codec == Misc.NONE_CODEC) {\\n            if (return_value.length != 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else if (return_codec == Misc.CBOR_CODEC || return_codec == Misc.DAG_CBOR_CODEC) {\\n            if (return_value.length == 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else {\\n            revert InvalidCodec(return_codec);\\n        }\\n\\n        return (exit, return_value);\\n    }\\n}\\n\",\"keccak256\":\"0x9f76c80beb9a83feee6edeccf0e279858ff43347a53f7089064589e47954c242\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/utils/BigInts.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../vendor/solidity-BigNumber/src/BigNumbers.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\\n/// @author Zondax AG\\nlibrary BigInts {\\n    uint256 constant MAX_UINT = (2 ** 256) - 1;\\n    uint256 constant MAX_INT = ((2 ** 256) / 2) - 1;\\n\\n    error NegativeValueNotAllowed();\\n\\n    /// @notice allow to get a BigInt from a uint256 value\\n    /// @param value uint256 number\\n    /// @return new BigInt\\n    function fromUint256(uint256 value) internal view returns (CommonTypes.BigInt memory) {\\n        BigNumber memory bigNum = BigNumbers.init(value, false);\\n        return CommonTypes.BigInt(bigNum.val, bigNum.neg);\\n    }\\n\\n    /// @notice allow to get a BigInt from a int256 value\\n    /// @param value int256 number\\n    /// @return new BigInt\\n    function fromInt256(int256 value) internal view returns (CommonTypes.BigInt memory) {\\n        uint256 valueAbs = Misc.abs(value);\\n        BigNumber memory bigNum = BigNumbers.init(valueAbs, value < 0);\\n        return CommonTypes.BigInt(bigNum.val, bigNum.neg);\\n    }\\n\\n    /// @notice allow to get a uint256 from a BigInt value.\\n    /// @notice If the value is negative, it will generate an error.\\n    /// @param value BigInt number\\n    /// @return a uint256 value and flog that indicates whether it was possible to convert or not (the value overflows uint256 type)\\n    function toUint256(CommonTypes.BigInt memory value) internal view returns (uint256, bool) {\\n        if (value.neg) {\\n            revert NegativeValueNotAllowed();\\n        }\\n\\n        BigNumber memory max = BigNumbers.init(MAX_UINT, false);\\n        BigNumber memory bigNumValue = BigNumbers.init(value.val, value.neg);\\n        if (BigNumbers.gt(bigNumValue, max)) {\\n            return (0, true);\\n        }\\n\\n        return (uint256(bytes32(bigNumValue.val)), false);\\n    }\\n\\n    /// @notice allow to get a int256 from a BigInt value.\\n    /// @notice If the value is grater than what a int256 can store, it will generate an error.\\n    /// @param value BigInt number\\n    /// @return a int256 value and flog that indicates whether it was possible to convert or not (the value overflows int256 type)\\n    function toInt256(CommonTypes.BigInt memory value) internal view returns (int256, bool) {\\n        BigNumber memory max = BigNumbers.init(MAX_INT, false);\\n        BigNumber memory bigNumValue = BigNumbers.init(value.val, false);\\n        if (BigNumbers.gt(bigNumValue, max)) {\\n            return (0, true);\\n        }\\n\\n        int256 parsedValue = int256(uint256(bytes32(bigNumValue.val)));\\n        return (value.neg ? -1 * parsedValue : parsedValue, false);\\n    }\\n}\\n\",\"keccak256\":\"0xe6621e36ee7d8fa1247c86f4f747f66626dddf7fe4a7dc4aa300d9070ab5a83e\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/utils/CborDecode.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n// \\tMajUnsignedInt = 0\\n// \\tMajSignedInt   = 1\\n// \\tMajByteString  = 2\\n// \\tMajTextString  = 3\\n// \\tMajArray       = 4\\n// \\tMajMap         = 5\\n// \\tMajTag         = 6\\n// \\tMajOther       = 7\\n\\nuint8 constant MajUnsignedInt = 0;\\nuint8 constant MajSignedInt = 1;\\nuint8 constant MajByteString = 2;\\nuint8 constant MajTextString = 3;\\nuint8 constant MajArray = 4;\\nuint8 constant MajMap = 5;\\nuint8 constant MajTag = 6;\\nuint8 constant MajOther = 7;\\n\\nuint8 constant TagTypeBigNum = 2;\\nuint8 constant TagTypeNegativeBigNum = 3;\\n\\nuint8 constant True_Type = 21;\\nuint8 constant False_Type = 20;\\n\\n/// @notice This library is a set a functions that allows anyone to decode cbor encoded bytes\\n/// @dev methods in this library try to read the data type indicated from cbor encoded data stored in bytes at a specific index\\n/// @dev if it successes, methods will return the read value and the new index (intial index plus read bytes)\\n/// @author Zondax AG\\nlibrary CBORDecoder {\\n    /// @notice check if next value on the cbor encoded data is null\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    function isNullNext(bytes memory cborData, uint byteIdx) internal pure returns (bool) {\\n        return cborData[byteIdx] == hex\\\"f6\\\";\\n    }\\n\\n    /// @notice attempt to read a bool value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a bool decoded from input bytes and the byte index after moving past the value\\n    function readBool(bytes memory cborData, uint byteIdx) internal pure returns (bool, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajOther, \\\"invalid maj (expected MajOther)\\\");\\n        assert(value == True_Type || value == False_Type);\\n\\n        return (value != False_Type, byteIdx);\\n    }\\n\\n    /// @notice attempt to read the length of a fixed array\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return length of the fixed array decoded from input bytes and the byte index after moving past the value\\n    function readFixedArray(bytes memory cborData, uint byteIdx) internal pure returns (uint, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajArray, \\\"invalid maj (expected MajArray)\\\");\\n\\n        return (len, byteIdx);\\n    }\\n\\n    /// @notice attempt to read an arbitrary length string value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return arbitrary length string decoded from input bytes and the byte index after moving past the value\\n    function readString(bytes memory cborData, uint byteIdx) internal pure returns (string memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTextString, \\\"invalid maj (expected MajTextString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (string(slice), byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read an arbitrary byte string value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return arbitrary byte string decoded from input bytes and the byte index after moving past the value\\n    function readBytes(bytes memory cborData, uint byteIdx) internal pure returns (bytes memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajByteString, \\\"invalid maj (expected MajTag or MajByteString)\\\");\\n\\n        if (maj == MajTag) {\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            assert(maj == MajByteString);\\n        }\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (slice, byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read a bytes32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a bytes32 decoded from input bytes and the byte index after moving past the value\\n    function readBytes32(bytes memory cborData, uint byteIdx) internal pure returns (bytes32, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(32);\\n        uint slice_index = 32 - len;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (bytes32(slice), byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read a uint256 value encoded per cbor specification\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint256 decoded from input bytes and the byte index after moving past the value\\n    function readUInt256(bytes memory cborData, uint byteIdx) internal pure returns (uint256, uint) {\\n        uint8 maj;\\n        uint256 value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajUnsignedInt, \\\"invalid maj (expected MajTag or MajUnsignedInt)\\\");\\n\\n        if (maj == MajTag) {\\n            require(value == TagTypeBigNum, \\\"invalid tag (expected TagTypeBigNum)\\\");\\n\\n            uint len;\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n            require(cborData.length >= byteIdx + len, \\\"slicing out of range\\\");\\n            assembly {\\n                value := mload(add(cborData, add(len, byteIdx)))\\n            }\\n\\n            return (value, byteIdx + len);\\n        }\\n\\n        return (value, byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int256 value encoded per cbor specification\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int256 decoded from input bytes and the byte index after moving past the value\\n    function readInt256(bytes memory cborData, uint byteIdx) internal pure returns (int256, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajSignedInt, \\\"invalid maj (expected MajTag or MajSignedInt)\\\");\\n\\n        if (maj == MajTag) {\\n            assert(value == TagTypeNegativeBigNum);\\n\\n            uint len;\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n            require(cborData.length >= byteIdx + len, \\\"slicing out of range\\\");\\n            assembly {\\n                value := mload(add(cborData, add(len, byteIdx)))\\n            }\\n\\n            return (int256(value), byteIdx + len);\\n        }\\n\\n        return (int256(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint64 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint64 decoded from input bytes and the byte index after moving past the value\\n    function readUInt64(bytes memory cborData, uint byteIdx) internal pure returns (uint64, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint64(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint32 decoded from input bytes and the byte index after moving past the value\\n    function readUInt32(bytes memory cborData, uint byteIdx) internal pure returns (uint32, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint32(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint16 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint16 decoded from input bytes and the byte index after moving past the value\\n    function readUInt16(bytes memory cborData, uint byteIdx) internal pure returns (uint16, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint16(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint8 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint8 decoded from input bytes and the byte index after moving past the value\\n    function readUInt8(bytes memory cborData, uint byteIdx) internal pure returns (uint8, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint8(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int64 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int64 decoded from input bytes and the byte index after moving past the value\\n    function readInt64(bytes memory cborData, uint byteIdx) internal pure returns (int64, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int64(uint64(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int32 decoded from input bytes and the byte index after moving past the value\\n    function readInt32(bytes memory cborData, uint byteIdx) internal pure returns (int32, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int32(uint32(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int16 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int16 decoded from input bytes and the byte index after moving past the value\\n    function readInt16(bytes memory cborData, uint byteIdx) internal pure returns (int16, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int16(uint16(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int8 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int8 decoded from input bytes and the byte index after moving past the value\\n    function readInt8(bytes memory cborData, uint byteIdx) internal pure returns (int8, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int8(uint8(value)), byteIdx);\\n    }\\n\\n    /// @notice slice uint8 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint8 sliced from bytes\\n    function sliceUInt8(bytes memory bs, uint start) internal pure returns (uint8) {\\n        require(bs.length >= start + 1, \\\"slicing out of range\\\");\\n        return uint8(bs[start]);\\n    }\\n\\n    /// @notice slice uint16 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint16 sliced from bytes\\n    function sliceUInt16(bytes memory bs, uint start) internal pure returns (uint16) {\\n        require(bs.length >= start + 2, \\\"slicing out of range\\\");\\n        bytes2 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint16(x);\\n    }\\n\\n    /// @notice slice uint32 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint32 sliced from bytes\\n    function sliceUInt32(bytes memory bs, uint start) internal pure returns (uint32) {\\n        require(bs.length >= start + 4, \\\"slicing out of range\\\");\\n        bytes4 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint32(x);\\n    }\\n\\n    /// @notice slice uint64 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint64 sliced from bytes\\n    function sliceUInt64(bytes memory bs, uint start) internal pure returns (uint64) {\\n        require(bs.length >= start + 8, \\\"slicing out of range\\\");\\n        bytes8 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint64(x);\\n    }\\n\\n    /// @notice Parse cbor header for major type and extra info.\\n    /// @param cbor cbor encoded bytes to parse from\\n    /// @param byteIndex current position to read on the cbor encoded bytes\\n    /// @return major type, extra info and the byte index after moving past header bytes\\n    function parseCborHeader(bytes memory cbor, uint byteIndex) internal pure returns (uint8, uint64, uint) {\\n        uint8 first = sliceUInt8(cbor, byteIndex);\\n        byteIndex += 1;\\n        uint8 maj = (first & 0xe0) >> 5;\\n        uint8 low = first & 0x1f;\\n        // We don't handle CBOR headers with extra > 27, i.e. no indefinite lengths\\n        require(low < 28, \\\"cannot handle headers with extra > 27\\\");\\n\\n        // extra is lower bits\\n        if (low < 24) {\\n            return (maj, low, byteIndex);\\n        }\\n\\n        // extra in next byte\\n        if (low == 24) {\\n            uint8 next = sliceUInt8(cbor, byteIndex);\\n            byteIndex += 1;\\n            require(next >= 24, \\\"invalid cbor\\\"); // otherwise this is invalid cbor\\n            return (maj, next, byteIndex);\\n        }\\n\\n        // extra in next 2 bytes\\n        if (low == 25) {\\n            uint16 extra16 = sliceUInt16(cbor, byteIndex);\\n            byteIndex += 2;\\n            return (maj, extra16, byteIndex);\\n        }\\n\\n        // extra in next 4 bytes\\n        if (low == 26) {\\n            uint32 extra32 = sliceUInt32(cbor, byteIndex);\\n            byteIndex += 4;\\n            return (maj, extra32, byteIndex);\\n        }\\n\\n        // extra in next 8 bytes\\n        assert(low == 27);\\n        uint64 extra64 = sliceUInt64(cbor, byteIndex);\\n        byteIndex += 8;\\n        return (maj, extra64, byteIndex);\\n    }\\n}\\n\",\"keccak256\":\"0x3babe3c71558c21f0bef9de09088c42b8b148d16d856f84a350b9c43b4da6018\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/utils/FilAddresses.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../utils/Leb128.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\\n/// @author Zondax AG\\nlibrary FilAddresses {\\n    using Buffer for Buffer.buffer;\\n\\n    error InvalidAddress();\\n\\n    /// @notice allow to get a FilAddress from an eth address\\n    /// @param addr eth address to convert\\n    /// @return new filecoin address\\n    function fromEthAddress(address addr) internal pure returns (CommonTypes.FilAddress memory) {\\n        return CommonTypes.FilAddress(abi.encodePacked(CommonTypes.PROTOCOL_DELEGATED, CommonTypes.EAM_ID, addr));\\n    }\\n\\n    /// @notice allow to get a eth address from 040a type FilAddress made above\\n    /// @param addr FilAddress to convert\\n    /// @return new eth address\\n    function toEthAddress(CommonTypes.FilAddress memory addr) internal pure returns (address) {\\n        if (\\n            addr.data[0] != CommonTypes.PROTOCOL_DELEGATED || addr.data[1] != CommonTypes.EAM_ID\\n                || addr.data.length != CommonTypes.PROTOCOL_DELEGATED_EAM_ADDRESS_LENGTH\\n        ) {\\n            revert InvalidAddress();\\n        }\\n        bytes memory filAddress = addr.data;\\n        bytes20 ethAddress;\\n\\n        assembly {\\n            ethAddress := mload(add(filAddress, 0x22))\\n        }\\n\\n        return address(ethAddress);\\n    }\\n\\n    /// @notice allow to create a Filecoin address from an actorID\\n    /// @param actorID uint64 actorID\\n    /// @return address filecoin address\\n    function fromActorID(uint64 actorID) internal pure returns (CommonTypes.FilAddress memory) {\\n        Buffer.buffer memory result = Leb128.encodeUnsignedLeb128FromUInt64(actorID);\\n        return CommonTypes.FilAddress(abi.encodePacked(CommonTypes.PROTOCOL_ID, result.buf));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from bytes\\n    /// @param data address in bytes format\\n    /// @return filecoin address\\n    function fromBytes(bytes memory data) internal pure returns (CommonTypes.FilAddress memory) {\\n        CommonTypes.FilAddress memory newAddr = CommonTypes.FilAddress(data);\\n        if (!validate(newAddr)) {\\n            revert InvalidAddress();\\n        }\\n\\n        return newAddr;\\n    }\\n\\n    /// @notice allow to validate if an address is valid or not\\n    /// @dev we are only validating known address types. If the type is not known, the default value is true\\n    /// @param addr the filecoin address to validate\\n    /// @return whether the address is valid or not\\n    function validate(CommonTypes.FilAddress memory addr) internal pure returns (bool) {\\n        if (addr.data[0] == CommonTypes.PROTOCOL_ID) {\\n            return (\\n                addr.data.length > CommonTypes.MIN_PROTOCOL_ID_ADDRESS_LENGTH\\n                    && addr.data.length <= CommonTypes.MAX_PROTOCOL_ID_ADDRESS_LENGTH\\n            );\\n        } else if (addr.data[0] == CommonTypes.PROTOCOL_SECP256K1 || addr.data[0] == CommonTypes.PROTOCOL_ACTOR) {\\n            return addr.data.length == CommonTypes.PROTOCOL_SECP256K1_ACTOR_ADDRESS_LENGTH;\\n        } else if (addr.data[0] == CommonTypes.PROTOCOL_BLS) {\\n            return addr.data.length == CommonTypes.PROTOCOL_BLS_ADDRESS_LENGTH;\\n        } else if (addr.data[0] == CommonTypes.PROTOCOL_DELEGATED && addr.data[1] == CommonTypes.EAM_ID) {\\n            return addr.data.length == CommonTypes.PROTOCOL_DELEGATED_EAM_ADDRESS_LENGTH;\\n        }\\n\\n        return addr.data.length <= 256;\\n    }\\n}\\n\",\"keccak256\":\"0xc5c2fd7d5aeb5164cdcd8a26b446b62820b782ef0adf2103145aa1979d05a833\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/utils/Leb128.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library implement the leb128\\n/// @author Zondax AG\\nlibrary Leb128 {\\n    using Buffer for Buffer.buffer;\\n\\n    /// @notice encode a unsigned integer 64bits into bytes\\n    /// @param value the actor ID to encode\\n    /// @return result return the value in bytes\\n    function encodeUnsignedLeb128FromUInt64(uint64 value) internal pure returns (Buffer.buffer memory result) {\\n        while (true) {\\n            uint64 byte_ = value & 0x7f;\\n            value >>= 7;\\n            if (value == 0) {\\n                result.appendUint8(uint8(byte_));\\n                return result;\\n            }\\n            result.appendUint8(uint8(byte_ | 0x80));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1f4d71cdc933b0c2ac8eb81d711bf63457ed8e79b748ca9f826d40a3b4f143b\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/v0.8/utils/Misc.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Library containing miscellaneous functions used on the project\\n/// @author Zondax AG\\nlibrary Misc {\\n    /// @notice the codec received is not valid\\n    error InvalidCodec(uint64);\\n\\n    /// @notice filecoin method not handled\\n    error MethodNotHandled(uint64);\\n\\n    uint64 constant DAG_CBOR_CODEC = 0x71;\\n    uint64 constant CBOR_CODEC = 0x51;\\n    uint64 constant NONE_CODEC = 0x00;\\n\\n    // Code taken from Openzeppelin repo\\n    // Link: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0320a718e8e07b1d932f5acb8ad9cec9d9eed99b/contracts/utils/math/SignedMath.sol#L37-L42\\n    /// @notice get the abs from a signed number\\n    /// @param n number to get abs from\\n    /// @return unsigned number\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n\\n    /// @notice validate if an address exists or not\\n    /// @dev read this article for more information https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\\n    /// @param addr address to check\\n    /// @return whether the address exists or not\\n    function addressExists(address addr) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return codehash != 0x0;\\n    }\\n\\n    /// Returns the data size required by CBOR.writeFixedNumeric\\n    function getPrefixSize(uint256 data_size) internal pure returns (uint256) {\\n        if (data_size <= 23) {\\n            return 1;\\n        } else if (data_size <= 0xFF) {\\n            return 2;\\n        } else if (data_size <= 0xFFFF) {\\n            return 3;\\n        } else if (data_size <= 0xFFFFFFFF) {\\n            return 5;\\n        }\\n        return 9;\\n    }\\n\\n    function getBytesSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(value.length) + value.length;\\n    }\\n\\n    function getCidSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(2) + value.length;\\n    }\\n\\n    function getFilActorIdSize(CommonTypes.FilActorId value) internal pure returns (uint256) {\\n        uint64 val = CommonTypes.FilActorId.unwrap(value);\\n        return getPrefixSize(uint256(val));\\n    }\\n\\n    function getChainEpochSize(CommonTypes.ChainEpoch value) internal pure returns (uint256) {\\n        int64 val = CommonTypes.ChainEpoch.unwrap(value);\\n        if (val >= 0) {\\n            return getPrefixSize(uint256(uint64(val)));\\n        } else {\\n            return getPrefixSize(uint256(uint64(-1 - val)));\\n        }\\n    }\\n\\n    function getBoolSize() internal pure returns (uint256) {\\n        return getPrefixSize(1);\\n    }\\n}\\n\",\"keccak256\":\"0x0b18198b270181f65fc27087bcc20484510e96ed2feb58158fe7249b36127934\",\"license\":\"Apache-2.0\"},\"filecoin-solidity-api/contracts/vendor/solidity-BigNumber/src/BigNumbers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title BigNumbers\\n * @dev BigNumbers is a modified version of `github.com/Zondax/solidity-BigNumber/blob/master/src/BigNumbers.sol`, which is licensed under the MIT license.\\n * The code was forked at commit: `39dbb9e2dd186a549c9ad7eb1b4b204dc6705245`\\n * The modifications were made in Ju1y, 2023.\\n */\\n\\n// Definition here allows both the lib and inheriting contracts to use BigNumber directly.\\nstruct BigNumber { \\n    bytes val;\\n    bool neg;\\n    uint bitlen;\\n}\\n\\n/**\\n * @notice BigNumbers library for Solidity.\\n */\\nlibrary BigNumbers {\\n    \\n    /// @notice the value for number 0 of a BigNumber instance.\\n    bytes constant ZERO = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\n    /// @notice the value for number 1 of a BigNumber instance.\\n    bytes constant  ONE = hex\\\"0000000000000000000000000000000000000000000000000000000000000001\\\";\\n    /// @notice the value for number 2 of a BigNumber instance.\\n    bytes constant  TWO = hex\\\"0000000000000000000000000000000000000000000000000000000000000002\\\";\\n\\n    // ***************** BEGIN EXPOSED MANAGEMENT FUNCTIONS ******************\\n    /** @notice verify a BN instance\\n     *  @dev checks if the BN is in the correct format. operations should only be carried out on\\n     *       verified BNs, so it is necessary to call this if your function takes an arbitrary BN\\n     *       as input.\\n     *\\n     *  @param bn BigNumber instance\\n     */\\n    function verify(\\n        BigNumber memory bn\\n    ) internal pure {\\n        uint msword; \\n        bytes memory val = bn.val;\\n        assembly {msword := mload(add(val,0x20))} //get msword of result\\n        if(msword==0) require(isZero(bn));\\n        else require((bn.val.length % 32 == 0) && (msword>>((bn.bitlen%256)-1)==1));\\n    }\\n\\n    /** @notice initialize a BN instance\\n     *  @dev wrapper function for _init. initializes from bytes value.\\n     *       Allows passing bitLength of value. This is NOT verified in the internal function. Only use where bitlen is\\n     *       explicitly known; otherwise use the other init function.\\n     *\\n     *  @param val BN value. may be of any size.\\n     *  @param neg neg whether the BN is +/-\\n     *  @param bitlen bit length of output.\\n     *  @return BigNumber instance\\n     */\\n    function init(\\n        bytes memory val, \\n        bool neg, \\n        uint bitlen\\n    ) internal view returns(BigNumber memory){\\n        return _init(val, neg, bitlen);\\n    }\\n    \\n    /** @notice initialize a BN instance\\n     *  @dev wrapper function for _init. initializes from bytes value.\\n     *\\n     *  @param val BN value. may be of any size.\\n     *  @param neg neg whether the BN is +/-\\n     *  @return BigNumber instance\\n     */\\n    function init(\\n        bytes memory val, \\n        bool neg\\n    ) internal view returns(BigNumber memory){\\n        return _init(val, neg, 0);\\n    }\\n\\n    /** @notice initialize a BN instance\\n     *  @dev wrapper function for _init. initializes from uint value (converts to bytes); \\n     *       tf. resulting BN is in the range -2^256-1 ... 2^256-1.\\n     *\\n     *  @param val uint value.\\n     *  @param neg neg whether the BN is +/-\\n     *  @return BigNumber instance\\n     */\\n    function init(\\n        uint val, \\n        bool neg\\n    ) internal view returns(BigNumber memory){\\n        return _init(abi.encodePacked(val), neg, 0);\\n    }\\n    // ***************** END EXPOSED MANAGEMENT FUNCTIONS ******************\\n\\n\\n\\n\\n    // ***************** BEGIN EXPOSED CORE CALCULATION FUNCTIONS ******************\\n    /** @notice BigNumber addition: a + b.\\n      * @dev add: Initially prepare BigNumbers for addition operation; internally calls actual addition/subtraction,\\n      *           depending on inputs.\\n      *           In order to do correct addition or subtraction we have to handle the sign.\\n      *           This function discovers the sign of the result based on the inputs, and calls the correct operation.\\n      *\\n      * @param a first BN\\n      * @param b second BN\\n      * @return r result  - addition of a and b.\\n      */\\n    function add(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(BigNumber memory r) {\\n        if(a.bitlen==0 && b.bitlen==0) return zero();\\n        if(a.bitlen==0) return b;\\n        if(b.bitlen==0) return a;\\n        bytes memory val;\\n        uint bitlen;\\n        int compare = cmp(a,b,false);\\n\\n        if(a.neg || b.neg){\\n            if(a.neg && b.neg){\\n                if(compare>=0) (val, bitlen) = _add(a.val,b.val,a.bitlen);\\n                else (val, bitlen) = _add(b.val,a.val,b.bitlen);\\n                r.neg = true;\\n            }\\n            else {\\n                if(compare==1){\\n                    (val, bitlen) = _sub(a.val,b.val);\\n                    r.neg = a.neg;\\n                }\\n                else if(compare==-1){\\n                    (val, bitlen) = _sub(b.val,a.val);\\n                    r.neg = !a.neg;\\n                }\\n                else return zero();//one pos and one neg, and same value.\\n            }\\n        }\\n        else{\\n            if(compare>=0){ // a>=b\\n                (val, bitlen) = _add(a.val,b.val,a.bitlen);\\n            }\\n            else {\\n                (val, bitlen) = _add(b.val,a.val,b.bitlen);\\n            }\\n            r.neg = false;\\n        }\\n\\n        r.val = val;\\n        r.bitlen = (bitlen);\\n    }\\n\\n    /** @notice BigNumber subtraction: a - b.\\n      * @dev sub: Initially prepare BigNumbers for subtraction operation; internally calls actual addition/subtraction,\\n                  depending on inputs.\\n      *           In order to do correct addition or subtraction we have to handle the sign.\\n      *           This function discovers the sign of the result based on the inputs, and calls the correct operation.\\n      *\\n      * @param a first BN\\n      * @param b second BN\\n      * @return r result - subtraction of a and b.\\n      */  \\n    function sub(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(BigNumber memory r) {\\n        if(a.bitlen==0 && b.bitlen==0) return zero();\\n        bytes memory val;\\n        int compare;\\n        uint bitlen;\\n        compare = cmp(a,b,false);\\n        if(a.neg || b.neg) {\\n            if(a.neg && b.neg){           \\n                if(compare == 1) { \\n                    (val,bitlen) = _sub(a.val,b.val); \\n                    r.neg = true;\\n                }\\n                else if(compare == -1) { \\n\\n                    (val,bitlen) = _sub(b.val,a.val); \\n                    r.neg = false;\\n                }\\n                else return zero();\\n            }\\n            else {\\n                if(compare >= 0) (val,bitlen) = _add(a.val,b.val,a.bitlen);\\n                else (val,bitlen) = _add(b.val,a.val,b.bitlen);\\n                \\n                r.neg = (a.neg) ? true : false;\\n            }\\n        }\\n        else {\\n            if(compare == 1) {\\n                (val,bitlen) = _sub(a.val,b.val);\\n                r.neg = false;\\n             }\\n            else if(compare == -1) { \\n                (val,bitlen) = _sub(b.val,a.val);\\n                r.neg = true;\\n            }\\n            else return zero(); \\n        }\\n        \\n        r.val = val;\\n        r.bitlen = (bitlen);\\n    }\\n\\n    /** @notice BigNumber multiplication: a * b.\\n      * @dev mul: takes two BigNumbers and multiplys them. Order is irrelevant.\\n      *              multiplication achieved using modexp precompile:\\n      *                 (a * b) = ((a + b)**2 - (a - b)**2) / 4\\n      *\\n      * @param a first BN\\n      * @param b second BN\\n      * @return r result - multiplication of a and b.\\n      */\\n    function mul(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal view returns(BigNumber memory r){\\n            \\n        BigNumber memory lhs = add(a,b);\\n        BigNumber memory fst = modexp(lhs, two(), _powModulus(lhs, 2)); // (a+b)^2\\n        \\n        // no need to do subtraction part of the equation if a == b; if so, it has no effect on final result.\\n        if(!eq(a,b)) {\\n            BigNumber memory rhs = sub(a,b);\\n            BigNumber memory snd = modexp(rhs, two(), _powModulus(rhs, 2)); // (a-b)^2\\n            r = _shr(sub(fst, snd) , 2); // (a * b) = (((a + b)**2 - (a - b)**2) / 4\\n        }\\n        else {\\n            r = _shr(fst, 2); // a==b ? (((a + b)**2 / 4\\n        }\\n    }\\n\\n    /** @notice BigNumber division verification: a * b.\\n      * @dev div: takes three BigNumbers (a,b and result), and verifies that a/b == result.\\n      * Performing BigNumber division on-chain is a significantly expensive operation. As a result, \\n      * we expose the ability to verify the result of a division operation, which is a constant time operation. \\n      *              (a/b = result) == (a = b * result)\\n      *              Integer division only; therefore:\\n      *                verify ((b*result) + (a % (b*result))) == a.\\n      *              eg. 17/7 == 2:\\n      *                verify  (7*2) + (17 % (7*2)) == 17.\\n      * The function returns a bool on successful verification. The require statements will ensure that false can never\\n      *  be returned, however inheriting contracts may also want to put this function inside a require statement.\\n      *  \\n      * @param a first BigNumber\\n      * @param b second BigNumber\\n      * @param r result BigNumber\\n      * @return bool whether or not the operation was verified\\n      */\\n    function divVerify(\\n        BigNumber memory a, \\n        BigNumber memory b, \\n        BigNumber memory r\\n    ) internal view returns(bool) {\\n\\n        // first do zero check.\\n        // if a<b (always zero) and r==zero (input check), return true.\\n        if(cmp(a, b, false) == -1){\\n            require(cmp(zero(), r, false)==0);\\n            return true;\\n        }\\n\\n        // Following zero check:\\n        //if both negative: result positive\\n        //if one negative: result negative\\n        //if neither negative: result positive\\n        bool positiveResult = ( a.neg && b.neg ) || (!a.neg && !b.neg);\\n        require(positiveResult ? !r.neg : r.neg);\\n        \\n        // require denominator to not be zero.\\n        require(!(cmp(b,zero(),true)==0));\\n        \\n        // division result check assumes inputs are positive.\\n        // we have already checked for result sign so this is safe.\\n        bool[3] memory negs = [a.neg, b.neg, r.neg];\\n        a.neg = false;\\n        b.neg = false;\\n        r.neg = false;\\n\\n        // do multiplication (b * r)\\n        BigNumber memory fst = mul(b,r);\\n        // check if we already have 'a' (ie. no remainder after division). if so, no mod necessary, and return true.\\n        if(cmp(fst,a,true)==0) return true;\\n        //a mod (b*r)\\n        BigNumber memory snd = modexp(a,one(),fst); \\n        // ((b*r) + a % (b*r)) == a\\n        require(cmp(add(fst,snd),a,true)==0); \\n\\n        a.neg = negs[0];\\n        b.neg = negs[1];\\n        r.neg = negs[2];\\n\\n        return true;\\n    }\\n\\n    /** @notice BigNumber exponentiation: a ^ b.\\n      * @dev pow: takes a BigNumber and a uint (a,e), and calculates a^e.\\n      * modexp precompile is used to achieve a^e; for this is work, we need to work out the minimum modulus value \\n      * such that the modulus passed to modexp is not used. the result of a^e can never be more than size bitlen(a) * e.\\n      * \\n      * @param a BigNumber\\n      * @param e exponent\\n      * @return r result BigNumber\\n      */\\n    function pow(\\n        BigNumber memory a, \\n        uint e\\n    ) internal view returns(BigNumber memory){\\n        return modexp(a, init(e, false), _powModulus(a, e));\\n    }\\n\\n    /** @notice BigNumber modulus: a % n.\\n      * @dev mod: takes a BigNumber and modulus BigNumber (a,n), and calculates a % n.\\n      * modexp precompile is used to achieve a % n; an exponent of value '1' is passed.\\n      * @param a BigNumber\\n      * @param n modulus BigNumber\\n      * @return r result BigNumber\\n      */\\n    function mod(\\n        BigNumber memory a, \\n        BigNumber memory n\\n    ) internal view returns(BigNumber memory){\\n      return modexp(a,one(),n);\\n    }\\n\\n    /** @notice BigNumber modular exponentiation: a^e mod n.\\n      * @dev modexp: takes base, exponent, and modulus, internally computes base^exponent % modulus using the precompile at address 0x5, and creates new BigNumber.\\n      *              this function is overloaded: it assumes the exponent is positive. if not, the other method is used, whereby the inverse of the base is also passed.\\n      *\\n      * @param a base BigNumber\\n      * @param e exponent BigNumber\\n      * @param n modulus BigNumber\\n      * @return result BigNumber\\n      */    \\n    function modexp(\\n        BigNumber memory a, \\n        BigNumber memory e, \\n        BigNumber memory n\\n    ) internal view returns(BigNumber memory) {\\n        //if exponent is negative, other method with this same name should be used.\\n        //if modulus is negative or zero, we cannot perform the operation.\\n        require(  e.neg==false\\n                && n.neg==false\\n                && !isZero(n.val));\\n\\n        bytes memory _result = _modexp(a.val,e.val,n.val);\\n        //get bitlen of result (TODO: optimise. we know bitlen is in the same byte as the modulus bitlen byte)\\n        uint bitlen = bitLength(_result);\\n        \\n        // if result is 0, immediately return.\\n        if(bitlen == 0) return zero();\\n        // if base is negative AND exponent is odd, base^exp is negative, and tf. result is negative;\\n        // in that case we make the result positive by adding the modulus.\\n        if(a.neg && isOdd(e)) return add(BigNumber(_result, true, bitlen), n);\\n        // in any other case we return the positive result.\\n        return BigNumber(_result, false, bitlen);\\n    }\\n\\n    /** @notice BigNumber modular exponentiation with negative base: inv(a)==a_inv && a_inv^e mod n.\\n    /** @dev modexp: takes base, base inverse, exponent, and modulus, asserts inverse(base)==base inverse, \\n      *              internally computes base_inverse^exponent % modulus and creates new BigNumber.\\n      *              this function is overloaded: it assumes the exponent is negative. \\n      *              if not, the other method is used, where the inverse of the base is not passed.\\n      *\\n      * @param a base BigNumber\\n      * @param ai base inverse BigNumber\\n      * @param e exponent BigNumber\\n      * @param a modulus\\n      * @return BigNumber memory result.\\n      */ \\n    function modexp(\\n        BigNumber memory a, \\n        BigNumber memory ai, \\n        BigNumber memory e, \\n        BigNumber memory n) \\n    internal view returns(BigNumber memory) {\\n        // base^-exp = (base^-1)^exp\\n        require(!a.neg && e.neg);\\n\\n        //if modulus is negative or zero, we cannot perform the operation.\\n        require(!n.neg && !isZero(n.val));\\n\\n        //base_inverse == inverse(base, modulus)\\n        require(modinvVerify(a, n, ai)); \\n            \\n        bytes memory _result = _modexp(ai.val,e.val,n.val);\\n        //get bitlen of result (TODO: optimise. we know bitlen is in the same byte as the modulus bitlen byte)\\n        uint bitlen = bitLength(_result);\\n\\n        // if result is 0, immediately return.\\n        if(bitlen == 0) return zero();\\n        // if base_inverse is negative AND exponent is odd, base_inverse^exp is negative, and tf. result is negative;\\n        // in that case we make the result positive by adding the modulus.\\n        if(ai.neg && isOdd(e)) return add(BigNumber(_result, true, bitlen), n);\\n        // in any other case we return the positive result.\\n        return BigNumber(_result, false, bitlen);\\n    }\\n \\n    /** @notice modular multiplication: (a*b) % n.\\n      * @dev modmul: Takes BigNumbers for a, b, and modulus, and computes (a*b) % modulus\\n      *              We call mul for the two input values, before calling modexp, passing exponent as 1.\\n      *              Sign is taken care of in sub-functions.\\n      *\\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @param n Modulus BigNumber\\n      * @return result BigNumber\\n      */\\n    function modmul(\\n        BigNumber memory a, \\n        BigNumber memory b, \\n        BigNumber memory n) internal view returns(BigNumber memory) {       \\n        return mod(mul(a,b), n);       \\n    }\\n\\n    /** @notice modular inverse verification: Verifies that (a*r) % n == 1.\\n      * @dev modinvVerify: Takes BigNumbers for base, modulus, and result, verifies (base*result)%modulus==1, and returns result.\\n      *              Similar to division, it's far cheaper to verify an inverse operation on-chain than it is to calculate it, so we allow the user to pass their own result.\\n      *\\n      * @param a base BigNumber\\n      * @param n modulus BigNumber\\n      * @param r result BigNumber\\n      * @return boolean result\\n      */\\n    function modinvVerify(\\n        BigNumber memory a, \\n        BigNumber memory n, \\n        BigNumber memory r\\n    ) internal view returns(bool) {\\n        require(!a.neg && !n.neg); //assert positivity of inputs.\\n        /*\\n         * the following proves:\\n         * - user result passed is correct for values base and modulus\\n         * - modular inverse exists for values base and modulus.\\n         * otherwise it fails.\\n         */        \\n        require(cmp(modmul(a, r, n),one(),true)==0);\\n        \\n        return true;\\n    }\\n    // ***************** END EXPOSED CORE CALCULATION FUNCTIONS ******************\\n\\n\\n\\n\\n    // ***************** START EXPOSED HELPER FUNCTIONS ******************\\n    /** @notice BigNumber odd number check\\n      * @dev isOdd: returns 1 if BigNumber value is an odd number and 0 otherwise.\\n      *              \\n      * @param a BigNumber\\n      * @return r Boolean result\\n      */  \\n    function isOdd(\\n        BigNumber memory a\\n    ) internal pure returns(bool r){\\n        assembly{\\n            let a_ptr := add(mload(a), mload(mload(a))) // go to least significant word\\n            r := mod(mload(a_ptr),2)                      // mod it with 2 (returns 0 or 1) \\n        }\\n    }\\n\\n    /** @notice BigNumber comparison\\n      * @dev cmp: Compares BigNumbers a and b. 'signed' parameter indiciates whether to consider the sign of the inputs.\\n      *           'trigger' is used to decide this - \\n      *              if both negative, invert the result; \\n      *              if both positive (or signed==false), trigger has no effect;\\n      *              if differing signs, we return immediately based on input.\\n      *           returns -1 on a<b, 0 on a==b, 1 on a>b.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @param signed whether to consider sign of inputs\\n      * @return int result\\n      */\\n    function cmp(\\n        BigNumber memory a, \\n        BigNumber memory b, \\n        bool signed\\n    ) internal pure returns(int){\\n        int trigger = 1;\\n        if(signed){\\n            if(a.neg && b.neg) trigger = -1;\\n            else if(a.neg==false && b.neg==true) return 1;\\n            else if(a.neg==true && b.neg==false) return -1;\\n        }\\n\\n        if(a.bitlen>b.bitlen) return    trigger;   // 1*trigger\\n        if(b.bitlen>a.bitlen) return -1*trigger;\\n\\n        uint a_ptr;\\n        uint b_ptr;\\n        uint a_word;\\n        uint b_word;\\n\\n        uint len = a.val.length; //bitlen is same so no need to check length.\\n\\n        assembly{\\n            a_ptr := add(mload(a),0x20) \\n            b_ptr := add(mload(b),0x20)\\n        }\\n\\n        for(uint i=0; i<len;i+=32){\\n            assembly{\\n                a_word := mload(add(a_ptr,i))\\n                b_word := mload(add(b_ptr,i))\\n            }\\n\\n            if(a_word>b_word) return    trigger; // 1*trigger\\n            if(b_word>a_word) return -1*trigger; \\n\\n        }\\n\\n        return 0; //same value.\\n    }\\n\\n    /** @notice BigNumber equality\\n      * @dev eq: returns true if a==b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function eq(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==0) ? true : false;\\n    }\\n\\n    /** @notice BigNumber greater than\\n      * @dev eq: returns true if a>b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function gt(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==1) ? true : false;\\n    }\\n\\n    /** @notice BigNumber greater than or equal to\\n      * @dev eq: returns true if a>=b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function gte(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==1 || result==0) ? true : false;\\n    }\\n\\n    /** @notice BigNumber less than\\n      * @dev eq: returns true if a<b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function lt(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==-1) ? true : false;\\n    }\\n\\n    /** @notice BigNumber less than or equal o\\n      * @dev eq: returns true if a<=b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function lte(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==-1 || result==0) ? true : false;\\n    }\\n\\n    /** @notice right shift BigNumber value\\n      * @dev shr: right shift BigNumber a by 'bits' bits.\\n             copies input value to new memory location before shift and calls _shr function after. \\n      * @param a BigNumber value to shift\\n      * @param bits amount of bits to shift by\\n      * @return result BigNumber\\n      */\\n    function shr(\\n        BigNumber memory a, \\n        uint bits\\n    ) internal view returns(BigNumber memory){\\n        require(!a.neg);\\n        return _shr(a, bits);\\n    }\\n\\n    /** @notice right shift BigNumber memory 'dividend' by 'bits' bits.\\n      * @dev _shr: Shifts input value in-place, ie. does not create new memory. shr function does this.\\n      * right shift does not necessarily have to copy into a new memory location. where the user wishes the modify\\n      * the existing value they have in place, they can use this.  \\n      * @param bn value to shift\\n      * @param bits amount of bits to shift by\\n      * @return r result\\n      */\\n    function _shr(BigNumber memory bn, uint bits) internal view returns(BigNumber memory){\\n        uint length;\\n        assembly { length := mload(mload(bn)) }\\n\\n        // if bits is >= the bitlength of the value the result is always 0\\n        if(bits >= bn.bitlen) return BigNumber(ZERO,false,0); \\n        \\n        // set bitlen initially as we will be potentially modifying 'bits'\\n        bn.bitlen = bn.bitlen-(bits);\\n\\n        // handle shifts greater than 256:\\n        // if bits is greater than 256 we can simply remove any trailing words, by altering the BN length. \\n        // we also update 'bits' so that it is now in the range 0..256.\\n        assembly {\\n            if or(gt(bits, 0x100), eq(bits, 0x100)) {\\n                length := sub(length, mul(div(bits, 0x100), 0x20))\\n                mstore(mload(bn), length)\\n                bits := mod(bits, 0x100)\\n            }\\n\\n            // if bits is multiple of 8 (byte size), we can simply use identity precompile for cheap memcopy.\\n            // otherwise we shift each word, starting at the least signifcant word, one-by-one using the mask technique.\\n            // TODO it is possible to do this without the last two operations, see SHL identity copy.\\n            let bn_val_ptr := mload(bn)\\n            switch eq(mod(bits, 8), 0)\\n              case 1 {  \\n                  let bytes_shift := div(bits, 8)\\n                  let in          := mload(bn)\\n                  let inlength    := mload(in)\\n                  let insize      := add(inlength, 0x20)\\n                  let out         := add(in,     bytes_shift)\\n                  let outsize     := sub(insize, bytes_shift)\\n                  let success     := staticcall(450, 0x4, in, insize, out, insize)\\n                  mstore8(add(out, 0x1f), 0) // maintain our BN layout following identity call:\\n                  mstore(in, inlength)         // set current length byte to 0, and reset old length.\\n              }\\n              default {\\n                  let mask\\n                  let lsw\\n                  let mask_shift := sub(0x100, bits)\\n                  let lsw_ptr := add(bn_val_ptr, length)   \\n                  for { let i := length } eq(eq(i,0),0) { i := sub(i, 0x20) } { // for(int i=max_length; i!=0; i-=32)\\n                      switch eq(i,0x20)                                         // if i==32:\\n                          case 1 { mask := 0 }                                  //    - handles lsword: no mask needed.\\n                          default { mask := mload(sub(lsw_ptr,0x20)) }          //    - else get mask (previous word)\\n                      lsw := shr(bits, mload(lsw_ptr))                          // right shift current by bits\\n                      mask := shl(mask_shift, mask)                             // left shift next significant word by mask_shift\\n                      mstore(lsw_ptr, or(lsw,mask))                             // store OR'd mask and shifted bits in-place\\n                      lsw_ptr := sub(lsw_ptr, 0x20)                             // point to next bits.\\n                  }\\n              }\\n\\n            // The following removes the leading word containing all zeroes in the result should it exist, \\n            // as well as updating lengths and pointers as necessary.\\n            let msw_ptr := add(bn_val_ptr,0x20)\\n            switch eq(mload(msw_ptr), 0) \\n                case 1 {\\n                   mstore(msw_ptr, sub(mload(bn_val_ptr), 0x20)) // store new length in new position\\n                   mstore(bn, msw_ptr)                           // update pointer from bn\\n                }\\n                default {}\\n        }\\n    \\n\\n        return bn;\\n    }\\n\\n    /** @notice left shift BigNumber value\\n      * @dev shr: left shift BigNumber a by 'bits' bits.\\n                  ensures the value is not negative before calling the private function.\\n      * @param a BigNumber value to shift\\n      * @param bits amount of bits to shift by\\n      * @return result BigNumber\\n      */\\n    function shl(\\n        BigNumber memory a, \\n        uint bits\\n    ) internal view returns(BigNumber memory){\\n        require(!a.neg);\\n        return _shl(a, bits);\\n    }\\n\\n    /** @notice sha3 hash a BigNumber.\\n      * @dev hash: takes a BigNumber and performs sha3 hash on it.\\n      *            we hash each BigNumber WITHOUT it's first word - first word is a pointer to the start of the bytes value,\\n      *            and so is different for each struct.\\n      *             \\n      * @param a BigNumber\\n      * @return h bytes32 hash.\\n      */\\n    function hash(\\n        BigNumber memory a\\n    ) internal pure returns(bytes32 h) {\\n        //amount of words to hash = all words of the value and three extra words: neg, bitlen & value length.     \\n        assembly {\\n            h := keccak256( add(a,0x20), add (mload(mload(a)), 0x60 ) ) \\n        }\\n    }\\n\\n    /** @notice BigNumber full zero check\\n      * @dev isZero: checks if the BigNumber is in the default zero format for BNs (ie. the result from zero()).\\n      *             \\n      * @param a BigNumber\\n      * @return boolean result.\\n      */\\n    function isZero(\\n        BigNumber memory a\\n    ) internal pure returns(bool) {\\n        return isZero(a.val) && a.val.length==0x20 && !a.neg && a.bitlen == 0;\\n    }\\n\\n\\n    /** @notice bytes zero check\\n      * @dev isZero: checks if input bytes value resolves to zero.\\n      *             \\n      * @param a bytes value\\n      * @return boolean result.\\n      */\\n    function isZero(\\n        bytes memory a\\n    ) internal pure returns(bool) {\\n        uint msword;\\n        uint msword_ptr;\\n        assembly {\\n            msword_ptr := add(a,0x20)\\n        }\\n        for(uint i=0; i<a.length; i+=32) {\\n            assembly { msword := mload(msword_ptr) } // get msword of input\\n            if(msword > 0) return false;\\n            assembly { msword_ptr := add(msword_ptr, 0x20) }\\n        }\\n        return true;\\n\\n    }\\n\\n    /** @notice BigNumber value bit length\\n      * @dev bitLength: returns BigNumber value bit length- ie. log2 (most significant bit of value)\\n      *             \\n      * @param a BigNumber\\n      * @return uint bit length result.\\n      */\\n    function bitLength(\\n        BigNumber memory a\\n    ) internal pure returns(uint){\\n        return bitLength(a.val);\\n    }\\n\\n    /** @notice bytes bit length\\n      * @dev bitLength: returns bytes bit length- ie. log2 (most significant bit of value)\\n      *             \\n      * @param a bytes value\\n      * @return r uint bit length result.\\n      */\\n    function bitLength(\\n        bytes memory a\\n    ) internal pure returns(uint r){\\n        if(isZero(a)) return 0;\\n        uint msword; \\n        assembly {\\n            msword := mload(add(a,0x20))               // get msword of input\\n        }\\n        r = bitLength(msword);                         // get bitlen of msword, add to size of remaining words.\\n        assembly {                                           \\n            r := add(r, mul(sub(mload(a), 0x20) , 8))  // res += (val.length-32)*8;  \\n        }\\n    }\\n\\n    /** @notice uint bit length\\n        @dev bitLength: get the bit length of a uint input - ie. log2 (most significant bit of 256 bit value (one EVM word))\\n      *                       credit: Tjaden Hess @ ethereum.stackexchange             \\n      * @param a uint value\\n      * @return r uint bit length result.\\n      */\\n    function bitLength(\\n        uint a\\n    ) internal pure returns (uint r){\\n        assembly {\\n            switch eq(a, 0)\\n            case 1 {\\n                r := 0\\n            }\\n            default {\\n                let arg := a\\n                a := sub(a,1)\\n                a := or(a, div(a, 0x02))\\n                a := or(a, div(a, 0x04))\\n                a := or(a, div(a, 0x10))\\n                a := or(a, div(a, 0x100))\\n                a := or(a, div(a, 0x10000))\\n                a := or(a, div(a, 0x100000000))\\n                a := or(a, div(a, 0x10000000000000000))\\n                a := or(a, div(a, 0x100000000000000000000000000000000))\\n                a := add(a, 1)\\n                let m := mload(0x40)\\n                mstore(m,           0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\\n                mstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\\n                mstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\\n                mstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\\n                mstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\\n                mstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\\n                mstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\\n                mstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\\n                mstore(0x40, add(m, 0x100))\\n                let magic := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\\n                let shift := 0x100000000000000000000000000000000000000000000000000000000000000\\n                let _a := div(mul(a, magic), shift)\\n                r := div(mload(add(m,sub(255,_a))), shift)\\n                r := add(r, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\\n                // where a is a power of two, result needs to be incremented. we use the power of two trick here: if(arg & arg-1 == 0) ++r;\\n                if eq(and(arg, sub(arg, 1)), 0) {\\n                    r := add(r, 1) \\n                }\\n            }\\n        }\\n    }\\n\\n    /** @notice BigNumber zero value\\n        @dev zero: returns zero encoded as a BigNumber\\n      * @return zero encoded as BigNumber\\n      */\\n    function zero(\\n    ) internal pure returns(BigNumber memory) {\\n        return BigNumber(ZERO, false, 0);\\n    }\\n\\n    /** @notice BigNumber one value\\n        @dev one: returns one encoded as a BigNumber\\n      * @return one encoded as BigNumber\\n      */\\n    function one(\\n    ) internal pure returns(BigNumber memory) {\\n        return BigNumber(ONE, false, 1);\\n    }\\n\\n    /** @notice BigNumber two value\\n        @dev two: returns two encoded as a BigNumber\\n      * @return two encoded as BigNumber\\n      */\\n    function two(\\n    ) internal pure returns(BigNumber memory) {\\n        return BigNumber(TWO, false, 2);\\n    }\\n    // ***************** END EXPOSED HELPER FUNCTIONS ******************\\n\\n\\n\\n\\n\\n    // ***************** START PRIVATE MANAGEMENT FUNCTIONS ******************\\n    /** @notice Create a new BigNumber.\\n        @dev init: overloading allows caller to obtionally pass bitlen where it is known - as it is cheaper to do off-chain and verify on-chain. \\n      *            we assert input is in data structure as defined above, and that bitlen, if passed, is correct.\\n      *            'copy' parameter indicates whether or not to copy the contents of val to a new location in memory (for example where you pass \\n      *            the contents of another variable's value in)\\n      * @param val bytes - bignum value.\\n      * @param neg bool - sign of value\\n      * @param bitlen uint - bit length of value\\n      * @return r BigNumber initialized value.\\n      */\\n    function _init(\\n        bytes memory val, \\n        bool neg, \\n        uint bitlen\\n    ) private view returns(BigNumber memory r){ \\n        // use identity at location 0x4 for cheap memcpy.\\n        // grab contents of val, load starting from memory end, update memory end pointer.\\n        assembly {\\n            let data := add(val, 0x20)\\n            let length := mload(val)\\n            let out\\n            let freemem := mload(0x40)\\n            switch eq(mod(length, 0x20), 0)                       // if(val.length % 32 == 0)\\n                case 1 {\\n                    out     := add(freemem, 0x20)                 // freememory location + length word\\n                    mstore(freemem, length)                       // set new length \\n                }\\n                default { \\n                    let offset  := sub(0x20, mod(length, 0x20))   // offset: 32 - (length % 32)\\n                    out     := add(add(freemem, offset), 0x20)    // freememory location + offset + length word\\n                    mstore(freemem, add(length, offset))          // set new length \\n                }\\n            mstore(add(freemem, 0x20), 0)\\n            pop(staticcall(450, 0x4, data, length, out, length))  // copy into 'out' memory location\\n            mstore(0x40, add(freemem, add(mload(freemem), 0x20))) // update the free memory pointer\\n            \\n            // handle leading zero words. assume freemem is pointer to bytes value\\n            let bn_length := mload(freemem)\\n            for { } eq ( eq(bn_length, 0x20), 0) { } {            // for(; length!=32; length-=32)\\n             switch eq(mload(add(freemem, 0x20)),0)               // if(msword==0):\\n                    case 1 { freemem := add(freemem, 0x20) }      //     update length pointer\\n                    default { break }                             // else: loop termination. non-zero word found\\n                bn_length := sub(bn_length,0x20)                          \\n            } \\n            mstore(freemem, bn_length)                             \\n\\n            mstore(r, freemem)                                    // store new bytes value in r\\n            mstore(add(r, 0x20), neg)                             // store neg value in r\\n        }\\n\\n        r.bitlen = bitlen == 0 ? bitLength(r.val) : bitlen;\\n    }\\n    // ***************** END PRIVATE MANAGEMENT FUNCTIONS ******************\\n\\n\\n\\n\\n\\n    // ***************** START PRIVATE CORE CALCULATION FUNCTIONS ******************\\n    /** @notice takes two BigNumber memory values and the bitlen of the max value, and adds them.\\n      * @dev _add: This function is private and only callable from add: therefore the values may be of different sizes,\\n      *            in any order of size, and of different signs (handled in add).\\n      *            As values may be of different sizes, inputs are considered starting from the least significant \\n      *            words, working back. \\n      *            The function calculates the new bitlen (basically if bitlens are the same for max and min, \\n      *            max_bitlen++) and returns a new BigNumber memory value.\\n      *\\n      * @param max bytes -  biggest value  (determined from add)\\n      * @param min bytes -  smallest value (determined from add)\\n      * @param max_bitlen uint - bit length of max value.\\n      * @return bytes result - max + min.\\n      * @return uint - bit length of result.\\n      */\\n    function _add(\\n        bytes memory max, \\n        bytes memory min, \\n        uint max_bitlen\\n    ) private pure returns (bytes memory, uint) {\\n        bytes memory result;\\n        assembly {\\n\\n            let result_start := mload(0x40)                                   // Get the highest available block of memory\\n            let carry := 0\\n            let uint_max := sub(0,1)\\n\\n            let max_ptr := add(max, mload(max))\\n            let min_ptr := add(min, mload(min))                               // point to last word of each byte array.\\n\\n            let result_ptr := add(add(result_start,0x20), mload(max))         // set result_ptr end.\\n\\n            for { let i := mload(max) } eq(eq(i,0),0) { i := sub(i, 0x20) } { // for(int i=max_length; i!=0; i-=32)\\n                let max_val := mload(max_ptr)                                 // get next word for 'max'\\n                switch gt(i,sub(mload(max),mload(min)))                       // if(i>(max_length-min_length)). while \\n                                                                              // 'min' words are still available.\\n                    case 1{ \\n                        let min_val := mload(min_ptr)                         //      get next word for 'min'\\n                        mstore(result_ptr, add(add(max_val,min_val),carry))   //      result_word = max_word+min_word+carry\\n                        switch gt(max_val, sub(uint_max,sub(min_val,carry)))  //      this switch block finds whether or\\n                                                                              //      not to set the carry bit for the\\n                                                                              //      next iteration.\\n                            case 1  { carry := 1 }\\n                            default {\\n                                switch and(eq(max_val,uint_max),or(gt(carry,0), gt(min_val,0)))\\n                                case 1 { carry := 1 }\\n                                default{ carry := 0 }\\n                            }\\n                            \\n                        min_ptr := sub(min_ptr,0x20)                       //       point to next 'min' word\\n                    }\\n                    default{                                               // else: remainder after 'min' words are complete.\\n                        mstore(result_ptr, add(max_val,carry))             //       result_word = max_word+carry\\n                        \\n                        switch and( eq(uint_max,max_val), eq(carry,1) )    //       this switch block finds whether or \\n                                                                           //       not to set the carry bit for the \\n                                                                           //       next iteration.\\n                            case 1  { carry := 1 }\\n                            default { carry := 0 }\\n                    }\\n                result_ptr := sub(result_ptr,0x20)                         // point to next 'result' word\\n                max_ptr := sub(max_ptr,0x20)                               // point to next 'max' word\\n            }\\n\\n            switch eq(carry,0) \\n                case 1{ result_start := add(result_start,0x20) }           // if carry is 0, increment result_start, ie.\\n                                                                           // length word for result is now one word \\n                                                                           // position ahead.\\n                default { mstore(result_ptr, 1) }                          // else if carry is 1, store 1; overflow has\\n                                                                           // occured, so length word remains in the \\n                                                                           // same position.\\n\\n            result := result_start                                         // point 'result' bytes value to the correct\\n                                                                           // address in memory.\\n            mstore(result,add(mload(max),mul(0x20,carry)))                 // store length of result. we are finished \\n                                                                           // with the byte array.\\n            \\n            mstore(0x40, add(result,add(mload(result),0x20)))              // Update freemem pointer to point to new \\n                                                                           // end of memory.\\n\\n            // we now calculate the result's bit length.\\n            // with addition, if we assume that some a is at least equal to some b, then the resulting bit length will\\n            // be a's bit length or (a's bit length)+1, depending on carry bit.this is cheaper than calling bitLength.\\n            let msword := mload(add(result,0x20))                             // get most significant word of result\\n            // if(msword==1 || msword>>(max_bitlen % 256)==1):\\n            if or( eq(msword, 1), eq(shr(mod(max_bitlen,256),msword),1) ) {\\n                    max_bitlen := add(max_bitlen, 1)                          // if msword's bit length is 1 greater \\n                                                                              // than max_bitlen, OR overflow occured,\\n                                                                              // new bitlen is max_bitlen+1.\\n                }\\n        }\\n        \\n\\n        return (result, max_bitlen);\\n    }\\n\\n    /** @notice takes two BigNumber memory values and subtracts them.\\n      * @dev _sub: This function is private and only callable from add: therefore the values may be of different sizes, \\n      *            in any order of size, and of different signs (handled in add).\\n      *            As values may be of different sizes, inputs are considered starting from the least significant words,\\n      *            working back. \\n      *            The function calculates the new bitlen (basically if bitlens are the same for max and min, \\n      *            max_bitlen++) and returns a new BigNumber memory value.\\n      *\\n      * @param max bytes -  biggest value  (determined from add)\\n      * @param min bytes -  smallest value (determined from add)\\n      * @return bytes result - max + min.\\n      * @return uint - bit length of result.\\n      */\\n    function _sub(\\n        bytes memory max, \\n        bytes memory min\\n    ) internal pure returns (bytes memory, uint) {\\n        bytes memory result;\\n        uint carry = 0;\\n        uint uint_max = type(uint256).max;\\n        assembly {\\n                \\n            let result_start := mload(0x40)                                 // Get the highest available block of \\n                                                                            // memory\\n        \\n            let max_len := mload(max)\\n            let min_len := mload(min)                                       // load lengths of inputs\\n            \\n            let len_diff := sub(max_len,min_len)                            // get differences in lengths.\\n            \\n            let max_ptr := add(max, max_len)\\n            let min_ptr := add(min, min_len)                                // go to end of arrays\\n            let result_ptr := add(result_start, max_len)                    // point to least significant result \\n                                                                            // word.\\n            let memory_end := add(result_ptr,0x20)                          // save memory_end to update free memory\\n                                                                            // pointer at the end.\\n            \\n            for { let i := max_len } eq(eq(i,0),0) { i := sub(i, 0x20) } {  // for(int i=max_length; i!=0; i-=32)\\n                let max_val := mload(max_ptr)                               // get next word for 'max'\\n                switch gt(i,len_diff)                                       // if(i>(max_length-min_length)). while\\n                                                                            // 'min' words are still available.\\n                    case 1{ \\n                        let min_val := mload(min_ptr)                       //  get next word for 'min'\\n        \\n                        mstore(result_ptr, sub(sub(max_val,min_val),carry)) //  result_word = (max_word-min_word)-carry\\n                    \\n                        switch or(lt(max_val, add(min_val,carry)), \\n                               and(eq(min_val,uint_max), eq(carry,1)))      //  this switch block finds whether or \\n                                                                            //  not to set the carry bit for the next iteration.\\n                            case 1  { carry := 1 }\\n                            default { carry := 0 }\\n                            \\n                        min_ptr := sub(min_ptr,0x20)                        //  point to next 'result' word\\n                    }\\n                    default {                                               // else: remainder after 'min' words are complete.\\n\\n                        mstore(result_ptr, sub(max_val,carry))              //      result_word = max_word-carry\\n                    \\n                        switch and( eq(max_val,0), eq(carry,1) )            //      this switch block finds whether or \\n                                                                            //      not to set the carry bit for the \\n                                                                            //      next iteration.\\n                            case 1  { carry := 1 }\\n                            default { carry := 0 }\\n\\n                    }\\n                result_ptr := sub(result_ptr,0x20)                          // point to next 'result' word\\n                max_ptr    := sub(max_ptr,0x20)                             // point to next 'max' word\\n            }      \\n\\n            //the following code removes any leading words containing all zeroes in the result.\\n            result_ptr := add(result_ptr,0x20)                                                 \\n\\n            // for(result_ptr+=32;; result==0; result_ptr+=32)\\n            for { }   eq(mload(result_ptr), 0) { result_ptr := add(result_ptr,0x20) } { \\n               result_start := add(result_start, 0x20)                      // push up the start pointer for the result\\n               max_len := sub(max_len,0x20)                                 // subtract a word (32 bytes) from the \\n                                                                            // result length.\\n            } \\n\\n            result := result_start                                          // point 'result' bytes value to \\n                                                                            // the correct address in memory\\n            \\n            mstore(result,max_len)                                          // store length of result. we \\n                                                                            // are finished with the byte array.\\n            \\n            mstore(0x40, memory_end)                                        // Update freemem pointer.\\n        }\\n\\n        uint new_bitlen = bitLength(result);                                // calculate the result's \\n                                                                            // bit length.\\n        \\n        return (result, new_bitlen);\\n    }\\n\\n    /** @notice gets the modulus value necessary for calculating exponetiation.\\n      * @dev _powModulus: we must pass the minimum modulus value which would return JUST the a^b part of the calculation\\n      *       in modexp. the rationale here is:\\n      *       if 'a' has n bits, then a^e has at most n*e bits.\\n      *       using this modulus in exponetiation will result in simply a^e.\\n      *       therefore the value may be many words long.\\n      *       This is done by:\\n      *         - storing total modulus byte length\\n      *         - storing first word of modulus with correct bit set\\n      *         - updating the free memory pointer to come after total length.\\n      *\\n      * @param a BigNumber base\\n      * @param e uint exponent\\n      * @return BigNumber modulus result\\n      */\\n    function _powModulus(\\n        BigNumber memory a, \\n        uint e\\n    ) private pure returns(BigNumber memory){\\n        bytes memory _modulus = ZERO;\\n        uint mod_index;\\n\\n        assembly {\\n            mod_index := mul(mload(add(a, 0x40)), e)               // a.bitlen * e is the max bitlength of result\\n            let first_word_modulus := shl(mod(mod_index, 256), 1)  // set bit in first modulus word.\\n            mstore(_modulus, mul(add(div(mod_index,256),1),0x20))  // store length of modulus\\n            mstore(add(_modulus,0x20), first_word_modulus)         // set first modulus word\\n            mstore(0x40, add(_modulus, add(mload(_modulus),0x20))) // update freemem pointer to be modulus index\\n                                                                   // + length\\n        }\\n\\n        //create modulus BigNumber memory for modexp function\\n        return BigNumber(_modulus, false, mod_index); \\n    }\\n\\n    /** @notice Modular Exponentiation: Takes bytes values for base, exp, mod and calls precompile for (base^exp)%^mod\\n      * @dev modexp: Wrapper for built-in modexp (contract 0x5) as described here: \\n      *              https://github.com/ethereum/EIPs/pull/198\\n      *\\n      * @param _b bytes base\\n      * @param _e bytes base_inverse \\n      * @param _m bytes exponent\\n      * @param r bytes result.\\n      */\\n    function _modexp(\\n        bytes memory _b, \\n        bytes memory _e, \\n        bytes memory _m\\n    ) private view returns(bytes memory r) {\\n        assembly {\\n            \\n            let bl := mload(_b)\\n            let el := mload(_e)\\n            let ml := mload(_m)\\n            \\n            \\n            let freemem := mload(0x40)  // Free memory pointer is always stored at 0x40\\n            \\n            \\n            mstore(freemem, bl)         // arg[0] = base.length @ +0\\n            \\n            mstore(add(freemem,32), el) // arg[1] = exp.length @ +32\\n            \\n            mstore(add(freemem,64), ml) // arg[2] = mod.length @ +64\\n            \\n            // arg[3] = base.bits @ + 96\\n            // Use identity built-in (contract 0x4) as a cheap memcpy\\n            let success := staticcall(450, 0x4, add(_b,32), bl, add(freemem,96), bl)\\n            \\n            // arg[4] = exp.bits @ +96+base.length\\n            let size := add(96, bl)\\n            success := staticcall(450, 0x4, add(_e,32), el, add(freemem,size), el)\\n            \\n            // arg[5] = mod.bits @ +96+base.length+exp.length\\n            size := add(size,el)\\n            success := staticcall(450, 0x4, add(_m,32), ml, add(freemem,size), ml)\\n            \\n            switch success case 0 { invalid() } //fail where we haven't enough gas to make the call\\n\\n            // Total size of input = 96+base.length+exp.length+mod.length\\n            size := add(size,ml)\\n            // Invoke contract 0x5, put return value right after mod.length, @ +96\\n            success := staticcall(sub(gas(), 1350), 0x5, freemem, size, add(freemem, 0x60), ml)\\n\\n            switch success case 0 { invalid() } //fail where we haven't enough gas to make the call\\n\\n            let length := ml\\n            let msword_ptr := add(freemem, 0x60)\\n\\n            ///the following code removes any leading words containing all zeroes in the result.\\n            for { } eq ( eq(length, 0x20), 0) { } {                   // for(; length!=32; length-=32)\\n                switch eq(mload(msword_ptr),0)                        // if(msword==0):\\n                    case 1 { msword_ptr := add(msword_ptr, 0x20) }    //     update length pointer\\n                    default { break }                                 // else: loop termination. non-zero word found\\n                length := sub(length,0x20)                          \\n            } \\n            r := sub(msword_ptr,0x20)\\n            mstore(r, length)\\n            \\n            // point to the location of the return value (length, bits)\\n            //assuming mod length is multiple of 32, return value is already in the right format.\\n            mstore(0x40, add(add(96, freemem),ml)) //deallocate freemem pointer\\n        }        \\n    }\\n    // ***************** END PRIVATE CORE CALCULATION FUNCTIONS ******************\\n\\n\\n\\n\\n\\n    // ***************** START PRIVATE HELPER FUNCTIONS ******************\\n    /** @notice left shift BigNumber memory 'dividend' by 'value' bits.\\n      * @param bn value to shift\\n      * @param bits amount of bits to shift by\\n      * @return r result\\n      */\\n    function _shl(\\n        BigNumber memory bn, \\n        uint bits\\n    ) private view returns(BigNumber memory r) {\\n        if(bits==0 || bn.bitlen==0) return bn;\\n        \\n        // we start by creating an empty bytes array of the size of the output, based on 'bits'.\\n        // for that we must get the amount of extra words needed for the output.\\n        uint length = bn.val.length;\\n        // position of bitlen in most significnat word\\n        uint bit_position = ((bn.bitlen-1) % 256) + 1;\\n        // total extra words. we check if the bits remainder will add one more word.\\n        uint extra_words = (bits / 256) + ( (bits % 256) >= (256 - bit_position) ? 1 : 0);\\n        // length of output\\n        uint total_length = length + (extra_words * 0x20);\\n\\n        r.bitlen = bn.bitlen+(bits);\\n        r.neg = bn.neg;\\n        bits %= 256;\\n\\n        \\n        bytes memory bn_shift;\\n        uint bn_shift_ptr;\\n        // the following efficiently creates an empty byte array of size 'total_length'\\n        assembly {\\n            let freemem_ptr := mload(0x40)                // get pointer to free memory\\n            mstore(freemem_ptr, total_length)             // store bytes length\\n            let mem_end := add(freemem_ptr, total_length) // end of memory\\n            mstore(mem_end, 0)                            // store 0 at memory end\\n            bn_shift := freemem_ptr                       // set pointer to bytes\\n            bn_shift_ptr := add(bn_shift, 0x20)           // get bn_shift pointer\\n            mstore(0x40, add(mem_end, 0x20))              // update freemem pointer\\n        }\\n\\n        // use identity for cheap copy if bits is multiple of 8.\\n        if(bits % 8 == 0) {\\n            // calculate the position of the first byte in the result.\\n            uint bytes_pos = ((256-(((bn.bitlen-1)+bits) % 256))-1) / 8;\\n            uint insize = (bn.bitlen / 8) + ((bn.bitlen % 8 != 0) ? 1 : 0);\\n            assembly {\\n              let in          := add(add(mload(bn), 0x20), div(sub(256, bit_position), 8))\\n              let out         := add(bn_shift_ptr, bytes_pos)\\n              let success     := staticcall(450, 0x4, in, insize, out, length)\\n            }\\n            r.val = bn_shift;\\n            return r;\\n        }\\n\\n\\n        uint mask;\\n        uint mask_shift = 0x100-bits;\\n        uint msw;\\n        uint msw_ptr;\\n\\n       assembly {\\n           msw_ptr := add(mload(bn), 0x20)   \\n       }\\n        \\n       // handle first word before loop if the shift adds any extra words.\\n       // the loop would handle it if the bit shift doesn't wrap into the next word, \\n       // so we check only for that condition.\\n       if((bit_position+bits) > 256){\\n           assembly {\\n              msw := mload(msw_ptr)\\n              mstore(bn_shift_ptr, shr(mask_shift, msw))\\n              bn_shift_ptr := add(bn_shift_ptr, 0x20)\\n           }\\n       }\\n        \\n       // as a result of creating the empty array we just have to operate on the words in the original bn.\\n       for(uint i=bn.val.length; i!=0; i-=0x20){                  // for each word:\\n           assembly {\\n               msw := mload(msw_ptr)                              // get most significant word\\n               switch eq(i,0x20)                                  // if i==32:\\n                   case 1 { mask := 0 }                           // handles msword: no mask needed.\\n                   default { mask := mload(add(msw_ptr,0x20)) }   // else get mask (next word)\\n               msw := shl(bits, msw)                              // left shift current msw by 'bits'\\n               mask := shr(mask_shift, mask)                      // right shift next significant word by mask_shift\\n               mstore(bn_shift_ptr, or(msw,mask))                 // store OR'd mask and shifted bits in-place\\n               msw_ptr := add(msw_ptr, 0x20)\\n               bn_shift_ptr := add(bn_shift_ptr, 0x20)\\n           }\\n       }\\n\\n       r.val = bn_shift;\\n    }\\n    // ***************** END PRIVATE HELPER FUNCTIONS ******************\\n}\\n\",\"keccak256\":\"0xa6efd666f3ece0dce01a53c063a0245340c921eec1bf39a6a983f4f1488dd3b1\",\"license\":\"MIT\"},\"solidity-cborutils/contracts/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xe03d8889bf66e7a30e8010b022b6c86ad0f8c19764cc6c7f50b6bb4ad860cb9b\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 470,
            "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
            "label": "stored_content",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(StoredContent)458_storage)"
          },
          {
            "astId": 477,
            "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
            "label": "user_access",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserAccess)465_storage))"
          },
          {
            "astId": 482,
            "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
            "label": "user_owned_content",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 487,
            "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
            "label": "user_purchased_content",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 491,
            "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
            "label": "piece_cid_to_content",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
          },
          {
            "astId": 494,
            "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
            "label": "next_content_id",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 496,
            "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
            "label": "platform_owner",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 499,
            "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
            "label": "platform_fee_percentage",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)dyn_storage": {
            "base": "t_uint256",
            "encoding": "dynamic_array",
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_memory_ptr": {
            "encoding": "bytes",
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_bytes_storage": {
            "encoding": "bytes",
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256[])",
            "numberOfBytes": "32",
            "value": "t_array(t_uint256)dyn_storage"
          },
          "t_mapping(t_address,t_struct(UserAccess)465_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct FilecoinCIDStore.UserAccess)",
            "numberOfBytes": "32",
            "value": "t_struct(UserAccess)465_storage"
          },
          "t_mapping(t_bytes_memory_ptr,t_uint256)": {
            "encoding": "mapping",
            "key": "t_bytes_memory_ptr",
            "label": "mapping(bytes => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserAccess)465_storage))": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => mapping(address => struct FilecoinCIDStore.UserAccess))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_struct(UserAccess)465_storage)"
          },
          "t_mapping(t_uint256,t_struct(StoredContent)458_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct FilecoinCIDStore.StoredContent)",
            "numberOfBytes": "32",
            "value": "t_struct(StoredContent)458_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(StoredContent)458_storage": {
            "encoding": "inplace",
            "label": "struct FilecoinCIDStore.StoredContent",
            "members": [
              {
                "astId": 435,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "piece_cid",
                "offset": 0,
                "slot": "0",
                "type": "t_bytes_storage"
              },
              {
                "astId": 437,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "data_cid",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
              },
              {
                "astId": 439,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "price",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 441,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "owner",
                "offset": 0,
                "slot": "3",
                "type": "t_address"
              },
              {
                "astId": 443,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "title",
                "offset": 0,
                "slot": "4",
                "type": "t_string_storage"
              },
              {
                "astId": 445,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "description",
                "offset": 0,
                "slot": "5",
                "type": "t_string_storage"
              },
              {
                "astId": 447,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "piece_size",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              },
              {
                "astId": 449,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "deal_id",
                "offset": 0,
                "slot": "7",
                "type": "t_uint64"
              },
              {
                "astId": 451,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "is_active",
                "offset": 8,
                "slot": "7",
                "type": "t_bool"
              },
              {
                "astId": 453,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "created_at",
                "offset": 0,
                "slot": "8",
                "type": "t_uint256"
              },
              {
                "astId": 455,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "total_earnings",
                "offset": 0,
                "slot": "9",
                "type": "t_uint256"
              },
              {
                "astId": 457,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "access_count",
                "offset": 0,
                "slot": "10",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(UserAccess)465_storage": {
            "encoding": "inplace",
            "label": "struct FilecoinCIDStore.UserAccess",
            "members": [
              {
                "astId": 460,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "has_access",
                "offset": 0,
                "slot": "0",
                "type": "t_bool"
              },
              {
                "astId": 462,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "purchased_at",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 464,
                "contract": "contracts/FilecoinCIDStore.sol:FilecoinCIDStore",
                "label": "expires_at",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "encoding": "inplace",
            "label": "uint64",
            "numberOfBytes": "8"
          }
        }
      },
      "userdoc": {
        "errors": {
          "ActorNotFound()": [
            {
              "notice": "the actor is not found"
            }
          ],
          "FailToCallActor()": [
            {
              "notice": "an error happened trying to call the actor"
            }
          ],
          "InvalidCodec(uint64)": [
            {
              "notice": "the codec received is not valid"
            }
          ],
          "InvalidResponseLength()": [
            {
              "notice": "the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none."
            }
          ],
          "NotEnoughBalance(uint256,uint256)": [
            {
              "notice": "the smart contract has no enough balance to transfer"
            }
          ]
        },
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@ensdomains/buffer/contracts/Buffer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\"\n    },\n    \"contracts/FilecoinCIDStore.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {MarketAPI} from \\\"filecoin-solidity-api/contracts/v0.8/MarketAPI.sol\\\";\\nimport {CommonTypes} from \\\"filecoin-solidity-api/contracts/v0.8/types/CommonTypes.sol\\\";\\nimport {MarketTypes} from \\\"filecoin-solidity-api/contracts/v0.8/types/MarketTypes.sol\\\";\\nimport {FilAddresses} from \\\"filecoin-solidity-api/contracts/v0.8/utils/FilAddresses.sol\\\";\\nimport {BigInts} from \\\"filecoin-solidity-api/contracts/v0.8/utils/BigInts.sol\\\";\\n\\ncontract FilecoinCIDStore {\\n    struct StoredContent {\\n        bytes piece_cid;        // Filecoin piece CID\\n        string data_cid;        // Original data CID\\n        uint256 price;          // Price to access in attoFIL\\n        address owner;          // Content owner\\n        string title;           // Content title\\n        string description;     // Content description\\n        uint256 piece_size;     // Size of the piece\\n        uint64 deal_id;         // Filecoin deal ID (0 if no deal yet)\\n        bool is_active;         // Whether content is active for purchase\\n        uint256 created_at;     // Creation timestamp\\n        uint256 total_earnings; // Total earnings from this content\\n        uint256 access_count;   // Number of times accessed\\n    }\\n\\n    struct UserAccess {\\n        bool has_access;\\n        uint256 purchased_at;\\n        uint256 expires_at;     // Access expiration (365 days)\\n    }\\n\\n    mapping(uint256 => StoredContent) public stored_content;\\n    mapping(uint256 => mapping(address => UserAccess)) public user_access;\\n    mapping(address => uint256[]) public user_owned_content;\\n    mapping(address => uint256[]) public user_purchased_content;\\n    mapping(bytes => uint256) public piece_cid_to_content; // piece CID -> content ID\\n\\n    uint256 public next_content_id = 1;\\n    address public platform_owner;\\n    uint256 public platform_fee_percentage = 5; // 5% platform fee\\n\\n    event ContentStored(\\n        uint256 indexed content_id,\\n        address indexed owner,\\n        bytes piece_cid,\\n        string data_cid,\\n        uint256 price,\\n        string title\\n    );\\n\\n    event AccessPurchased(\\n        uint256 indexed content_id,\\n        address indexed buyer,\\n        address indexed seller,\\n        uint256 price\\n    );\\n\\n    event CIDRetrieved(\\n        uint256 indexed content_id,\\n        address indexed user,\\n        string data_cid\\n    );\\n\\n    event DealActivated(\\n        uint256 indexed content_id,\\n        uint64 deal_id\\n    );\\n\\n    constructor() {\\n        platform_owner = msg.sender;\\n    }\\n\\n    modifier contentExists(uint256 _content_id) {\\n        require(_content_id > 0 && _content_id < next_content_id, \\\"Content does not exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyContentOwner(uint256 _content_id) {\\n        require(stored_content[_content_id].owner == msg.sender, \\\"Only content owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyPlatformOwner() {\\n        require(msg.sender == platform_owner, \\\"Only platform owner\\\");\\n        _;\\n    }\\n\\n    function storeContent(\\n        bytes memory _piece_cid,\\n        string memory _data_cid,\\n        uint256 _price,\\n        string memory _title,\\n        string memory _description,\\n        uint256 _piece_size\\n    ) external returns (uint256) {\\n        require(_piece_cid.length > 0, \\\"Piece CID required\\\");\\n        require(bytes(_data_cid).length > 0, \\\"Data CID required\\\");\\n        require(_price > 0, \\\"Price must be > 0\\\");\\n        require(bytes(_title).length > 0, \\\"Title required\\\");\\n        require(_piece_size > 0, \\\"Piece size must be > 0\\\");\\n\\n        uint256 content_id = next_content_id++;\\n\\n        stored_content[content_id] = StoredContent({\\n            piece_cid: _piece_cid,\\n            data_cid: _data_cid,\\n            price: _price,\\n            owner: msg.sender,\\n            title: _title,\\n            description: _description,\\n            piece_size: _piece_size,\\n            deal_id: 0, // No deal initially\\n            is_active: true,\\n            created_at: block.timestamp,\\n            total_earnings: 0,\\n            access_count: 0\\n        });\\n\\n        user_owned_content[msg.sender].push(content_id);\\n        piece_cid_to_content[_piece_cid] = content_id;\\n\\n        emit ContentStored(content_id, msg.sender, _piece_cid, _data_cid, _price, _title);\\n        return content_id;\\n    }\\n\\n    function purchaseAccess(uint256 _content_id) external payable contentExists(_content_id) {\\n        StoredContent storage content = stored_content[_content_id];\\n        require(content.is_active, \\\"Content not active\\\");\\n        require(msg.value >= content.price, \\\"Insufficient payment\\\");\\n        require(msg.sender != content.owner, \\\"Owner cannot purchase own content\\\");\\n        require(!user_access[_content_id][msg.sender].has_access, \\\"Already has access\\\");\\n\\n        uint256 platform_fee = (msg.value * platform_fee_percentage) / 100;\\n        uint256 owner_payment = msg.value - platform_fee;\\n\\n        // Grant access to user (1 year)\\n        user_access[_content_id][msg.sender] = UserAccess({\\n            has_access: true,\\n            purchased_at: block.timestamp,\\n            expires_at: block.timestamp + 365 days\\n        });\\n\\n        // Update content stats\\n        content.total_earnings += msg.value;\\n        content.access_count++;\\n\\n        // Add to user's purchased content\\n        user_purchased_content[msg.sender].push(_content_id);\\n\\n        // Transfer payments\\n        payable(content.owner).transfer(owner_payment);\\n        if (platform_fee > 0) {\\n            payable(platform_owner).transfer(platform_fee);\\n        }\\n\\n        emit AccessPurchased(_content_id, msg.sender, content.owner, msg.value);\\n    }\\n\\n    function getCID(uint256 _content_id) external contentExists(_content_id) returns (string memory) {\\n        StoredContent storage content = stored_content[_content_id];\\n        require(content.is_active, \\\"Content not active\\\");\\n\\n        // Owner can always access\\n        if (msg.sender == content.owner) {\\n            emit CIDRetrieved(_content_id, msg.sender, content.data_cid);\\n            return content.data_cid;\\n        }\\n\\n        // Check if user has valid access\\n        UserAccess memory access = user_access[_content_id][msg.sender];\\n        require(access.has_access, \\\"Purchase required to access CID\\\");\\n        require(block.timestamp <= access.expires_at, \\\"Access expired\\\");\\n\\n        emit CIDRetrieved(_content_id, msg.sender, content.data_cid);\\n        return content.data_cid;\\n    }\\n\\n    function hasAccess(uint256 _content_id, address _user) external view contentExists(_content_id) returns (bool) {\\n        StoredContent memory content = stored_content[_content_id];\\n\\n        // Owner always has access\\n        if (_user == content.owner) {\\n            return true;\\n        }\\n\\n        UserAccess memory access = user_access[_content_id][_user];\\n        return access.has_access && block.timestamp <= access.expires_at;\\n    }\\n\\n    function updateDealStatus(uint256 _content_id, uint64 _deal_id) external onlyContentOwner(_content_id) {\\n        require(_deal_id > 0, \\\"Invalid deal ID\\\");\\n\\n        StoredContent storage content = stored_content[_content_id];\\n        content.deal_id = _deal_id;\\n\\n        emit DealActivated(_content_id, _deal_id);\\n    }\\n\\n    function checkDealActivation(uint256 _content_id) external view contentExists(_content_id) returns (bool) {\\n        StoredContent memory content = stored_content[_content_id];\\n\\n        if (content.deal_id == 0) {\\n            return false; // No deal created yet\\n        }\\n\\n        // Check deal activation status from Filecoin network\\n        (int256 exit_code, MarketTypes.GetDealActivationReturn memory ret) = MarketAPI\\n            .getDealActivation(content.deal_id);\\n\\n        if (exit_code != 0) {\\n            return false;\\n        }\\n\\n        // Check if deal is activated and not terminated\\n        return (CommonTypes.ChainEpoch.unwrap(ret.activated) > 0) &&\\n               (CommonTypes.ChainEpoch.unwrap(ret.terminated) == 0);\\n    }\\n\\n    function getContentInfo(uint256 _content_id) external view contentExists(_content_id) returns (\\n        string memory title,\\n        string memory description,\\n        uint256 price,\\n        address owner,\\n        bool is_active,\\n        uint256 created_at,\\n        uint64 deal_id,\\n        uint256 piece_size,\\n        bool user_has_access\\n    ) {\\n        StoredContent memory content = stored_content[_content_id];\\n        bool has_access = (msg.sender == content.owner) ||\\n                         (user_access[_content_id][msg.sender].has_access &&\\n                          block.timestamp <= user_access[_content_id][msg.sender].expires_at);\\n\\n        return (\\n            content.title,\\n            content.description,\\n            content.price,\\n            content.owner,\\n            content.is_active,\\n            content.created_at,\\n            content.deal_id,\\n            content.piece_size,\\n            has_access\\n        );\\n    }\\n\\n    function getUserOwnedContent(address _user) external view returns (uint256[] memory) {\\n        return user_owned_content[_user];\\n    }\\n\\n    function getUserPurchasedContent(address _user) external view returns (uint256[] memory) {\\n        return user_purchased_content[_user];\\n    }\\n\\n    function getAllActiveContent() external view returns (uint256[] memory) {\\n        uint256[] memory active_content = new uint256[](next_content_id - 1);\\n        uint256 count = 0;\\n\\n        for (uint256 i = 1; i < next_content_id; i++) {\\n            if (stored_content[i].is_active) {\\n                active_content[count] = i;\\n                count++;\\n            }\\n        }\\n\\n        // Resize array to actual count\\n        uint256[] memory result = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            result[i] = active_content[i];\\n        }\\n\\n        return result;\\n    }\\n\\n    function updateContentStatus(\\n        uint256 _content_id,\\n        uint256 _new_price,\\n        bool _is_active\\n    ) external contentExists(_content_id) onlyContentOwner(_content_id) {\\n        require(_new_price > 0, \\\"Price must be > 0\\\");\\n\\n        StoredContent storage content = stored_content[_content_id];\\n        content.price = _new_price;\\n        content.is_active = _is_active;\\n    }\\n\\n    function setPlatformFee(uint256 _fee_percentage) external onlyPlatformOwner {\\n        require(_fee_percentage <= 20, \\\"Fee too high (max 20%)\\\");\\n        platform_fee_percentage = _fee_percentage;\\n    }\\n\\n    function withdrawPlatformFees() external onlyPlatformOwner {\\n        payable(platform_owner).transfer(address(this).balance);\\n    }\\n\\n    // Add balance to Filecoin market escrow for making deals\\n    function addMarketBalance(uint256 _value) external onlyPlatformOwner {\\n        MarketAPI.addBalance(FilAddresses.fromEthAddress(address(this)), _value);\\n    }\\n\\n    // Withdraw from Filecoin market escrow\\n    function withdrawMarketBalance(uint256 _value) external onlyPlatformOwner returns (uint256) {\\n        MarketTypes.WithdrawBalanceParams memory params = MarketTypes.WithdrawBalanceParams(\\n            FilAddresses.fromEthAddress(address(this)),\\n            BigInts.fromUint256(_value)\\n        );\\n        (int256 exit_code, CommonTypes.BigInt memory ret) = MarketAPI.withdrawBalance(params);\\n        require(exit_code == 0, \\\"Withdraw failed\\\");\\n\\n        (uint256 withdrawn_amount, bool converted) = BigInts.toUint256(ret);\\n        require(converted, \\\"Conversion failed\\\");\\n\\n        return withdrawn_amount;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/cbor/BigIntCbor.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for BigInt type\\n/// @author Zondax AG\\nlibrary BigIntCBOR {\\n    /// @notice serialize BigInt instance to bytes\\n    /// @param num BigInt instance to serialize\\n    /// @return serialized BigInt as bytes\\n    function serializeBigInt(CommonTypes.BigInt memory num) internal pure returns (bytes memory) {\\n        bytes memory raw = new bytes(num.val.length + 1);\\n\\n        raw[0] = num.neg == true ? bytes1(0x01) : bytes1(0x00);\\n\\n        uint index = 1;\\n        for (uint i = 0; i < num.val.length; i++) {\\n            raw[index] = num.val[i];\\n            index++;\\n        }\\n\\n        return raw;\\n    }\\n\\n    /// @notice deserialize big int (encoded as bytes) to BigInt instance\\n    /// @param raw as bytes to parse\\n    /// @return parsed BigInt instance\\n    function deserializeBigInt(bytes memory raw) internal pure returns (CommonTypes.BigInt memory) {\\n        if (raw.length == 0) {\\n            return CommonTypes.BigInt(hex\\\"00\\\", false);\\n        }\\n\\n        bytes memory val = new bytes(raw.length - 1);\\n        bool neg = false;\\n\\n        if (raw[0] == 0x01) {\\n            neg = true;\\n        }\\n\\n        for (uint i = 1; i < raw.length; i++) {\\n            val[i - 1] = raw[i];\\n        }\\n\\n        return CommonTypes.BigInt(val, neg);\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/cbor/BytesCbor.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"./BigIntCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for bytes\\n/// @author Zondax AG\\nlibrary BytesCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n    using BigIntCBOR for bytes;\\n\\n    /// @notice serialize raw bytes as cbor bytes string encoded\\n    /// @param data raw data in bytes\\n    /// @return encoded cbor bytes\\n    function serializeBytes(bytes memory data) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getBytesSize(data);\\n\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeBytes(data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize raw address (in bytes) as cbor bytes string encoded (how an address is passed to filecoin actors)\\n    /// @param addr raw address in bytes\\n    /// @return encoded address as cbor bytes\\n    function serializeAddress(bytes memory addr) internal pure returns (bytes memory) {\\n        return serializeBytes(addr);\\n    }\\n\\n    /// @notice encoded null value as cbor\\n    /// @return cbor encoded null\\n    function serializeNull() internal pure returns (bytes memory) {\\n        CBOR.CBORBuffer memory buf = CBOR.create(1);\\n\\n        buf.writeNull();\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize cbor encoded filecoin address to bytes\\n    /// @param ret cbor encoded filecoin address\\n    /// @return raw bytes representing a filecoin address\\n    function deserializeAddress(bytes memory ret) internal pure returns (bytes memory) {\\n        bytes memory addr;\\n        uint byteIdx = 0;\\n\\n        (addr, byteIdx) = ret.readBytes(byteIdx);\\n\\n        return addr;\\n    }\\n\\n    /// @notice deserialize cbor encoded string\\n    /// @param ret cbor encoded string (in bytes)\\n    /// @return decoded string\\n    function deserializeString(bytes memory ret) internal pure returns (string memory) {\\n        string memory response;\\n        uint byteIdx = 0;\\n\\n        (response, byteIdx) = ret.readString(byteIdx);\\n\\n        return response;\\n    }\\n\\n    /// @notice deserialize cbor encoded bool\\n    /// @param ret cbor encoded bool (in bytes)\\n    /// @return decoded bool\\n    function deserializeBool(bytes memory ret) internal pure returns (bool) {\\n        bool response;\\n        uint byteIdx = 0;\\n\\n        (response, byteIdx) = ret.readBool(byteIdx);\\n\\n        return response;\\n    }\\n\\n    /// @notice deserialize cbor encoded BigInt\\n    /// @param ret cbor encoded BigInt (in bytes)\\n    /// @return decoded BigInt\\n    /// @dev BigInts are cbor encoded as bytes string first. That is why it unwraps the cbor encoded bytes first, and then parse the result into BigInt\\n    function deserializeBytesBigInt(bytes memory ret) internal pure returns (CommonTypes.BigInt memory) {\\n        bytes memory tmp;\\n        uint byteIdx = 0;\\n\\n        if (ret.length > 0) {\\n            (tmp, byteIdx) = ret.readBytes(byteIdx);\\n            if (tmp.length > 0) {\\n                return tmp.deserializeBigInt();\\n            }\\n        }\\n\\n        return CommonTypes.BigInt(new bytes(0), false);\\n    }\\n\\n    /// @notice deserialize cbor encoded uint64\\n    /// @param rawResp cbor encoded uint64 (in bytes)\\n    /// @return decoded uint64\\n    function deserializeUint64(bytes memory rawResp) internal pure returns (uint64) {\\n        uint byteIdx = 0;\\n        uint64 value;\\n\\n        (value, byteIdx) = rawResp.readUInt64(byteIdx);\\n        return value;\\n    }\\n\\n    /// @notice deserialize cbor encoded int64\\n    /// @param rawResp cbor encoded int64 (in bytes)\\n    /// @return decoded int64\\n    function deserializeInt64(bytes memory rawResp) internal pure returns (int64) {\\n        uint byteIdx = 0;\\n        int64 value;\\n\\n        (value, byteIdx) = rawResp.readInt64(byteIdx);\\n        return value;\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/cbor/FilecoinCbor.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for general data types on the filecoin network.\\n/// @author Zondax AG\\nlibrary FilecoinCBOR {\\n    using Buffer for Buffer.buffer;\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for *;\\n    using BigIntCBOR for *;\\n\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant TAG_TYPE_CID_CODE = 42;\\n    uint8 private constant PAYLOAD_LEN_8_BITS = 24;\\n\\n    /// @notice Write a CID into a CBOR buffer.\\n    /// @dev The CBOR major will be 6 (type 'tag') and the tag type value is 42, as per CBOR tag assignments.\\n    /// @dev https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml\\n    /// @param buf buffer containing the actual CBOR serialization process\\n    /// @param value CID value to serialize as CBOR\\n    function writeCid(CBOR.CBORBuffer memory buf, bytes memory value) internal pure {\\n        buf.buf.appendUint8(uint8(((MAJOR_TYPE_TAG << 5) | PAYLOAD_LEN_8_BITS)));\\n        buf.buf.appendUint8(TAG_TYPE_CID_CODE);\\n        // See https://ipld.io/specs/codecs/dag-cbor/spec/#links for explanation on 0x00 prefix.\\n        buf.writeBytes(bytes.concat(hex'00', value));\\n    }\\n\\n    function readCid(bytes memory cborData, uint byteIdx) internal pure returns (CommonTypes.Cid memory, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = cborData.parseCborHeader(byteIdx);\\n        require(maj == MAJOR_TYPE_TAG, \\\"expected major type tag when parsing cid\\\");\\n        require(value == TAG_TYPE_CID_CODE, \\\"expected tag 42 when parsing cid\\\");\\n\\n        bytes memory raw;\\n        (raw, byteIdx) = cborData.readBytes(byteIdx);\\n        require(raw[0] == 0x00, \\\"expected first byte to be 0 when parsing cid\\\");\\n\\n        // Pop off the first byte, which corresponds to the historical multibase 0x00 byte.\\n        // https://ipld.io/specs/codecs/dag-cbor/spec/#links\\n        CommonTypes.Cid memory ret;\\n        ret.data = new bytes(raw.length - 1);\\n        for (uint256 i = 1; i < raw.length; i++) {\\n            ret.data[i-1] = raw[i];\\n        }\\n\\n        return (ret, byteIdx);\\n    }\\n\\n    /// @notice serialize filecoin address to cbor encoded\\n    /// @param addr filecoin address to serialize\\n    /// @return cbor serialized data as bytes\\n    function serializeAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getBytesSize(addr.data);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeBytes(addr.data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize a BigInt value wrapped in a cbor fixed array.\\n    /// @param value BigInt to serialize as cbor inside an\\n    /// @return cbor serialized data as bytes\\n    function serializeArrayBigInt(CommonTypes.BigInt memory value) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory valueBigInt = value.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getBytesSize(valueBigInt);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.writeBytes(value.serializeBigInt());\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize a FilAddress value wrapped in a cbor fixed array.\\n    /// @param addr FilAddress to serialize as cbor inside an\\n    /// @return cbor serialized data as bytes\\n    function serializeArrayFilAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getBytesSize(addr.data);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.writeBytes(addr.data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize a FilAddress wrapped on a cbor fixed array coming from a actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of FilAddress created based on parsed data\\n    function deserializeArrayFilAddress(bytes memory rawResp) internal pure returns (CommonTypes.FilAddress memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        require(len == 1, \\\"Wrong numbers of parameters (should find 1)\\\");\\n\\n        (ret.data, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize a BigInt wrapped on a cbor fixed array coming from a actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of BigInt created based on parsed data\\n    function deserializeArrayBigInt(bytes memory rawResp) internal pure returns (CommonTypes.BigInt memory) {\\n        uint byteIdx = 0;\\n        uint len;\\n        bytes memory tmp;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 1);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        return tmp.deserializeBigInt();\\n    }\\n\\n    /// @notice serialize UniversalReceiverParams struct to cbor in order to pass as arguments to an actor\\n    /// @param params UniversalReceiverParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeUniversalReceiverParams(CommonTypes.UniversalReceiverParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getPrefixSize(params.type_);\\n        capacity += Misc.getBytesSize(params.payload);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeUInt64(params.type_);\\n        buf.writeBytes(params.payload);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize UniversalReceiverParams cbor to struct when receiving a message\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of UniversalReceiverParams created based on parsed data\\n    function deserializeUniversalReceiverParams(bytes memory rawResp) internal pure returns (CommonTypes.UniversalReceiverParams memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        require(len == 2, \\\"Wrong numbers of parameters (should find 2)\\\");\\n\\n        (ret.type_, byteIdx) = rawResp.readUInt32(byteIdx);\\n        (ret.payload, byteIdx) = rawResp.readBytes(byteIdx);\\n    }\\n\\n    /// @notice attempt to read a FilActorId value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a FilActorId decoded from input bytes and the byte index after moving past the value\\n    function readFilActorId(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.FilActorId, uint) {\\n        uint64 tmp = 0;\\n\\n        (tmp, byteIdx) = rawResp.readUInt64(byteIdx);\\n        return (CommonTypes.FilActorId.wrap(tmp), byteIdx);\\n    }\\n\\n    /// @notice write FilActorId into a cbor buffer\\n    /// @dev FilActorId is just wrapping a uint64\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param id FilActorId to serialize as cbor\\n    function writeFilActorId(CBOR.CBORBuffer memory buf, CommonTypes.FilActorId id) internal pure {\\n        buf.writeUInt64(CommonTypes.FilActorId.unwrap(id));\\n    }\\n\\n    /// @notice attempt to read a ChainEpoch value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a ChainEpoch decoded from input bytes and the byte index after moving past the value\\n    function readChainEpoch(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.ChainEpoch, uint) {\\n        int64 tmp = 0;\\n\\n        (tmp, byteIdx) = rawResp.readInt64(byteIdx);\\n        return (CommonTypes.ChainEpoch.wrap(tmp), byteIdx);\\n    }\\n\\n    /// @notice write ChainEpoch into a cbor buffer\\n    /// @dev ChainEpoch is just wrapping a int64\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param id ChainEpoch to serialize as cbor\\n    function writeChainEpoch(CBOR.CBORBuffer memory buf, CommonTypes.ChainEpoch id) internal pure {\\n        buf.writeInt64(CommonTypes.ChainEpoch.unwrap(id));\\n    }\\n\\n    /// @notice write DealLabel into a cbor buffer\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param label DealLabel to serialize as cbor\\n    function writeDealLabel(CBOR.CBORBuffer memory buf, CommonTypes.DealLabel memory label) internal pure {\\n        label.isString ? buf.writeString(string(label.data)) : buf.writeBytes(label.data);\\n    }\\n\\n    /// @notice deserialize DealLabel cbor to struct when receiving a message\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of DealLabel created based on parsed data\\n    function deserializeDealLabel(bytes memory rawResp) internal pure returns (CommonTypes.DealLabel memory) {\\n        uint byteIdx = 0;\\n        CommonTypes.DealLabel memory label;\\n\\n        (label, byteIdx) = readDealLabel(rawResp, byteIdx);\\n        return label;\\n    }\\n\\n    /// @notice attempt to read a DealLabel value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a DealLabel decoded from input bytes and the byte index after moving past the value\\n    function readDealLabel(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.DealLabel memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = CBORDecoder.parseCborHeader(rawResp, byteIdx);\\n        require(maj == MajByteString || maj == MajTextString, \\\"invalid maj (expected MajByteString or MajTextString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = rawResp[i];\\n            slice_index++;\\n        }\\n\\n        return (CommonTypes.DealLabel(slice, maj == MajTextString), byteIdx + len);\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/cbor/MarketCbor.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"../types/MarketTypes.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"../utils/Misc.sol\\\";\\nimport \\\"../utils/FilAddresses.sol\\\";\\nimport \\\"../utils/CborDecode.sol\\\";\\n\\nimport \\\"./FilecoinCbor.sol\\\";\\nimport \\\"./BigIntCbor.sol\\\";\\nimport \\\"./FilecoinCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR parameters serialization and return values deserialization for Market actor exported methods.\\n/// @author Zondax AG\\nlibrary MarketCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n    using BigIntCBOR for *;\\n    using FilecoinCBOR for *;\\n\\n    /// @notice serialize WithdrawBalanceParams struct to cbor in order to pass as arguments to the market actor\\n    /// @param params WithdrawBalanceParams to serialize as cbor\\n    /// @return response cbor serialized data as bytes\\n    function serializeWithdrawBalanceParams(MarketTypes.WithdrawBalanceParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory tokenAmount = params.tokenAmount.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getBytesSize(params.provider_or_client.data);\\n        capacity += Misc.getBytesSize(tokenAmount);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeBytes(params.provider_or_client.data);\\n        buf.writeBytes(tokenAmount);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize GetBalanceReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetBalanceReturn created based on parsed data\\n    function deserializeGetBalanceReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetBalanceReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n        bytes memory tmp;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.balance = tmp.deserializeBigInt();\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.locked = tmp.deserializeBigInt();\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetDealDataCommitmentReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetDealDataCommitmentReturn created based on parsed data\\n    function deserializeGetDealDataCommitmentReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetDealDataCommitmentReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n\\n        if (len > 0) {\\n            (ret.data, byteIdx) = rawResp.readBytes(byteIdx);\\n            (ret.size, byteIdx) = rawResp.readUInt64(byteIdx);\\n        } else {\\n            ret.data = new bytes(0);\\n            ret.size = 0;\\n        }\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetDealTermReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetDealTermReturn created based on parsed data\\n    function deserializeGetDealTermReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetDealTermReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.start, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n        (ret.duration, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetDealActivationReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetDealActivationReturn created based on parsed data\\n    function deserializeGetDealActivationReturn(bytes memory rawResp) internal pure returns (MarketTypes.GetDealActivationReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.activated, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n        (ret.terminated, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice serialize PublishStorageDealsParams struct to cbor in order to pass as arguments to the market actor\\n    /// @param params PublishStorageDealsParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializePublishStorageDealsParams(MarketTypes.PublishStorageDealsParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getPrefixSize(params.deals.length);\\n\\n        for (uint64 i = 0; i < params.deals.length; i++) {\\n            capacity += Misc.getPrefixSize(2);\\n            capacity += Misc.getPrefixSize(11);\\n\\n            capacity += Misc.getCidSize(params.deals[i].proposal.piece_cid.data);\\n            capacity += Misc.getPrefixSize(params.deals[i].proposal.piece_size);\\n            capacity += Misc.getBoolSize();\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.client.data);\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.provider.data);\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.label.data);\\n            capacity += Misc.getChainEpochSize(params.deals[i].proposal.start_epoch);\\n            capacity += Misc.getChainEpochSize(params.deals[i].proposal.end_epoch);\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.storage_price_per_epoch.serializeBigInt());\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.provider_collateral.serializeBigInt());\\n            capacity += Misc.getBytesSize(params.deals[i].proposal.client_collateral.serializeBigInt());\\n\\n            capacity += Misc.getBytesSize(params.deals[i].client_signature);\\n        }\\n\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.startFixedArray(uint64(params.deals.length));\\n\\n        for (uint64 i = 0; i < params.deals.length; i++) {\\n            buf.startFixedArray(2);\\n\\n            buf.startFixedArray(11);\\n\\n            buf.writeCid(params.deals[i].proposal.piece_cid.data);\\n            buf.writeUInt64(params.deals[i].proposal.piece_size);\\n            buf.writeBool(params.deals[i].proposal.verified_deal);\\n            buf.writeBytes(params.deals[i].proposal.client.data);\\n            buf.writeBytes(params.deals[i].proposal.provider.data);\\n            buf.writeDealLabel(params.deals[i].proposal.label);\\n            buf.writeChainEpoch(params.deals[i].proposal.start_epoch);\\n            buf.writeChainEpoch(params.deals[i].proposal.end_epoch);\\n            buf.writeBytes(params.deals[i].proposal.storage_price_per_epoch.serializeBigInt());\\n            buf.writeBytes(params.deals[i].proposal.provider_collateral.serializeBigInt());\\n            buf.writeBytes(params.deals[i].proposal.client_collateral.serializeBigInt());\\n\\n            buf.writeBytes(params.deals[i].client_signature);\\n        }\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize PublishStorageDealsReturn struct from cbor encoded bytes coming from a market actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of PublishStorageDealsReturn created based on parsed data\\n    function deserializePublishStorageDealsReturn(bytes memory rawResp) internal pure returns (MarketTypes.PublishStorageDealsReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.ids = new uint64[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (ret.ids[i], byteIdx) = rawResp.readUInt64(byteIdx);\\n        }\\n\\n        (ret.valid_deals, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice serialize deal id (uint64) to cbor in order to pass as arguments to the market actor\\n    /// @param id deal id to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeDealID(uint64 id) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getPrefixSize(uint256(id));\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeUInt64(id);\\n\\n        return buf.data();\\n    }\\n\\n    function deserializeMarketDealNotifyParams(bytes memory rawResp) internal pure returns (MarketTypes.MarketDealNotifyParams memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.dealProposal, byteIdx) = rawResp.readBytes(byteIdx);\\n        (ret.dealId, byteIdx) = rawResp.readUInt64(byteIdx);\\n    }\\n\\n    function serializeDealProposal(MarketTypes.DealProposal memory dealProposal) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory storage_price_per_epoch = dealProposal.storage_price_per_epoch.serializeBigInt();\\n        bytes memory provider_collateral = dealProposal.provider_collateral.serializeBigInt();\\n        bytes memory client_collateral = dealProposal.client_collateral.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(11);\\n        capacity += Misc.getCidSize(dealProposal.piece_cid.data);\\n        capacity += Misc.getPrefixSize(dealProposal.piece_size);\\n        capacity += Misc.getBoolSize();\\n        capacity += Misc.getBytesSize(dealProposal.client.data);\\n        capacity += Misc.getBytesSize(dealProposal.provider.data);\\n        capacity += Misc.getBytesSize(dealProposal.label.data);\\n        capacity += Misc.getChainEpochSize(dealProposal.start_epoch);\\n        capacity += Misc.getChainEpochSize(dealProposal.end_epoch);\\n        capacity += Misc.getBytesSize(storage_price_per_epoch);\\n        capacity += Misc.getBytesSize(provider_collateral);\\n        capacity += Misc.getBytesSize(client_collateral);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(11);\\n\\n        buf.writeCid(dealProposal.piece_cid.data);\\n        buf.writeUInt64(dealProposal.piece_size);\\n        buf.writeBool(dealProposal.verified_deal);\\n        buf.writeBytes(dealProposal.client.data);\\n        buf.writeBytes(dealProposal.provider.data);\\n        buf.writeDealLabel(dealProposal.label);\\n        buf.writeChainEpoch(dealProposal.start_epoch);\\n        buf.writeChainEpoch(dealProposal.end_epoch);\\n        buf.writeBytes(storage_price_per_epoch);\\n        buf.writeBytes(provider_collateral);\\n        buf.writeBytes(client_collateral);\\n\\n        return buf.data();\\n    }\\n\\n    function deserializeDealProposal(bytes memory rawResp) internal pure returns (MarketTypes.DealProposal memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n        bytes memory tmp;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 11);\\n\\n        (ret.piece_cid, byteIdx) = rawResp.readCid(byteIdx);\\n        (ret.piece_size, byteIdx) = rawResp.readUInt64(byteIdx);\\n        (ret.verified_deal, byteIdx) = rawResp.readBool(byteIdx);\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.client = FilAddresses.fromBytes(tmp);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.provider = FilAddresses.fromBytes(tmp);\\n\\n        (ret.label, byteIdx) = rawResp.readDealLabel(byteIdx);\\n\\n        (ret.start_epoch, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n        (ret.end_epoch, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n\\n        bytes memory storage_price_per_epoch_bytes;\\n        (storage_price_per_epoch_bytes, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.storage_price_per_epoch = storage_price_per_epoch_bytes.deserializeBigInt();\\n\\n        bytes memory provider_collateral_bytes;\\n        (provider_collateral_bytes, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.provider_collateral = provider_collateral_bytes.deserializeBigInt();\\n\\n        bytes memory client_collateral_bytes;\\n        (client_collateral_bytes, byteIdx) = rawResp.readBytes(byteIdx);\\n        ret.client_collateral = client_collateral_bytes.deserializeBigInt();\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/MarketAPI.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./types/MarketTypes.sol\\\";\\nimport \\\"./cbor/MarketCbor.sol\\\";\\nimport \\\"./cbor/BytesCbor.sol\\\";\\nimport \\\"./cbor/FilecoinCbor.sol\\\";\\n\\nimport \\\"./types/CommonTypes.sol\\\";\\nimport \\\"./utils/Misc.sol\\\";\\nimport \\\"./utils/Actor.sol\\\";\\n\\n/// @title This library is a proxy to the singleton Storage Market actor (address: f05). Calling one of its methods will result in a cross-actor call being performed.\\n/// @author Zondax AG\\nlibrary MarketAPI {\\n    using BytesCBOR for bytes;\\n    using MarketCBOR for *;\\n    using FilecoinCBOR for *;\\n\\n    /// @notice Deposits the received value into the balance held in escrow.\\n    /// @param providerOrClient address that will have its escrow balance increased\\n    /// @param value amount of funds to be added to the escrow balance\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return data (must be of length 0)\\n    function addBalance(CommonTypes.FilAddress memory providerOrClient, uint256 value) internal returns (int256, bytes memory) {\\n        bytes memory raw_request = providerOrClient.serializeAddress();\\n\\n        (int256 exit_code, bytes memory data) = Actor.callByID(\\n            MarketTypes.ActorID,\\n            MarketTypes.AddBalanceMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request,\\n            value,\\n            false\\n        );\\n        if (data.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n\\n        return (exit_code, data);\\n    }\\n\\n    /// @notice Attempt to withdraw the specified amount from the balance held in escrow.\\n    /// @notice If less than the specified amount is available, yields the entire available balance.\\n    /// @param params `provider_or_client` address, `tokenAmount` to be withdrawn\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return amount that has been withdrawn\\n    function withdrawBalance(MarketTypes.WithdrawBalanceParams memory params) internal returns (int256, CommonTypes.BigInt memory) {\\n        bytes memory raw_request = params.serializeWithdrawBalanceParams();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByID(\\n            MarketTypes.ActorID,\\n            MarketTypes.WithdrawBalanceMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request,\\n            0,\\n            false\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeBytesBigInt());\\n        }\\n\\n        CommonTypes.BigInt memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Return the escrow balance and locked amount for an address.\\n    /// @param addr filecoin address for which escrow balance/locked amount will be queried\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the escrow balance and locked amount for an address.\\n    function getBalance(CommonTypes.FilAddress memory addr) internal view returns (int256, MarketTypes.GetBalanceReturn memory) {\\n        bytes memory raw_request = addr.serializeAddress();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(MarketTypes.ActorID, MarketTypes.GetBalanceMethodNum, Misc.CBOR_CODEC, raw_request);\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeGetBalanceReturn());\\n        }\\n\\n        MarketTypes.GetBalanceReturn memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice This will be available after the deal is published (whether or not is is activated) and up until some undefined period after it is terminated.\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the data commitment and size of a deal proposal.\\n    function getDealDataCommitment(uint64 dealID) internal view returns (int256, MarketTypes.GetDealDataCommitmentReturn memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealDataCommitmentMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeGetDealDataCommitmentReturn());\\n        }\\n\\n        MarketTypes.GetDealDataCommitmentReturn memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the client for the specified deal\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the client of a deal proposal.\\n    function getDealClient(uint64 dealID) internal view returns (int256, uint64) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(MarketTypes.ActorID, MarketTypes.GetDealClientMethodNum, Misc.CBOR_CODEC, raw_request);\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeUint64());\\n        }\\n\\n        uint64 empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the provider for a specified deal\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the provider of a deal proposal.\\n    function getDealProvider(uint64 dealID) internal view returns (int256, uint64) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealProviderMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeUint64());\\n        }\\n\\n        uint64 empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the label of a storage deal\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the label of a deal\\n    function getDealLabel(uint64 dealID) internal view returns (int256, CommonTypes.DealLabel memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(MarketTypes.ActorID, MarketTypes.GetDealLabelMethodNum, Misc.CBOR_CODEC, raw_request);\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeDealLabel());\\n        }\\n\\n        CommonTypes.DealLabel memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the start epoch and duration(in epochs) of a deal proposal.\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the start epoch and duration (in epochs) of a deal proposal.\\n    function getDealTerm(uint64 dealID) internal view returns (int256, MarketTypes.GetDealTermReturn memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(MarketTypes.ActorID, MarketTypes.GetDealTermMethodNum, Misc.CBOR_CODEC, raw_request);\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeGetDealTermReturn());\\n        }\\n\\n        MarketTypes.GetDealTermReturn memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the total price that will be paid from the client to the provider for this deal.\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the per-epoch price of a deal\\n    function getDealTotalPrice(uint64 dealID) internal view returns (int256, CommonTypes.BigInt memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealTotalPriceMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeBytesBigInt());\\n        }\\n\\n        CommonTypes.BigInt memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice get the client collateral requirement for a deal\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the client collateral requirement for a deal\\n    function getDealClientCollateral(uint64 dealID) internal view returns (int256, CommonTypes.BigInt memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealClientCollateralMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeBytesBigInt());\\n        }\\n\\n        CommonTypes.BigInt memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the provider's collateral requirement for a deal\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the provider collateral requirement for a deal\\n    function getDealProviderCollateral(uint64 dealID) internal view returns (int256, CommonTypes.BigInt memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealProviderCollateralMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeBytesBigInt());\\n        }\\n\\n        CommonTypes.BigInt memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Returns the verified flag for a deal\\n    /// @notice Note that the source of truth for verified allocations and claims is the verified registry actor.\\n    /// @param dealID storage deal's id number\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return the verified flag for a deal\\n    function getDealVerified(uint64 dealID) internal view returns (int256, bool) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealVerifiedMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeBool());\\n        }\\n\\n        bool empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Fetches activation state for a deal.\\n    /// @notice This will be available from when the proposal is published until an undefined period after the deal finishes (either normally or by termination).\\n    /// @return USR_NOT_FOUND if the deal doesn't exist (yet), or EX_DEAL_EXPIRED if the deal has been removed from state.\\n    function getDealActivation(uint64 dealID) internal view returns (int256, MarketTypes.GetDealActivationReturn memory) {\\n        bytes memory raw_request = dealID.serializeDealID();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByIDReadOnly(\\n            MarketTypes.ActorID,\\n            MarketTypes.GetDealActivationMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializeGetDealActivationReturn());\\n        }\\n\\n        MarketTypes.GetDealActivationReturn memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n\\n    /// @notice Publish a new set of storage deals (not yet included in a sector).\\n    /// @param params arrays of deals (with their proposals, signatures, etc.)\\n    /// @return exit code (!= 0) if an error occured, 0 otherwise\\n    /// @return ids of the published deals\\n    function publishStorageDeals(MarketTypes.PublishStorageDealsParams memory params) internal returns (int256, MarketTypes.PublishStorageDealsReturn memory) {\\n        bytes memory raw_request = params.serializePublishStorageDealsParams();\\n\\n        (int256 exit_code, bytes memory result) = Actor.callByID(\\n            MarketTypes.ActorID,\\n            MarketTypes.PublishStorageDealsMethodNum,\\n            Misc.CBOR_CODEC,\\n            raw_request,\\n            0,\\n            false\\n        );\\n\\n        if (exit_code == 0) {\\n            return (0, result.deserializePublishStorageDealsReturn());\\n        }\\n\\n        MarketTypes.PublishStorageDealsReturn memory empty_res;\\n        return (exit_code, empty_res);\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/types/CommonTypes.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n\\n/// @title Filecoin actors' common types for Solidity.\\n/// @author Zondax AG\\nlibrary CommonTypes {\\n    /// @dev Protocol byte values\\n    /// @notice These constants represent the byte value for each protocol.\\n    ///         For more information see the Filecoin documentation: \\n    ///         https://docs.filecoin.io/smart-contracts/filecoin-evm-runtime/address-types\\n    bytes1 constant PROTOCOL_ID = hex\\\"00\\\";\\n    bytes1 constant PROTOCOL_SECP256K1 = hex\\\"01\\\";\\n    bytes1 constant PROTOCOL_ACTOR = hex\\\"02\\\";\\n    bytes1 constant PROTOCOL_BLS = hex\\\"03\\\";\\n    bytes1 constant PROTOCOL_DELEGATED = hex\\\"04\\\";\\n\\n    /// @dev EAM actor ID\\n    /// @notice This constant represents the EAM actor ID.\\n    bytes1 constant EAM_ID = hex\\\"0a\\\";\\n\\n    /// @dev Protocols address lengths\\n    /// @notice These constants represent the address lengths for each protocol.\\n    ///         For more information see the Filecoin specification: \\n    ///         https://spec.filecoin.io/#section-appendix\\n    uint256 constant MIN_PROTOCOL_ID_ADDRESS_LENGTH = 1;\\n    uint256 constant MAX_PROTOCOL_ID_ADDRESS_LENGTH = 11;\\n    uint256 constant PROTOCOL_SECP256K1_ACTOR_ADDRESS_LENGTH = 21; // used for both SECP256K1 and ACTOR\\n    uint256 constant PROTOCOL_BLS_ADDRESS_LENGTH = 49;\\n    uint256 constant PROTOCOL_DELEGATED_EAM_ADDRESS_LENGTH = 22;\\n\\n    /// @dev RecieverHook method number\\n    /// @notice This constant represents the UniversalReceiverHook method number.\\n    uint256 constant UniversalReceiverHookMethodNum = 3726118371;\\n\\n    /// @dev Deal label maximum length in bytes\\n    /// @notice This constant represents the maximum length of a deal label in bytes.\\n    uint256 constant MAX_DEAL_LABEL_LENGTH = 256;\\n\\n    /// @param idx index for the failure in batch\\n    /// @param code failure code\\n    struct FailCode {\\n        uint32 idx;\\n        uint32 code;\\n    }\\n\\n    /// @param success_count total successes in batch\\n    /// @param fail_codes list of failures code and index for each failure in batch\\n    struct BatchReturn {\\n        uint32 success_count;\\n        FailCode[] fail_codes;\\n    }\\n\\n    /// @param type_ asset type\\n    /// @param payload payload corresponding to asset type\\n    struct UniversalReceiverParams {\\n        uint32 type_;\\n        bytes payload;\\n    }\\n\\n    /// @param val contains the actual arbitrary number written as binary\\n    /// @param neg indicates if val is negative or not\\n    struct BigInt {\\n        bytes val;\\n        bool neg;\\n    }\\n\\n    /// @param data filecoin address in bytes format\\n    struct FilAddress {\\n        bytes data;\\n    }\\n\\n    /// @param data cid in bytes format\\n    struct Cid {\\n        bytes data;\\n    }\\n\\n    /// @param data deal proposal label in bytes format (it can be utf8 string or arbitrary bytes string).\\n    /// @param isString indicates if the data is string or raw bytes\\n    struct DealLabel {\\n        bytes data;\\n        bool isString;\\n    }\\n\\n    type FilActorId is uint64;\\n\\n    type ChainEpoch is int64;\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/types/MarketTypes.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\nimport \\\"./CommonTypes.sol\\\";\\n\\n/// @title Filecoin market actor types for Solidity.\\n/// @author Zondax AG\\nlibrary MarketTypes {\\n    CommonTypes.FilActorId constant ActorID = CommonTypes.FilActorId.wrap(5);\\n    uint constant AddBalanceMethodNum = 822473126;\\n    uint constant WithdrawBalanceMethodNum = 2280458852;\\n    uint constant GetBalanceMethodNum = 726108461;\\n    uint constant GetDealDataCommitmentMethodNum = 1157985802;\\n    uint constant GetDealClientMethodNum = 128053329;\\n    uint constant GetDealProviderMethodNum = 935081690;\\n    uint constant GetDealLabelMethodNum = 46363526;\\n    uint constant GetDealTermMethodNum = 163777312;\\n    uint constant GetDealTotalPriceMethodNum = 4287162428;\\n    uint constant GetDealClientCollateralMethodNum = 200567895;\\n    uint constant GetDealProviderCollateralMethodNum = 2986712137;\\n    uint constant GetDealVerifiedMethodNum = 2627389465;\\n    uint constant GetDealActivationMethodNum = 2567238399;\\n    uint constant PublishStorageDealsMethodNum = 2236929350;\\n\\n    /// @param provider_or_client the address of provider or client.\\n    /// @param tokenAmount the token amount to withdraw.\\n    struct WithdrawBalanceParams {\\n        CommonTypes.FilAddress provider_or_client;\\n        CommonTypes.BigInt tokenAmount;\\n    }\\n\\n    /// @param balance the escrow balance for this address.\\n    /// @param locked the escrow locked amount for this address.\\n    struct GetBalanceReturn {\\n        CommonTypes.BigInt balance;\\n        CommonTypes.BigInt locked;\\n    }\\n\\n    /// @param data the data commitment of this deal.\\n    /// @param size the size of this deal.\\n    struct GetDealDataCommitmentReturn {\\n        bytes data;\\n        uint64 size;\\n    }\\n\\n    /// @param start the chain epoch to start the deal.\\n    /// @param duration the duration of the deal.\\n    struct GetDealTermReturn {\\n        CommonTypes.ChainEpoch start;\\n        CommonTypes.ChainEpoch duration;\\n    }\\n\\n    /// @param activated Epoch at which the deal was activated, or -1.\\n    /// @param terminated Epoch at which the deal was terminated abnormally, or -1.\\n    struct GetDealActivationReturn {\\n        CommonTypes.ChainEpoch activated;\\n        CommonTypes.ChainEpoch terminated;\\n    }\\n\\n    /// @param deals list of deal proposals signed by a client\\n    struct PublishStorageDealsParams {\\n        ClientDealProposal[] deals;\\n    }\\n\\n    /// @param ids returned storage deal IDs.\\n    /// @param valid_deals represent all the valid deals.\\n    struct PublishStorageDealsReturn {\\n        uint64[] ids;\\n        bytes valid_deals;\\n    }\\n\\n    /// @param piece_cid PieceCID.\\n    /// @param piece_size the size of the piece.\\n    /// @param verified_deal if the deal is verified or not.\\n    /// @param client the address of the storage client.\\n    /// @param provider the address of the storage provider.\\n    /// @param label any label that client choose for the deal.\\n    /// @param start_epoch the chain epoch to start the deal.\\n    /// @param end_epoch the chain epoch to end the deal.\\n    /// @param storage_price_per_epoch the token amount to pay to provider per epoch.\\n    /// @param provider_collateral the token amount as collateral paid by the provider.\\n    /// @param client_collateral the token amount as collateral paid by the client.\\n    struct DealProposal {\\n        CommonTypes.Cid piece_cid;\\n        uint64 piece_size;\\n        bool verified_deal;\\n        CommonTypes.FilAddress client;\\n        CommonTypes.FilAddress provider;\\n        CommonTypes.DealLabel label;\\n        CommonTypes.ChainEpoch start_epoch;\\n        CommonTypes.ChainEpoch end_epoch;\\n        CommonTypes.BigInt storage_price_per_epoch;\\n        CommonTypes.BigInt provider_collateral;\\n        CommonTypes.BigInt client_collateral;\\n    }\\n\\n    /// @param proposal Proposal\\n    /// @param client_signature the signature signed by the client.\\n    struct ClientDealProposal {\\n        DealProposal proposal;\\n        bytes client_signature;\\n    }\\n\\n    struct MarketDealNotifyParams {\\n        bytes dealProposal;\\n        uint64 dealId;\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/utils/Actor.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Misc.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Call actors utilities library, meant to interact with Filecoin builtin actors\\n/// @author Zondax AG\\nlibrary Actor {\\n    /// @notice precompile address for the call_actor precompile\\n    address constant CALL_ACTOR_ADDRESS = 0xfe00000000000000000000000000000000000003;\\n\\n    /// @notice precompile address for the call_actor_id precompile\\n    address constant CALL_ACTOR_ID = 0xfe00000000000000000000000000000000000005;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a static_call to the desired actor\\n    uint64 constant READ_ONLY_FLAG = 0x00000001;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a call to the desired actor\\n    uint64 constant DEFAULT_FLAG = 0x00000000;\\n\\n    /// @notice the provided address is not valid\\n    error InvalidAddress(bytes addr);\\n\\n    /// @notice the smart contract has no enough balance to transfer\\n    error NotEnoughBalance(uint256 balance, uint256 value);\\n\\n    /// @notice the provided actor id is not valid\\n    error InvalidActorID(CommonTypes.FilActorId actorId);\\n\\n    /// @notice an error happened trying to call the actor\\n    error FailToCallActor();\\n\\n    /// @notice the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\\n    error InvalidResponseLength();\\n\\n    /// @notice the codec received is not valid\\n    error InvalidCodec(uint64);\\n\\n    /// @notice the called actor returned an error as part of its expected behaviour\\n    error ActorError(int256 errorCode);\\n\\n    /// @notice the actor is not found\\n    error ActorNotFound();\\n\\n    /// @notice allows to interact with an specific actor by its address (bytes format)\\n    /// @param actor_address actor address (bytes format) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByAddress(\\n        bytes memory actor_address,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (int256, bytes memory) {\\n        if (actor_address.length < 2) {\\n            revert InvalidAddress(actor_address);\\n        }\\n\\n        validatePrecompileCall(CALL_ACTOR_ADDRESS, value);\\n\\n        // We have to delegate-call the call-actor precompile because the call-actor precompile will\\n        // call the target actor on our behalf. This will _not_ delegate to the target `actor_address`.\\n        //\\n        // Specifically:\\n        //\\n        // - `static_call == false`: `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(CALL)-> actor_address\\n        // - `static_call == true`:  `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(STATICCALL)-> actor_address\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ADDRESS).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, actor_address)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to interact with an specific actor by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (int256, bytes memory) {\\n        validatePrecompileCall(CALL_ACTOR_ID, value);\\n\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ID).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, target)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice Readonly version of CallByID\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByIDReadOnly(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request\\n    ) internal view returns (int256, bytes memory) {\\n        function(CommonTypes.FilActorId, uint256, uint64, bytes memory, uint256, bool) internal view returns (int256, bytes memory) callFn;\\n        function(CommonTypes.FilActorId, uint256, uint64, bytes memory, uint256, bool) internal returns (int256, bytes memory) helper = callByID;\\n        assembly {\\n            callFn := helper\\n        }\\n        return callFn(target, method_num, codec, raw_request, 0, true);\\n    }\\n\\n    /// @notice allows to run some generic validations before calling the precompile actor\\n    /// @param addr precompile actor address to run check to\\n    /// @param value tokens to be transferred to the called actor\\n    function validatePrecompileCall(address addr, uint256 value) internal view {\\n        uint balance = address(this).balance;\\n        if (balance < value) {\\n            revert NotEnoughBalance(balance, value);\\n        }\\n\\n        bool actorExists = Misc.addressExists(addr);\\n        if (!actorExists) {\\n            revert ActorNotFound();\\n        }\\n    }\\n\\n    /// @notice allows to interact with an non-singleton actors by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transfered to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\\n    function callNonSingletonByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (int256, bytes memory) {\\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\\n            revert InvalidActorID(target);\\n        }\\n\\n        return callByID(target, method_num, codec, raw_request, value, static_call);\\n    }\\n\\n    /// @notice Readonly version of CallNonSingletonByID\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\\n    function callNonSingletonByIDReadOnly(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request\\n    ) internal view returns (int256, bytes memory) {\\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\\n            revert InvalidActorID(target);\\n        }\\n\\n        return callByIDReadOnly(target, method_num, codec, raw_request);\\n    }\\n\\n    /// @notice parse the response an actor returned\\n    /// @notice it will validate the return code (success) and the codec (valid one)\\n    /// @param raw_response raw data (bytes) the actor returned\\n    /// @return exit code if an error occured, 0 otherwise\\n    /// @return the actual raw data (payload, in bytes) to be parsed according to the actor and method called\\n    function readRespData(bytes memory raw_response) internal pure returns (int256, bytes memory) {\\n        (int256 exit, uint64 return_codec, bytes memory return_value) = abi.decode(raw_response, (int256, uint64, bytes));\\n\\n        if (return_codec == Misc.NONE_CODEC) {\\n            if (return_value.length != 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else if (return_codec == Misc.CBOR_CODEC || return_codec == Misc.DAG_CBOR_CODEC) {\\n            if (return_value.length == 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else {\\n            revert InvalidCodec(return_codec);\\n        }\\n\\n        return (exit, return_value);\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/utils/BigInts.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../vendor/solidity-BigNumber/src/BigNumbers.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\\n/// @author Zondax AG\\nlibrary BigInts {\\n    uint256 constant MAX_UINT = (2 ** 256) - 1;\\n    uint256 constant MAX_INT = ((2 ** 256) / 2) - 1;\\n\\n    error NegativeValueNotAllowed();\\n\\n    /// @notice allow to get a BigInt from a uint256 value\\n    /// @param value uint256 number\\n    /// @return new BigInt\\n    function fromUint256(uint256 value) internal view returns (CommonTypes.BigInt memory) {\\n        BigNumber memory bigNum = BigNumbers.init(value, false);\\n        return CommonTypes.BigInt(bigNum.val, bigNum.neg);\\n    }\\n\\n    /// @notice allow to get a BigInt from a int256 value\\n    /// @param value int256 number\\n    /// @return new BigInt\\n    function fromInt256(int256 value) internal view returns (CommonTypes.BigInt memory) {\\n        uint256 valueAbs = Misc.abs(value);\\n        BigNumber memory bigNum = BigNumbers.init(valueAbs, value < 0);\\n        return CommonTypes.BigInt(bigNum.val, bigNum.neg);\\n    }\\n\\n    /// @notice allow to get a uint256 from a BigInt value.\\n    /// @notice If the value is negative, it will generate an error.\\n    /// @param value BigInt number\\n    /// @return a uint256 value and flog that indicates whether it was possible to convert or not (the value overflows uint256 type)\\n    function toUint256(CommonTypes.BigInt memory value) internal view returns (uint256, bool) {\\n        if (value.neg) {\\n            revert NegativeValueNotAllowed();\\n        }\\n\\n        BigNumber memory max = BigNumbers.init(MAX_UINT, false);\\n        BigNumber memory bigNumValue = BigNumbers.init(value.val, value.neg);\\n        if (BigNumbers.gt(bigNumValue, max)) {\\n            return (0, true);\\n        }\\n\\n        return (uint256(bytes32(bigNumValue.val)), false);\\n    }\\n\\n    /// @notice allow to get a int256 from a BigInt value.\\n    /// @notice If the value is grater than what a int256 can store, it will generate an error.\\n    /// @param value BigInt number\\n    /// @return a int256 value and flog that indicates whether it was possible to convert or not (the value overflows int256 type)\\n    function toInt256(CommonTypes.BigInt memory value) internal view returns (int256, bool) {\\n        BigNumber memory max = BigNumbers.init(MAX_INT, false);\\n        BigNumber memory bigNumValue = BigNumbers.init(value.val, false);\\n        if (BigNumbers.gt(bigNumValue, max)) {\\n            return (0, true);\\n        }\\n\\n        int256 parsedValue = int256(uint256(bytes32(bigNumValue.val)));\\n        return (value.neg ? -1 * parsedValue : parsedValue, false);\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/utils/CborDecode.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n// \\tMajUnsignedInt = 0\\n// \\tMajSignedInt   = 1\\n// \\tMajByteString  = 2\\n// \\tMajTextString  = 3\\n// \\tMajArray       = 4\\n// \\tMajMap         = 5\\n// \\tMajTag         = 6\\n// \\tMajOther       = 7\\n\\nuint8 constant MajUnsignedInt = 0;\\nuint8 constant MajSignedInt = 1;\\nuint8 constant MajByteString = 2;\\nuint8 constant MajTextString = 3;\\nuint8 constant MajArray = 4;\\nuint8 constant MajMap = 5;\\nuint8 constant MajTag = 6;\\nuint8 constant MajOther = 7;\\n\\nuint8 constant TagTypeBigNum = 2;\\nuint8 constant TagTypeNegativeBigNum = 3;\\n\\nuint8 constant True_Type = 21;\\nuint8 constant False_Type = 20;\\n\\n/// @notice This library is a set a functions that allows anyone to decode cbor encoded bytes\\n/// @dev methods in this library try to read the data type indicated from cbor encoded data stored in bytes at a specific index\\n/// @dev if it successes, methods will return the read value and the new index (intial index plus read bytes)\\n/// @author Zondax AG\\nlibrary CBORDecoder {\\n    /// @notice check if next value on the cbor encoded data is null\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    function isNullNext(bytes memory cborData, uint byteIdx) internal pure returns (bool) {\\n        return cborData[byteIdx] == hex\\\"f6\\\";\\n    }\\n\\n    /// @notice attempt to read a bool value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a bool decoded from input bytes and the byte index after moving past the value\\n    function readBool(bytes memory cborData, uint byteIdx) internal pure returns (bool, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajOther, \\\"invalid maj (expected MajOther)\\\");\\n        assert(value == True_Type || value == False_Type);\\n\\n        return (value != False_Type, byteIdx);\\n    }\\n\\n    /// @notice attempt to read the length of a fixed array\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return length of the fixed array decoded from input bytes and the byte index after moving past the value\\n    function readFixedArray(bytes memory cborData, uint byteIdx) internal pure returns (uint, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajArray, \\\"invalid maj (expected MajArray)\\\");\\n\\n        return (len, byteIdx);\\n    }\\n\\n    /// @notice attempt to read an arbitrary length string value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return arbitrary length string decoded from input bytes and the byte index after moving past the value\\n    function readString(bytes memory cborData, uint byteIdx) internal pure returns (string memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTextString, \\\"invalid maj (expected MajTextString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (string(slice), byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read an arbitrary byte string value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return arbitrary byte string decoded from input bytes and the byte index after moving past the value\\n    function readBytes(bytes memory cborData, uint byteIdx) internal pure returns (bytes memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajByteString, \\\"invalid maj (expected MajTag or MajByteString)\\\");\\n\\n        if (maj == MajTag) {\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            assert(maj == MajByteString);\\n        }\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (slice, byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read a bytes32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a bytes32 decoded from input bytes and the byte index after moving past the value\\n    function readBytes32(bytes memory cborData, uint byteIdx) internal pure returns (bytes32, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(32);\\n        uint slice_index = 32 - len;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (bytes32(slice), byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read a uint256 value encoded per cbor specification\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint256 decoded from input bytes and the byte index after moving past the value\\n    function readUInt256(bytes memory cborData, uint byteIdx) internal pure returns (uint256, uint) {\\n        uint8 maj;\\n        uint256 value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajUnsignedInt, \\\"invalid maj (expected MajTag or MajUnsignedInt)\\\");\\n\\n        if (maj == MajTag) {\\n            require(value == TagTypeBigNum, \\\"invalid tag (expected TagTypeBigNum)\\\");\\n\\n            uint len;\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n            require(cborData.length >= byteIdx + len, \\\"slicing out of range\\\");\\n            assembly {\\n                value := mload(add(cborData, add(len, byteIdx)))\\n            }\\n\\n            return (value, byteIdx + len);\\n        }\\n\\n        return (value, byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int256 value encoded per cbor specification\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int256 decoded from input bytes and the byte index after moving past the value\\n    function readInt256(bytes memory cborData, uint byteIdx) internal pure returns (int256, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajSignedInt, \\\"invalid maj (expected MajTag or MajSignedInt)\\\");\\n\\n        if (maj == MajTag) {\\n            assert(value == TagTypeNegativeBigNum);\\n\\n            uint len;\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n            require(cborData.length >= byteIdx + len, \\\"slicing out of range\\\");\\n            assembly {\\n                value := mload(add(cborData, add(len, byteIdx)))\\n            }\\n\\n            return (int256(value), byteIdx + len);\\n        }\\n\\n        return (int256(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint64 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint64 decoded from input bytes and the byte index after moving past the value\\n    function readUInt64(bytes memory cborData, uint byteIdx) internal pure returns (uint64, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint64(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint32 decoded from input bytes and the byte index after moving past the value\\n    function readUInt32(bytes memory cborData, uint byteIdx) internal pure returns (uint32, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint32(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint16 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint16 decoded from input bytes and the byte index after moving past the value\\n    function readUInt16(bytes memory cborData, uint byteIdx) internal pure returns (uint16, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint16(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint8 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint8 decoded from input bytes and the byte index after moving past the value\\n    function readUInt8(bytes memory cborData, uint byteIdx) internal pure returns (uint8, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint8(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int64 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int64 decoded from input bytes and the byte index after moving past the value\\n    function readInt64(bytes memory cborData, uint byteIdx) internal pure returns (int64, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int64(uint64(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int32 decoded from input bytes and the byte index after moving past the value\\n    function readInt32(bytes memory cborData, uint byteIdx) internal pure returns (int32, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int32(uint32(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int16 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int16 decoded from input bytes and the byte index after moving past the value\\n    function readInt16(bytes memory cborData, uint byteIdx) internal pure returns (int16, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int16(uint16(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int8 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int8 decoded from input bytes and the byte index after moving past the value\\n    function readInt8(bytes memory cborData, uint byteIdx) internal pure returns (int8, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int8(uint8(value)), byteIdx);\\n    }\\n\\n    /// @notice slice uint8 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint8 sliced from bytes\\n    function sliceUInt8(bytes memory bs, uint start) internal pure returns (uint8) {\\n        require(bs.length >= start + 1, \\\"slicing out of range\\\");\\n        return uint8(bs[start]);\\n    }\\n\\n    /// @notice slice uint16 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint16 sliced from bytes\\n    function sliceUInt16(bytes memory bs, uint start) internal pure returns (uint16) {\\n        require(bs.length >= start + 2, \\\"slicing out of range\\\");\\n        bytes2 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint16(x);\\n    }\\n\\n    /// @notice slice uint32 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint32 sliced from bytes\\n    function sliceUInt32(bytes memory bs, uint start) internal pure returns (uint32) {\\n        require(bs.length >= start + 4, \\\"slicing out of range\\\");\\n        bytes4 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint32(x);\\n    }\\n\\n    /// @notice slice uint64 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint64 sliced from bytes\\n    function sliceUInt64(bytes memory bs, uint start) internal pure returns (uint64) {\\n        require(bs.length >= start + 8, \\\"slicing out of range\\\");\\n        bytes8 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint64(x);\\n    }\\n\\n    /// @notice Parse cbor header for major type and extra info.\\n    /// @param cbor cbor encoded bytes to parse from\\n    /// @param byteIndex current position to read on the cbor encoded bytes\\n    /// @return major type, extra info and the byte index after moving past header bytes\\n    function parseCborHeader(bytes memory cbor, uint byteIndex) internal pure returns (uint8, uint64, uint) {\\n        uint8 first = sliceUInt8(cbor, byteIndex);\\n        byteIndex += 1;\\n        uint8 maj = (first & 0xe0) >> 5;\\n        uint8 low = first & 0x1f;\\n        // We don't handle CBOR headers with extra > 27, i.e. no indefinite lengths\\n        require(low < 28, \\\"cannot handle headers with extra > 27\\\");\\n\\n        // extra is lower bits\\n        if (low < 24) {\\n            return (maj, low, byteIndex);\\n        }\\n\\n        // extra in next byte\\n        if (low == 24) {\\n            uint8 next = sliceUInt8(cbor, byteIndex);\\n            byteIndex += 1;\\n            require(next >= 24, \\\"invalid cbor\\\"); // otherwise this is invalid cbor\\n            return (maj, next, byteIndex);\\n        }\\n\\n        // extra in next 2 bytes\\n        if (low == 25) {\\n            uint16 extra16 = sliceUInt16(cbor, byteIndex);\\n            byteIndex += 2;\\n            return (maj, extra16, byteIndex);\\n        }\\n\\n        // extra in next 4 bytes\\n        if (low == 26) {\\n            uint32 extra32 = sliceUInt32(cbor, byteIndex);\\n            byteIndex += 4;\\n            return (maj, extra32, byteIndex);\\n        }\\n\\n        // extra in next 8 bytes\\n        assert(low == 27);\\n        uint64 extra64 = sliceUInt64(cbor, byteIndex);\\n        byteIndex += 8;\\n        return (maj, extra64, byteIndex);\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/utils/FilAddresses.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../utils/Leb128.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\\n/// @author Zondax AG\\nlibrary FilAddresses {\\n    using Buffer for Buffer.buffer;\\n\\n    error InvalidAddress();\\n\\n    /// @notice allow to get a FilAddress from an eth address\\n    /// @param addr eth address to convert\\n    /// @return new filecoin address\\n    function fromEthAddress(address addr) internal pure returns (CommonTypes.FilAddress memory) {\\n        return CommonTypes.FilAddress(abi.encodePacked(CommonTypes.PROTOCOL_DELEGATED, CommonTypes.EAM_ID, addr));\\n    }\\n\\n    /// @notice allow to get a eth address from 040a type FilAddress made above\\n    /// @param addr FilAddress to convert\\n    /// @return new eth address\\n    function toEthAddress(CommonTypes.FilAddress memory addr) internal pure returns (address) {\\n        if (\\n            addr.data[0] != CommonTypes.PROTOCOL_DELEGATED || addr.data[1] != CommonTypes.EAM_ID\\n                || addr.data.length != CommonTypes.PROTOCOL_DELEGATED_EAM_ADDRESS_LENGTH\\n        ) {\\n            revert InvalidAddress();\\n        }\\n        bytes memory filAddress = addr.data;\\n        bytes20 ethAddress;\\n\\n        assembly {\\n            ethAddress := mload(add(filAddress, 0x22))\\n        }\\n\\n        return address(ethAddress);\\n    }\\n\\n    /// @notice allow to create a Filecoin address from an actorID\\n    /// @param actorID uint64 actorID\\n    /// @return address filecoin address\\n    function fromActorID(uint64 actorID) internal pure returns (CommonTypes.FilAddress memory) {\\n        Buffer.buffer memory result = Leb128.encodeUnsignedLeb128FromUInt64(actorID);\\n        return CommonTypes.FilAddress(abi.encodePacked(CommonTypes.PROTOCOL_ID, result.buf));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from bytes\\n    /// @param data address in bytes format\\n    /// @return filecoin address\\n    function fromBytes(bytes memory data) internal pure returns (CommonTypes.FilAddress memory) {\\n        CommonTypes.FilAddress memory newAddr = CommonTypes.FilAddress(data);\\n        if (!validate(newAddr)) {\\n            revert InvalidAddress();\\n        }\\n\\n        return newAddr;\\n    }\\n\\n    /// @notice allow to validate if an address is valid or not\\n    /// @dev we are only validating known address types. If the type is not known, the default value is true\\n    /// @param addr the filecoin address to validate\\n    /// @return whether the address is valid or not\\n    function validate(CommonTypes.FilAddress memory addr) internal pure returns (bool) {\\n        if (addr.data[0] == CommonTypes.PROTOCOL_ID) {\\n            return (\\n                addr.data.length > CommonTypes.MIN_PROTOCOL_ID_ADDRESS_LENGTH\\n                    && addr.data.length <= CommonTypes.MAX_PROTOCOL_ID_ADDRESS_LENGTH\\n            );\\n        } else if (addr.data[0] == CommonTypes.PROTOCOL_SECP256K1 || addr.data[0] == CommonTypes.PROTOCOL_ACTOR) {\\n            return addr.data.length == CommonTypes.PROTOCOL_SECP256K1_ACTOR_ADDRESS_LENGTH;\\n        } else if (addr.data[0] == CommonTypes.PROTOCOL_BLS) {\\n            return addr.data.length == CommonTypes.PROTOCOL_BLS_ADDRESS_LENGTH;\\n        } else if (addr.data[0] == CommonTypes.PROTOCOL_DELEGATED && addr.data[1] == CommonTypes.EAM_ID) {\\n            return addr.data.length == CommonTypes.PROTOCOL_DELEGATED_EAM_ADDRESS_LENGTH;\\n        }\\n\\n        return addr.data.length <= 256;\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/utils/Leb128.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2023 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library implement the leb128\\n/// @author Zondax AG\\nlibrary Leb128 {\\n    using Buffer for Buffer.buffer;\\n\\n    /// @notice encode a unsigned integer 64bits into bytes\\n    /// @param value the actor ID to encode\\n    /// @return result return the value in bytes\\n    function encodeUnsignedLeb128FromUInt64(uint64 value) internal pure returns (Buffer.buffer memory result) {\\n        while (true) {\\n            uint64 byte_ = value & 0x7f;\\n            value >>= 7;\\n            if (value == 0) {\\n                result.appendUint8(uint8(byte_));\\n                return result;\\n            }\\n            result.appendUint8(uint8(byte_ | 0x80));\\n        }\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/v0.8/utils/Misc.sol\": {\n      \"content\": \"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Library containing miscellaneous functions used on the project\\n/// @author Zondax AG\\nlibrary Misc {\\n    /// @notice the codec received is not valid\\n    error InvalidCodec(uint64);\\n\\n    /// @notice filecoin method not handled\\n    error MethodNotHandled(uint64);\\n\\n    uint64 constant DAG_CBOR_CODEC = 0x71;\\n    uint64 constant CBOR_CODEC = 0x51;\\n    uint64 constant NONE_CODEC = 0x00;\\n\\n    // Code taken from Openzeppelin repo\\n    // Link: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0320a718e8e07b1d932f5acb8ad9cec9d9eed99b/contracts/utils/math/SignedMath.sol#L37-L42\\n    /// @notice get the abs from a signed number\\n    /// @param n number to get abs from\\n    /// @return unsigned number\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n\\n    /// @notice validate if an address exists or not\\n    /// @dev read this article for more information https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\\n    /// @param addr address to check\\n    /// @return whether the address exists or not\\n    function addressExists(address addr) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return codehash != 0x0;\\n    }\\n\\n    /// Returns the data size required by CBOR.writeFixedNumeric\\n    function getPrefixSize(uint256 data_size) internal pure returns (uint256) {\\n        if (data_size <= 23) {\\n            return 1;\\n        } else if (data_size <= 0xFF) {\\n            return 2;\\n        } else if (data_size <= 0xFFFF) {\\n            return 3;\\n        } else if (data_size <= 0xFFFFFFFF) {\\n            return 5;\\n        }\\n        return 9;\\n    }\\n\\n    function getBytesSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(value.length) + value.length;\\n    }\\n\\n    function getCidSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(2) + value.length;\\n    }\\n\\n    function getFilActorIdSize(CommonTypes.FilActorId value) internal pure returns (uint256) {\\n        uint64 val = CommonTypes.FilActorId.unwrap(value);\\n        return getPrefixSize(uint256(val));\\n    }\\n\\n    function getChainEpochSize(CommonTypes.ChainEpoch value) internal pure returns (uint256) {\\n        int64 val = CommonTypes.ChainEpoch.unwrap(value);\\n        if (val >= 0) {\\n            return getPrefixSize(uint256(uint64(val)));\\n        } else {\\n            return getPrefixSize(uint256(uint64(-1 - val)));\\n        }\\n    }\\n\\n    function getBoolSize() internal pure returns (uint256) {\\n        return getPrefixSize(1);\\n    }\\n}\\n\"\n    },\n    \"filecoin-solidity-api/contracts/vendor/solidity-BigNumber/src/BigNumbers.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title BigNumbers\\n * @dev BigNumbers is a modified version of `github.com/Zondax/solidity-BigNumber/blob/master/src/BigNumbers.sol`, which is licensed under the MIT license.\\n * The code was forked at commit: `39dbb9e2dd186a549c9ad7eb1b4b204dc6705245`\\n * The modifications were made in Ju1y, 2023.\\n */\\n\\n// Definition here allows both the lib and inheriting contracts to use BigNumber directly.\\nstruct BigNumber { \\n    bytes val;\\n    bool neg;\\n    uint bitlen;\\n}\\n\\n/**\\n * @notice BigNumbers library for Solidity.\\n */\\nlibrary BigNumbers {\\n    \\n    /// @notice the value for number 0 of a BigNumber instance.\\n    bytes constant ZERO = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\n    /// @notice the value for number 1 of a BigNumber instance.\\n    bytes constant  ONE = hex\\\"0000000000000000000000000000000000000000000000000000000000000001\\\";\\n    /// @notice the value for number 2 of a BigNumber instance.\\n    bytes constant  TWO = hex\\\"0000000000000000000000000000000000000000000000000000000000000002\\\";\\n\\n    // ***************** BEGIN EXPOSED MANAGEMENT FUNCTIONS ******************\\n    /** @notice verify a BN instance\\n     *  @dev checks if the BN is in the correct format. operations should only be carried out on\\n     *       verified BNs, so it is necessary to call this if your function takes an arbitrary BN\\n     *       as input.\\n     *\\n     *  @param bn BigNumber instance\\n     */\\n    function verify(\\n        BigNumber memory bn\\n    ) internal pure {\\n        uint msword; \\n        bytes memory val = bn.val;\\n        assembly {msword := mload(add(val,0x20))} //get msword of result\\n        if(msword==0) require(isZero(bn));\\n        else require((bn.val.length % 32 == 0) && (msword>>((bn.bitlen%256)-1)==1));\\n    }\\n\\n    /** @notice initialize a BN instance\\n     *  @dev wrapper function for _init. initializes from bytes value.\\n     *       Allows passing bitLength of value. This is NOT verified in the internal function. Only use where bitlen is\\n     *       explicitly known; otherwise use the other init function.\\n     *\\n     *  @param val BN value. may be of any size.\\n     *  @param neg neg whether the BN is +/-\\n     *  @param bitlen bit length of output.\\n     *  @return BigNumber instance\\n     */\\n    function init(\\n        bytes memory val, \\n        bool neg, \\n        uint bitlen\\n    ) internal view returns(BigNumber memory){\\n        return _init(val, neg, bitlen);\\n    }\\n    \\n    /** @notice initialize a BN instance\\n     *  @dev wrapper function for _init. initializes from bytes value.\\n     *\\n     *  @param val BN value. may be of any size.\\n     *  @param neg neg whether the BN is +/-\\n     *  @return BigNumber instance\\n     */\\n    function init(\\n        bytes memory val, \\n        bool neg\\n    ) internal view returns(BigNumber memory){\\n        return _init(val, neg, 0);\\n    }\\n\\n    /** @notice initialize a BN instance\\n     *  @dev wrapper function for _init. initializes from uint value (converts to bytes); \\n     *       tf. resulting BN is in the range -2^256-1 ... 2^256-1.\\n     *\\n     *  @param val uint value.\\n     *  @param neg neg whether the BN is +/-\\n     *  @return BigNumber instance\\n     */\\n    function init(\\n        uint val, \\n        bool neg\\n    ) internal view returns(BigNumber memory){\\n        return _init(abi.encodePacked(val), neg, 0);\\n    }\\n    // ***************** END EXPOSED MANAGEMENT FUNCTIONS ******************\\n\\n\\n\\n\\n    // ***************** BEGIN EXPOSED CORE CALCULATION FUNCTIONS ******************\\n    /** @notice BigNumber addition: a + b.\\n      * @dev add: Initially prepare BigNumbers for addition operation; internally calls actual addition/subtraction,\\n      *           depending on inputs.\\n      *           In order to do correct addition or subtraction we have to handle the sign.\\n      *           This function discovers the sign of the result based on the inputs, and calls the correct operation.\\n      *\\n      * @param a first BN\\n      * @param b second BN\\n      * @return r result  - addition of a and b.\\n      */\\n    function add(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(BigNumber memory r) {\\n        if(a.bitlen==0 && b.bitlen==0) return zero();\\n        if(a.bitlen==0) return b;\\n        if(b.bitlen==0) return a;\\n        bytes memory val;\\n        uint bitlen;\\n        int compare = cmp(a,b,false);\\n\\n        if(a.neg || b.neg){\\n            if(a.neg && b.neg){\\n                if(compare>=0) (val, bitlen) = _add(a.val,b.val,a.bitlen);\\n                else (val, bitlen) = _add(b.val,a.val,b.bitlen);\\n                r.neg = true;\\n            }\\n            else {\\n                if(compare==1){\\n                    (val, bitlen) = _sub(a.val,b.val);\\n                    r.neg = a.neg;\\n                }\\n                else if(compare==-1){\\n                    (val, bitlen) = _sub(b.val,a.val);\\n                    r.neg = !a.neg;\\n                }\\n                else return zero();//one pos and one neg, and same value.\\n            }\\n        }\\n        else{\\n            if(compare>=0){ // a>=b\\n                (val, bitlen) = _add(a.val,b.val,a.bitlen);\\n            }\\n            else {\\n                (val, bitlen) = _add(b.val,a.val,b.bitlen);\\n            }\\n            r.neg = false;\\n        }\\n\\n        r.val = val;\\n        r.bitlen = (bitlen);\\n    }\\n\\n    /** @notice BigNumber subtraction: a - b.\\n      * @dev sub: Initially prepare BigNumbers for subtraction operation; internally calls actual addition/subtraction,\\n                  depending on inputs.\\n      *           In order to do correct addition or subtraction we have to handle the sign.\\n      *           This function discovers the sign of the result based on the inputs, and calls the correct operation.\\n      *\\n      * @param a first BN\\n      * @param b second BN\\n      * @return r result - subtraction of a and b.\\n      */  \\n    function sub(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(BigNumber memory r) {\\n        if(a.bitlen==0 && b.bitlen==0) return zero();\\n        bytes memory val;\\n        int compare;\\n        uint bitlen;\\n        compare = cmp(a,b,false);\\n        if(a.neg || b.neg) {\\n            if(a.neg && b.neg){           \\n                if(compare == 1) { \\n                    (val,bitlen) = _sub(a.val,b.val); \\n                    r.neg = true;\\n                }\\n                else if(compare == -1) { \\n\\n                    (val,bitlen) = _sub(b.val,a.val); \\n                    r.neg = false;\\n                }\\n                else return zero();\\n            }\\n            else {\\n                if(compare >= 0) (val,bitlen) = _add(a.val,b.val,a.bitlen);\\n                else (val,bitlen) = _add(b.val,a.val,b.bitlen);\\n                \\n                r.neg = (a.neg) ? true : false;\\n            }\\n        }\\n        else {\\n            if(compare == 1) {\\n                (val,bitlen) = _sub(a.val,b.val);\\n                r.neg = false;\\n             }\\n            else if(compare == -1) { \\n                (val,bitlen) = _sub(b.val,a.val);\\n                r.neg = true;\\n            }\\n            else return zero(); \\n        }\\n        \\n        r.val = val;\\n        r.bitlen = (bitlen);\\n    }\\n\\n    /** @notice BigNumber multiplication: a * b.\\n      * @dev mul: takes two BigNumbers and multiplys them. Order is irrelevant.\\n      *              multiplication achieved using modexp precompile:\\n      *                 (a * b) = ((a + b)**2 - (a - b)**2) / 4\\n      *\\n      * @param a first BN\\n      * @param b second BN\\n      * @return r result - multiplication of a and b.\\n      */\\n    function mul(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal view returns(BigNumber memory r){\\n            \\n        BigNumber memory lhs = add(a,b);\\n        BigNumber memory fst = modexp(lhs, two(), _powModulus(lhs, 2)); // (a+b)^2\\n        \\n        // no need to do subtraction part of the equation if a == b; if so, it has no effect on final result.\\n        if(!eq(a,b)) {\\n            BigNumber memory rhs = sub(a,b);\\n            BigNumber memory snd = modexp(rhs, two(), _powModulus(rhs, 2)); // (a-b)^2\\n            r = _shr(sub(fst, snd) , 2); // (a * b) = (((a + b)**2 - (a - b)**2) / 4\\n        }\\n        else {\\n            r = _shr(fst, 2); // a==b ? (((a + b)**2 / 4\\n        }\\n    }\\n\\n    /** @notice BigNumber division verification: a * b.\\n      * @dev div: takes three BigNumbers (a,b and result), and verifies that a/b == result.\\n      * Performing BigNumber division on-chain is a significantly expensive operation. As a result, \\n      * we expose the ability to verify the result of a division operation, which is a constant time operation. \\n      *              (a/b = result) == (a = b * result)\\n      *              Integer division only; therefore:\\n      *                verify ((b*result) + (a % (b*result))) == a.\\n      *              eg. 17/7 == 2:\\n      *                verify  (7*2) + (17 % (7*2)) == 17.\\n      * The function returns a bool on successful verification. The require statements will ensure that false can never\\n      *  be returned, however inheriting contracts may also want to put this function inside a require statement.\\n      *  \\n      * @param a first BigNumber\\n      * @param b second BigNumber\\n      * @param r result BigNumber\\n      * @return bool whether or not the operation was verified\\n      */\\n    function divVerify(\\n        BigNumber memory a, \\n        BigNumber memory b, \\n        BigNumber memory r\\n    ) internal view returns(bool) {\\n\\n        // first do zero check.\\n        // if a<b (always zero) and r==zero (input check), return true.\\n        if(cmp(a, b, false) == -1){\\n            require(cmp(zero(), r, false)==0);\\n            return true;\\n        }\\n\\n        // Following zero check:\\n        //if both negative: result positive\\n        //if one negative: result negative\\n        //if neither negative: result positive\\n        bool positiveResult = ( a.neg && b.neg ) || (!a.neg && !b.neg);\\n        require(positiveResult ? !r.neg : r.neg);\\n        \\n        // require denominator to not be zero.\\n        require(!(cmp(b,zero(),true)==0));\\n        \\n        // division result check assumes inputs are positive.\\n        // we have already checked for result sign so this is safe.\\n        bool[3] memory negs = [a.neg, b.neg, r.neg];\\n        a.neg = false;\\n        b.neg = false;\\n        r.neg = false;\\n\\n        // do multiplication (b * r)\\n        BigNumber memory fst = mul(b,r);\\n        // check if we already have 'a' (ie. no remainder after division). if so, no mod necessary, and return true.\\n        if(cmp(fst,a,true)==0) return true;\\n        //a mod (b*r)\\n        BigNumber memory snd = modexp(a,one(),fst); \\n        // ((b*r) + a % (b*r)) == a\\n        require(cmp(add(fst,snd),a,true)==0); \\n\\n        a.neg = negs[0];\\n        b.neg = negs[1];\\n        r.neg = negs[2];\\n\\n        return true;\\n    }\\n\\n    /** @notice BigNumber exponentiation: a ^ b.\\n      * @dev pow: takes a BigNumber and a uint (a,e), and calculates a^e.\\n      * modexp precompile is used to achieve a^e; for this is work, we need to work out the minimum modulus value \\n      * such that the modulus passed to modexp is not used. the result of a^e can never be more than size bitlen(a) * e.\\n      * \\n      * @param a BigNumber\\n      * @param e exponent\\n      * @return r result BigNumber\\n      */\\n    function pow(\\n        BigNumber memory a, \\n        uint e\\n    ) internal view returns(BigNumber memory){\\n        return modexp(a, init(e, false), _powModulus(a, e));\\n    }\\n\\n    /** @notice BigNumber modulus: a % n.\\n      * @dev mod: takes a BigNumber and modulus BigNumber (a,n), and calculates a % n.\\n      * modexp precompile is used to achieve a % n; an exponent of value '1' is passed.\\n      * @param a BigNumber\\n      * @param n modulus BigNumber\\n      * @return r result BigNumber\\n      */\\n    function mod(\\n        BigNumber memory a, \\n        BigNumber memory n\\n    ) internal view returns(BigNumber memory){\\n      return modexp(a,one(),n);\\n    }\\n\\n    /** @notice BigNumber modular exponentiation: a^e mod n.\\n      * @dev modexp: takes base, exponent, and modulus, internally computes base^exponent % modulus using the precompile at address 0x5, and creates new BigNumber.\\n      *              this function is overloaded: it assumes the exponent is positive. if not, the other method is used, whereby the inverse of the base is also passed.\\n      *\\n      * @param a base BigNumber\\n      * @param e exponent BigNumber\\n      * @param n modulus BigNumber\\n      * @return result BigNumber\\n      */    \\n    function modexp(\\n        BigNumber memory a, \\n        BigNumber memory e, \\n        BigNumber memory n\\n    ) internal view returns(BigNumber memory) {\\n        //if exponent is negative, other method with this same name should be used.\\n        //if modulus is negative or zero, we cannot perform the operation.\\n        require(  e.neg==false\\n                && n.neg==false\\n                && !isZero(n.val));\\n\\n        bytes memory _result = _modexp(a.val,e.val,n.val);\\n        //get bitlen of result (TODO: optimise. we know bitlen is in the same byte as the modulus bitlen byte)\\n        uint bitlen = bitLength(_result);\\n        \\n        // if result is 0, immediately return.\\n        if(bitlen == 0) return zero();\\n        // if base is negative AND exponent is odd, base^exp is negative, and tf. result is negative;\\n        // in that case we make the result positive by adding the modulus.\\n        if(a.neg && isOdd(e)) return add(BigNumber(_result, true, bitlen), n);\\n        // in any other case we return the positive result.\\n        return BigNumber(_result, false, bitlen);\\n    }\\n\\n    /** @notice BigNumber modular exponentiation with negative base: inv(a)==a_inv && a_inv^e mod n.\\n    /** @dev modexp: takes base, base inverse, exponent, and modulus, asserts inverse(base)==base inverse, \\n      *              internally computes base_inverse^exponent % modulus and creates new BigNumber.\\n      *              this function is overloaded: it assumes the exponent is negative. \\n      *              if not, the other method is used, where the inverse of the base is not passed.\\n      *\\n      * @param a base BigNumber\\n      * @param ai base inverse BigNumber\\n      * @param e exponent BigNumber\\n      * @param a modulus\\n      * @return BigNumber memory result.\\n      */ \\n    function modexp(\\n        BigNumber memory a, \\n        BigNumber memory ai, \\n        BigNumber memory e, \\n        BigNumber memory n) \\n    internal view returns(BigNumber memory) {\\n        // base^-exp = (base^-1)^exp\\n        require(!a.neg && e.neg);\\n\\n        //if modulus is negative or zero, we cannot perform the operation.\\n        require(!n.neg && !isZero(n.val));\\n\\n        //base_inverse == inverse(base, modulus)\\n        require(modinvVerify(a, n, ai)); \\n            \\n        bytes memory _result = _modexp(ai.val,e.val,n.val);\\n        //get bitlen of result (TODO: optimise. we know bitlen is in the same byte as the modulus bitlen byte)\\n        uint bitlen = bitLength(_result);\\n\\n        // if result is 0, immediately return.\\n        if(bitlen == 0) return zero();\\n        // if base_inverse is negative AND exponent is odd, base_inverse^exp is negative, and tf. result is negative;\\n        // in that case we make the result positive by adding the modulus.\\n        if(ai.neg && isOdd(e)) return add(BigNumber(_result, true, bitlen), n);\\n        // in any other case we return the positive result.\\n        return BigNumber(_result, false, bitlen);\\n    }\\n \\n    /** @notice modular multiplication: (a*b) % n.\\n      * @dev modmul: Takes BigNumbers for a, b, and modulus, and computes (a*b) % modulus\\n      *              We call mul for the two input values, before calling modexp, passing exponent as 1.\\n      *              Sign is taken care of in sub-functions.\\n      *\\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @param n Modulus BigNumber\\n      * @return result BigNumber\\n      */\\n    function modmul(\\n        BigNumber memory a, \\n        BigNumber memory b, \\n        BigNumber memory n) internal view returns(BigNumber memory) {       \\n        return mod(mul(a,b), n);       \\n    }\\n\\n    /** @notice modular inverse verification: Verifies that (a*r) % n == 1.\\n      * @dev modinvVerify: Takes BigNumbers for base, modulus, and result, verifies (base*result)%modulus==1, and returns result.\\n      *              Similar to division, it's far cheaper to verify an inverse operation on-chain than it is to calculate it, so we allow the user to pass their own result.\\n      *\\n      * @param a base BigNumber\\n      * @param n modulus BigNumber\\n      * @param r result BigNumber\\n      * @return boolean result\\n      */\\n    function modinvVerify(\\n        BigNumber memory a, \\n        BigNumber memory n, \\n        BigNumber memory r\\n    ) internal view returns(bool) {\\n        require(!a.neg && !n.neg); //assert positivity of inputs.\\n        /*\\n         * the following proves:\\n         * - user result passed is correct for values base and modulus\\n         * - modular inverse exists for values base and modulus.\\n         * otherwise it fails.\\n         */        \\n        require(cmp(modmul(a, r, n),one(),true)==0);\\n        \\n        return true;\\n    }\\n    // ***************** END EXPOSED CORE CALCULATION FUNCTIONS ******************\\n\\n\\n\\n\\n    // ***************** START EXPOSED HELPER FUNCTIONS ******************\\n    /** @notice BigNumber odd number check\\n      * @dev isOdd: returns 1 if BigNumber value is an odd number and 0 otherwise.\\n      *              \\n      * @param a BigNumber\\n      * @return r Boolean result\\n      */  \\n    function isOdd(\\n        BigNumber memory a\\n    ) internal pure returns(bool r){\\n        assembly{\\n            let a_ptr := add(mload(a), mload(mload(a))) // go to least significant word\\n            r := mod(mload(a_ptr),2)                      // mod it with 2 (returns 0 or 1) \\n        }\\n    }\\n\\n    /** @notice BigNumber comparison\\n      * @dev cmp: Compares BigNumbers a and b. 'signed' parameter indiciates whether to consider the sign of the inputs.\\n      *           'trigger' is used to decide this - \\n      *              if both negative, invert the result; \\n      *              if both positive (or signed==false), trigger has no effect;\\n      *              if differing signs, we return immediately based on input.\\n      *           returns -1 on a<b, 0 on a==b, 1 on a>b.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @param signed whether to consider sign of inputs\\n      * @return int result\\n      */\\n    function cmp(\\n        BigNumber memory a, \\n        BigNumber memory b, \\n        bool signed\\n    ) internal pure returns(int){\\n        int trigger = 1;\\n        if(signed){\\n            if(a.neg && b.neg) trigger = -1;\\n            else if(a.neg==false && b.neg==true) return 1;\\n            else if(a.neg==true && b.neg==false) return -1;\\n        }\\n\\n        if(a.bitlen>b.bitlen) return    trigger;   // 1*trigger\\n        if(b.bitlen>a.bitlen) return -1*trigger;\\n\\n        uint a_ptr;\\n        uint b_ptr;\\n        uint a_word;\\n        uint b_word;\\n\\n        uint len = a.val.length; //bitlen is same so no need to check length.\\n\\n        assembly{\\n            a_ptr := add(mload(a),0x20) \\n            b_ptr := add(mload(b),0x20)\\n        }\\n\\n        for(uint i=0; i<len;i+=32){\\n            assembly{\\n                a_word := mload(add(a_ptr,i))\\n                b_word := mload(add(b_ptr,i))\\n            }\\n\\n            if(a_word>b_word) return    trigger; // 1*trigger\\n            if(b_word>a_word) return -1*trigger; \\n\\n        }\\n\\n        return 0; //same value.\\n    }\\n\\n    /** @notice BigNumber equality\\n      * @dev eq: returns true if a==b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function eq(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==0) ? true : false;\\n    }\\n\\n    /** @notice BigNumber greater than\\n      * @dev eq: returns true if a>b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function gt(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==1) ? true : false;\\n    }\\n\\n    /** @notice BigNumber greater than or equal to\\n      * @dev eq: returns true if a>=b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function gte(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==1 || result==0) ? true : false;\\n    }\\n\\n    /** @notice BigNumber less than\\n      * @dev eq: returns true if a<b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function lt(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==-1) ? true : false;\\n    }\\n\\n    /** @notice BigNumber less than or equal o\\n      * @dev eq: returns true if a<=b. sign always considered.\\n      *           \\n      * @param a BigNumber\\n      * @param b BigNumber\\n      * @return boolean result\\n      */\\n    function lte(\\n        BigNumber memory a, \\n        BigNumber memory b\\n    ) internal pure returns(bool){\\n        int result = cmp(a, b, true);\\n        return (result==-1 || result==0) ? true : false;\\n    }\\n\\n    /** @notice right shift BigNumber value\\n      * @dev shr: right shift BigNumber a by 'bits' bits.\\n             copies input value to new memory location before shift and calls _shr function after. \\n      * @param a BigNumber value to shift\\n      * @param bits amount of bits to shift by\\n      * @return result BigNumber\\n      */\\n    function shr(\\n        BigNumber memory a, \\n        uint bits\\n    ) internal view returns(BigNumber memory){\\n        require(!a.neg);\\n        return _shr(a, bits);\\n    }\\n\\n    /** @notice right shift BigNumber memory 'dividend' by 'bits' bits.\\n      * @dev _shr: Shifts input value in-place, ie. does not create new memory. shr function does this.\\n      * right shift does not necessarily have to copy into a new memory location. where the user wishes the modify\\n      * the existing value they have in place, they can use this.  \\n      * @param bn value to shift\\n      * @param bits amount of bits to shift by\\n      * @return r result\\n      */\\n    function _shr(BigNumber memory bn, uint bits) internal view returns(BigNumber memory){\\n        uint length;\\n        assembly { length := mload(mload(bn)) }\\n\\n        // if bits is >= the bitlength of the value the result is always 0\\n        if(bits >= bn.bitlen) return BigNumber(ZERO,false,0); \\n        \\n        // set bitlen initially as we will be potentially modifying 'bits'\\n        bn.bitlen = bn.bitlen-(bits);\\n\\n        // handle shifts greater than 256:\\n        // if bits is greater than 256 we can simply remove any trailing words, by altering the BN length. \\n        // we also update 'bits' so that it is now in the range 0..256.\\n        assembly {\\n            if or(gt(bits, 0x100), eq(bits, 0x100)) {\\n                length := sub(length, mul(div(bits, 0x100), 0x20))\\n                mstore(mload(bn), length)\\n                bits := mod(bits, 0x100)\\n            }\\n\\n            // if bits is multiple of 8 (byte size), we can simply use identity precompile for cheap memcopy.\\n            // otherwise we shift each word, starting at the least signifcant word, one-by-one using the mask technique.\\n            // TODO it is possible to do this without the last two operations, see SHL identity copy.\\n            let bn_val_ptr := mload(bn)\\n            switch eq(mod(bits, 8), 0)\\n              case 1 {  \\n                  let bytes_shift := div(bits, 8)\\n                  let in          := mload(bn)\\n                  let inlength    := mload(in)\\n                  let insize      := add(inlength, 0x20)\\n                  let out         := add(in,     bytes_shift)\\n                  let outsize     := sub(insize, bytes_shift)\\n                  let success     := staticcall(450, 0x4, in, insize, out, insize)\\n                  mstore8(add(out, 0x1f), 0) // maintain our BN layout following identity call:\\n                  mstore(in, inlength)         // set current length byte to 0, and reset old length.\\n              }\\n              default {\\n                  let mask\\n                  let lsw\\n                  let mask_shift := sub(0x100, bits)\\n                  let lsw_ptr := add(bn_val_ptr, length)   \\n                  for { let i := length } eq(eq(i,0),0) { i := sub(i, 0x20) } { // for(int i=max_length; i!=0; i-=32)\\n                      switch eq(i,0x20)                                         // if i==32:\\n                          case 1 { mask := 0 }                                  //    - handles lsword: no mask needed.\\n                          default { mask := mload(sub(lsw_ptr,0x20)) }          //    - else get mask (previous word)\\n                      lsw := shr(bits, mload(lsw_ptr))                          // right shift current by bits\\n                      mask := shl(mask_shift, mask)                             // left shift next significant word by mask_shift\\n                      mstore(lsw_ptr, or(lsw,mask))                             // store OR'd mask and shifted bits in-place\\n                      lsw_ptr := sub(lsw_ptr, 0x20)                             // point to next bits.\\n                  }\\n              }\\n\\n            // The following removes the leading word containing all zeroes in the result should it exist, \\n            // as well as updating lengths and pointers as necessary.\\n            let msw_ptr := add(bn_val_ptr,0x20)\\n            switch eq(mload(msw_ptr), 0) \\n                case 1 {\\n                   mstore(msw_ptr, sub(mload(bn_val_ptr), 0x20)) // store new length in new position\\n                   mstore(bn, msw_ptr)                           // update pointer from bn\\n                }\\n                default {}\\n        }\\n    \\n\\n        return bn;\\n    }\\n\\n    /** @notice left shift BigNumber value\\n      * @dev shr: left shift BigNumber a by 'bits' bits.\\n                  ensures the value is not negative before calling the private function.\\n      * @param a BigNumber value to shift\\n      * @param bits amount of bits to shift by\\n      * @return result BigNumber\\n      */\\n    function shl(\\n        BigNumber memory a, \\n        uint bits\\n    ) internal view returns(BigNumber memory){\\n        require(!a.neg);\\n        return _shl(a, bits);\\n    }\\n\\n    /** @notice sha3 hash a BigNumber.\\n      * @dev hash: takes a BigNumber and performs sha3 hash on it.\\n      *            we hash each BigNumber WITHOUT it's first word - first word is a pointer to the start of the bytes value,\\n      *            and so is different for each struct.\\n      *             \\n      * @param a BigNumber\\n      * @return h bytes32 hash.\\n      */\\n    function hash(\\n        BigNumber memory a\\n    ) internal pure returns(bytes32 h) {\\n        //amount of words to hash = all words of the value and three extra words: neg, bitlen & value length.     \\n        assembly {\\n            h := keccak256( add(a,0x20), add (mload(mload(a)), 0x60 ) ) \\n        }\\n    }\\n\\n    /** @notice BigNumber full zero check\\n      * @dev isZero: checks if the BigNumber is in the default zero format for BNs (ie. the result from zero()).\\n      *             \\n      * @param a BigNumber\\n      * @return boolean result.\\n      */\\n    function isZero(\\n        BigNumber memory a\\n    ) internal pure returns(bool) {\\n        return isZero(a.val) && a.val.length==0x20 && !a.neg && a.bitlen == 0;\\n    }\\n\\n\\n    /** @notice bytes zero check\\n      * @dev isZero: checks if input bytes value resolves to zero.\\n      *             \\n      * @param a bytes value\\n      * @return boolean result.\\n      */\\n    function isZero(\\n        bytes memory a\\n    ) internal pure returns(bool) {\\n        uint msword;\\n        uint msword_ptr;\\n        assembly {\\n            msword_ptr := add(a,0x20)\\n        }\\n        for(uint i=0; i<a.length; i+=32) {\\n            assembly { msword := mload(msword_ptr) } // get msword of input\\n            if(msword > 0) return false;\\n            assembly { msword_ptr := add(msword_ptr, 0x20) }\\n        }\\n        return true;\\n\\n    }\\n\\n    /** @notice BigNumber value bit length\\n      * @dev bitLength: returns BigNumber value bit length- ie. log2 (most significant bit of value)\\n      *             \\n      * @param a BigNumber\\n      * @return uint bit length result.\\n      */\\n    function bitLength(\\n        BigNumber memory a\\n    ) internal pure returns(uint){\\n        return bitLength(a.val);\\n    }\\n\\n    /** @notice bytes bit length\\n      * @dev bitLength: returns bytes bit length- ie. log2 (most significant bit of value)\\n      *             \\n      * @param a bytes value\\n      * @return r uint bit length result.\\n      */\\n    function bitLength(\\n        bytes memory a\\n    ) internal pure returns(uint r){\\n        if(isZero(a)) return 0;\\n        uint msword; \\n        assembly {\\n            msword := mload(add(a,0x20))               // get msword of input\\n        }\\n        r = bitLength(msword);                         // get bitlen of msword, add to size of remaining words.\\n        assembly {                                           \\n            r := add(r, mul(sub(mload(a), 0x20) , 8))  // res += (val.length-32)*8;  \\n        }\\n    }\\n\\n    /** @notice uint bit length\\n        @dev bitLength: get the bit length of a uint input - ie. log2 (most significant bit of 256 bit value (one EVM word))\\n      *                       credit: Tjaden Hess @ ethereum.stackexchange             \\n      * @param a uint value\\n      * @return r uint bit length result.\\n      */\\n    function bitLength(\\n        uint a\\n    ) internal pure returns (uint r){\\n        assembly {\\n            switch eq(a, 0)\\n            case 1 {\\n                r := 0\\n            }\\n            default {\\n                let arg := a\\n                a := sub(a,1)\\n                a := or(a, div(a, 0x02))\\n                a := or(a, div(a, 0x04))\\n                a := or(a, div(a, 0x10))\\n                a := or(a, div(a, 0x100))\\n                a := or(a, div(a, 0x10000))\\n                a := or(a, div(a, 0x100000000))\\n                a := or(a, div(a, 0x10000000000000000))\\n                a := or(a, div(a, 0x100000000000000000000000000000000))\\n                a := add(a, 1)\\n                let m := mload(0x40)\\n                mstore(m,           0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\\n                mstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\\n                mstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\\n                mstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\\n                mstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\\n                mstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\\n                mstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\\n                mstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\\n                mstore(0x40, add(m, 0x100))\\n                let magic := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\\n                let shift := 0x100000000000000000000000000000000000000000000000000000000000000\\n                let _a := div(mul(a, magic), shift)\\n                r := div(mload(add(m,sub(255,_a))), shift)\\n                r := add(r, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\\n                // where a is a power of two, result needs to be incremented. we use the power of two trick here: if(arg & arg-1 == 0) ++r;\\n                if eq(and(arg, sub(arg, 1)), 0) {\\n                    r := add(r, 1) \\n                }\\n            }\\n        }\\n    }\\n\\n    /** @notice BigNumber zero value\\n        @dev zero: returns zero encoded as a BigNumber\\n      * @return zero encoded as BigNumber\\n      */\\n    function zero(\\n    ) internal pure returns(BigNumber memory) {\\n        return BigNumber(ZERO, false, 0);\\n    }\\n\\n    /** @notice BigNumber one value\\n        @dev one: returns one encoded as a BigNumber\\n      * @return one encoded as BigNumber\\n      */\\n    function one(\\n    ) internal pure returns(BigNumber memory) {\\n        return BigNumber(ONE, false, 1);\\n    }\\n\\n    /** @notice BigNumber two value\\n        @dev two: returns two encoded as a BigNumber\\n      * @return two encoded as BigNumber\\n      */\\n    function two(\\n    ) internal pure returns(BigNumber memory) {\\n        return BigNumber(TWO, false, 2);\\n    }\\n    // ***************** END EXPOSED HELPER FUNCTIONS ******************\\n\\n\\n\\n\\n\\n    // ***************** START PRIVATE MANAGEMENT FUNCTIONS ******************\\n    /** @notice Create a new BigNumber.\\n        @dev init: overloading allows caller to obtionally pass bitlen where it is known - as it is cheaper to do off-chain and verify on-chain. \\n      *            we assert input is in data structure as defined above, and that bitlen, if passed, is correct.\\n      *            'copy' parameter indicates whether or not to copy the contents of val to a new location in memory (for example where you pass \\n      *            the contents of another variable's value in)\\n      * @param val bytes - bignum value.\\n      * @param neg bool - sign of value\\n      * @param bitlen uint - bit length of value\\n      * @return r BigNumber initialized value.\\n      */\\n    function _init(\\n        bytes memory val, \\n        bool neg, \\n        uint bitlen\\n    ) private view returns(BigNumber memory r){ \\n        // use identity at location 0x4 for cheap memcpy.\\n        // grab contents of val, load starting from memory end, update memory end pointer.\\n        assembly {\\n            let data := add(val, 0x20)\\n            let length := mload(val)\\n            let out\\n            let freemem := mload(0x40)\\n            switch eq(mod(length, 0x20), 0)                       // if(val.length % 32 == 0)\\n                case 1 {\\n                    out     := add(freemem, 0x20)                 // freememory location + length word\\n                    mstore(freemem, length)                       // set new length \\n                }\\n                default { \\n                    let offset  := sub(0x20, mod(length, 0x20))   // offset: 32 - (length % 32)\\n                    out     := add(add(freemem, offset), 0x20)    // freememory location + offset + length word\\n                    mstore(freemem, add(length, offset))          // set new length \\n                }\\n            mstore(add(freemem, 0x20), 0)\\n            pop(staticcall(450, 0x4, data, length, out, length))  // copy into 'out' memory location\\n            mstore(0x40, add(freemem, add(mload(freemem), 0x20))) // update the free memory pointer\\n            \\n            // handle leading zero words. assume freemem is pointer to bytes value\\n            let bn_length := mload(freemem)\\n            for { } eq ( eq(bn_length, 0x20), 0) { } {            // for(; length!=32; length-=32)\\n             switch eq(mload(add(freemem, 0x20)),0)               // if(msword==0):\\n                    case 1 { freemem := add(freemem, 0x20) }      //     update length pointer\\n                    default { break }                             // else: loop termination. non-zero word found\\n                bn_length := sub(bn_length,0x20)                          \\n            } \\n            mstore(freemem, bn_length)                             \\n\\n            mstore(r, freemem)                                    // store new bytes value in r\\n            mstore(add(r, 0x20), neg)                             // store neg value in r\\n        }\\n\\n        r.bitlen = bitlen == 0 ? bitLength(r.val) : bitlen;\\n    }\\n    // ***************** END PRIVATE MANAGEMENT FUNCTIONS ******************\\n\\n\\n\\n\\n\\n    // ***************** START PRIVATE CORE CALCULATION FUNCTIONS ******************\\n    /** @notice takes two BigNumber memory values and the bitlen of the max value, and adds them.\\n      * @dev _add: This function is private and only callable from add: therefore the values may be of different sizes,\\n      *            in any order of size, and of different signs (handled in add).\\n      *            As values may be of different sizes, inputs are considered starting from the least significant \\n      *            words, working back. \\n      *            The function calculates the new bitlen (basically if bitlens are the same for max and min, \\n      *            max_bitlen++) and returns a new BigNumber memory value.\\n      *\\n      * @param max bytes -  biggest value  (determined from add)\\n      * @param min bytes -  smallest value (determined from add)\\n      * @param max_bitlen uint - bit length of max value.\\n      * @return bytes result - max + min.\\n      * @return uint - bit length of result.\\n      */\\n    function _add(\\n        bytes memory max, \\n        bytes memory min, \\n        uint max_bitlen\\n    ) private pure returns (bytes memory, uint) {\\n        bytes memory result;\\n        assembly {\\n\\n            let result_start := mload(0x40)                                   // Get the highest available block of memory\\n            let carry := 0\\n            let uint_max := sub(0,1)\\n\\n            let max_ptr := add(max, mload(max))\\n            let min_ptr := add(min, mload(min))                               // point to last word of each byte array.\\n\\n            let result_ptr := add(add(result_start,0x20), mload(max))         // set result_ptr end.\\n\\n            for { let i := mload(max) } eq(eq(i,0),0) { i := sub(i, 0x20) } { // for(int i=max_length; i!=0; i-=32)\\n                let max_val := mload(max_ptr)                                 // get next word for 'max'\\n                switch gt(i,sub(mload(max),mload(min)))                       // if(i>(max_length-min_length)). while \\n                                                                              // 'min' words are still available.\\n                    case 1{ \\n                        let min_val := mload(min_ptr)                         //      get next word for 'min'\\n                        mstore(result_ptr, add(add(max_val,min_val),carry))   //      result_word = max_word+min_word+carry\\n                        switch gt(max_val, sub(uint_max,sub(min_val,carry)))  //      this switch block finds whether or\\n                                                                              //      not to set the carry bit for the\\n                                                                              //      next iteration.\\n                            case 1  { carry := 1 }\\n                            default {\\n                                switch and(eq(max_val,uint_max),or(gt(carry,0), gt(min_val,0)))\\n                                case 1 { carry := 1 }\\n                                default{ carry := 0 }\\n                            }\\n                            \\n                        min_ptr := sub(min_ptr,0x20)                       //       point to next 'min' word\\n                    }\\n                    default{                                               // else: remainder after 'min' words are complete.\\n                        mstore(result_ptr, add(max_val,carry))             //       result_word = max_word+carry\\n                        \\n                        switch and( eq(uint_max,max_val), eq(carry,1) )    //       this switch block finds whether or \\n                                                                           //       not to set the carry bit for the \\n                                                                           //       next iteration.\\n                            case 1  { carry := 1 }\\n                            default { carry := 0 }\\n                    }\\n                result_ptr := sub(result_ptr,0x20)                         // point to next 'result' word\\n                max_ptr := sub(max_ptr,0x20)                               // point to next 'max' word\\n            }\\n\\n            switch eq(carry,0) \\n                case 1{ result_start := add(result_start,0x20) }           // if carry is 0, increment result_start, ie.\\n                                                                           // length word for result is now one word \\n                                                                           // position ahead.\\n                default { mstore(result_ptr, 1) }                          // else if carry is 1, store 1; overflow has\\n                                                                           // occured, so length word remains in the \\n                                                                           // same position.\\n\\n            result := result_start                                         // point 'result' bytes value to the correct\\n                                                                           // address in memory.\\n            mstore(result,add(mload(max),mul(0x20,carry)))                 // store length of result. we are finished \\n                                                                           // with the byte array.\\n            \\n            mstore(0x40, add(result,add(mload(result),0x20)))              // Update freemem pointer to point to new \\n                                                                           // end of memory.\\n\\n            // we now calculate the result's bit length.\\n            // with addition, if we assume that some a is at least equal to some b, then the resulting bit length will\\n            // be a's bit length or (a's bit length)+1, depending on carry bit.this is cheaper than calling bitLength.\\n            let msword := mload(add(result,0x20))                             // get most significant word of result\\n            // if(msword==1 || msword>>(max_bitlen % 256)==1):\\n            if or( eq(msword, 1), eq(shr(mod(max_bitlen,256),msword),1) ) {\\n                    max_bitlen := add(max_bitlen, 1)                          // if msword's bit length is 1 greater \\n                                                                              // than max_bitlen, OR overflow occured,\\n                                                                              // new bitlen is max_bitlen+1.\\n                }\\n        }\\n        \\n\\n        return (result, max_bitlen);\\n    }\\n\\n    /** @notice takes two BigNumber memory values and subtracts them.\\n      * @dev _sub: This function is private and only callable from add: therefore the values may be of different sizes, \\n      *            in any order of size, and of different signs (handled in add).\\n      *            As values may be of different sizes, inputs are considered starting from the least significant words,\\n      *            working back. \\n      *            The function calculates the new bitlen (basically if bitlens are the same for max and min, \\n      *            max_bitlen++) and returns a new BigNumber memory value.\\n      *\\n      * @param max bytes -  biggest value  (determined from add)\\n      * @param min bytes -  smallest value (determined from add)\\n      * @return bytes result - max + min.\\n      * @return uint - bit length of result.\\n      */\\n    function _sub(\\n        bytes memory max, \\n        bytes memory min\\n    ) internal pure returns (bytes memory, uint) {\\n        bytes memory result;\\n        uint carry = 0;\\n        uint uint_max = type(uint256).max;\\n        assembly {\\n                \\n            let result_start := mload(0x40)                                 // Get the highest available block of \\n                                                                            // memory\\n        \\n            let max_len := mload(max)\\n            let min_len := mload(min)                                       // load lengths of inputs\\n            \\n            let len_diff := sub(max_len,min_len)                            // get differences in lengths.\\n            \\n            let max_ptr := add(max, max_len)\\n            let min_ptr := add(min, min_len)                                // go to end of arrays\\n            let result_ptr := add(result_start, max_len)                    // point to least significant result \\n                                                                            // word.\\n            let memory_end := add(result_ptr,0x20)                          // save memory_end to update free memory\\n                                                                            // pointer at the end.\\n            \\n            for { let i := max_len } eq(eq(i,0),0) { i := sub(i, 0x20) } {  // for(int i=max_length; i!=0; i-=32)\\n                let max_val := mload(max_ptr)                               // get next word for 'max'\\n                switch gt(i,len_diff)                                       // if(i>(max_length-min_length)). while\\n                                                                            // 'min' words are still available.\\n                    case 1{ \\n                        let min_val := mload(min_ptr)                       //  get next word for 'min'\\n        \\n                        mstore(result_ptr, sub(sub(max_val,min_val),carry)) //  result_word = (max_word-min_word)-carry\\n                    \\n                        switch or(lt(max_val, add(min_val,carry)), \\n                               and(eq(min_val,uint_max), eq(carry,1)))      //  this switch block finds whether or \\n                                                                            //  not to set the carry bit for the next iteration.\\n                            case 1  { carry := 1 }\\n                            default { carry := 0 }\\n                            \\n                        min_ptr := sub(min_ptr,0x20)                        //  point to next 'result' word\\n                    }\\n                    default {                                               // else: remainder after 'min' words are complete.\\n\\n                        mstore(result_ptr, sub(max_val,carry))              //      result_word = max_word-carry\\n                    \\n                        switch and( eq(max_val,0), eq(carry,1) )            //      this switch block finds whether or \\n                                                                            //      not to set the carry bit for the \\n                                                                            //      next iteration.\\n                            case 1  { carry := 1 }\\n                            default { carry := 0 }\\n\\n                    }\\n                result_ptr := sub(result_ptr,0x20)                          // point to next 'result' word\\n                max_ptr    := sub(max_ptr,0x20)                             // point to next 'max' word\\n            }      \\n\\n            //the following code removes any leading words containing all zeroes in the result.\\n            result_ptr := add(result_ptr,0x20)                                                 \\n\\n            // for(result_ptr+=32;; result==0; result_ptr+=32)\\n            for { }   eq(mload(result_ptr), 0) { result_ptr := add(result_ptr,0x20) } { \\n               result_start := add(result_start, 0x20)                      // push up the start pointer for the result\\n               max_len := sub(max_len,0x20)                                 // subtract a word (32 bytes) from the \\n                                                                            // result length.\\n            } \\n\\n            result := result_start                                          // point 'result' bytes value to \\n                                                                            // the correct address in memory\\n            \\n            mstore(result,max_len)                                          // store length of result. we \\n                                                                            // are finished with the byte array.\\n            \\n            mstore(0x40, memory_end)                                        // Update freemem pointer.\\n        }\\n\\n        uint new_bitlen = bitLength(result);                                // calculate the result's \\n                                                                            // bit length.\\n        \\n        return (result, new_bitlen);\\n    }\\n\\n    /** @notice gets the modulus value necessary for calculating exponetiation.\\n      * @dev _powModulus: we must pass the minimum modulus value which would return JUST the a^b part of the calculation\\n      *       in modexp. the rationale here is:\\n      *       if 'a' has n bits, then a^e has at most n*e bits.\\n      *       using this modulus in exponetiation will result in simply a^e.\\n      *       therefore the value may be many words long.\\n      *       This is done by:\\n      *         - storing total modulus byte length\\n      *         - storing first word of modulus with correct bit set\\n      *         - updating the free memory pointer to come after total length.\\n      *\\n      * @param a BigNumber base\\n      * @param e uint exponent\\n      * @return BigNumber modulus result\\n      */\\n    function _powModulus(\\n        BigNumber memory a, \\n        uint e\\n    ) private pure returns(BigNumber memory){\\n        bytes memory _modulus = ZERO;\\n        uint mod_index;\\n\\n        assembly {\\n            mod_index := mul(mload(add(a, 0x40)), e)               // a.bitlen * e is the max bitlength of result\\n            let first_word_modulus := shl(mod(mod_index, 256), 1)  // set bit in first modulus word.\\n            mstore(_modulus, mul(add(div(mod_index,256),1),0x20))  // store length of modulus\\n            mstore(add(_modulus,0x20), first_word_modulus)         // set first modulus word\\n            mstore(0x40, add(_modulus, add(mload(_modulus),0x20))) // update freemem pointer to be modulus index\\n                                                                   // + length\\n        }\\n\\n        //create modulus BigNumber memory for modexp function\\n        return BigNumber(_modulus, false, mod_index); \\n    }\\n\\n    /** @notice Modular Exponentiation: Takes bytes values for base, exp, mod and calls precompile for (base^exp)%^mod\\n      * @dev modexp: Wrapper for built-in modexp (contract 0x5) as described here: \\n      *              https://github.com/ethereum/EIPs/pull/198\\n      *\\n      * @param _b bytes base\\n      * @param _e bytes base_inverse \\n      * @param _m bytes exponent\\n      * @param r bytes result.\\n      */\\n    function _modexp(\\n        bytes memory _b, \\n        bytes memory _e, \\n        bytes memory _m\\n    ) private view returns(bytes memory r) {\\n        assembly {\\n            \\n            let bl := mload(_b)\\n            let el := mload(_e)\\n            let ml := mload(_m)\\n            \\n            \\n            let freemem := mload(0x40)  // Free memory pointer is always stored at 0x40\\n            \\n            \\n            mstore(freemem, bl)         // arg[0] = base.length @ +0\\n            \\n            mstore(add(freemem,32), el) // arg[1] = exp.length @ +32\\n            \\n            mstore(add(freemem,64), ml) // arg[2] = mod.length @ +64\\n            \\n            // arg[3] = base.bits @ + 96\\n            // Use identity built-in (contract 0x4) as a cheap memcpy\\n            let success := staticcall(450, 0x4, add(_b,32), bl, add(freemem,96), bl)\\n            \\n            // arg[4] = exp.bits @ +96+base.length\\n            let size := add(96, bl)\\n            success := staticcall(450, 0x4, add(_e,32), el, add(freemem,size), el)\\n            \\n            // arg[5] = mod.bits @ +96+base.length+exp.length\\n            size := add(size,el)\\n            success := staticcall(450, 0x4, add(_m,32), ml, add(freemem,size), ml)\\n            \\n            switch success case 0 { invalid() } //fail where we haven't enough gas to make the call\\n\\n            // Total size of input = 96+base.length+exp.length+mod.length\\n            size := add(size,ml)\\n            // Invoke contract 0x5, put return value right after mod.length, @ +96\\n            success := staticcall(sub(gas(), 1350), 0x5, freemem, size, add(freemem, 0x60), ml)\\n\\n            switch success case 0 { invalid() } //fail where we haven't enough gas to make the call\\n\\n            let length := ml\\n            let msword_ptr := add(freemem, 0x60)\\n\\n            ///the following code removes any leading words containing all zeroes in the result.\\n            for { } eq ( eq(length, 0x20), 0) { } {                   // for(; length!=32; length-=32)\\n                switch eq(mload(msword_ptr),0)                        // if(msword==0):\\n                    case 1 { msword_ptr := add(msword_ptr, 0x20) }    //     update length pointer\\n                    default { break }                                 // else: loop termination. non-zero word found\\n                length := sub(length,0x20)                          \\n            } \\n            r := sub(msword_ptr,0x20)\\n            mstore(r, length)\\n            \\n            // point to the location of the return value (length, bits)\\n            //assuming mod length is multiple of 32, return value is already in the right format.\\n            mstore(0x40, add(add(96, freemem),ml)) //deallocate freemem pointer\\n        }        \\n    }\\n    // ***************** END PRIVATE CORE CALCULATION FUNCTIONS ******************\\n\\n\\n\\n\\n\\n    // ***************** START PRIVATE HELPER FUNCTIONS ******************\\n    /** @notice left shift BigNumber memory 'dividend' by 'value' bits.\\n      * @param bn value to shift\\n      * @param bits amount of bits to shift by\\n      * @return r result\\n      */\\n    function _shl(\\n        BigNumber memory bn, \\n        uint bits\\n    ) private view returns(BigNumber memory r) {\\n        if(bits==0 || bn.bitlen==0) return bn;\\n        \\n        // we start by creating an empty bytes array of the size of the output, based on 'bits'.\\n        // for that we must get the amount of extra words needed for the output.\\n        uint length = bn.val.length;\\n        // position of bitlen in most significnat word\\n        uint bit_position = ((bn.bitlen-1) % 256) + 1;\\n        // total extra words. we check if the bits remainder will add one more word.\\n        uint extra_words = (bits / 256) + ( (bits % 256) >= (256 - bit_position) ? 1 : 0);\\n        // length of output\\n        uint total_length = length + (extra_words * 0x20);\\n\\n        r.bitlen = bn.bitlen+(bits);\\n        r.neg = bn.neg;\\n        bits %= 256;\\n\\n        \\n        bytes memory bn_shift;\\n        uint bn_shift_ptr;\\n        // the following efficiently creates an empty byte array of size 'total_length'\\n        assembly {\\n            let freemem_ptr := mload(0x40)                // get pointer to free memory\\n            mstore(freemem_ptr, total_length)             // store bytes length\\n            let mem_end := add(freemem_ptr, total_length) // end of memory\\n            mstore(mem_end, 0)                            // store 0 at memory end\\n            bn_shift := freemem_ptr                       // set pointer to bytes\\n            bn_shift_ptr := add(bn_shift, 0x20)           // get bn_shift pointer\\n            mstore(0x40, add(mem_end, 0x20))              // update freemem pointer\\n        }\\n\\n        // use identity for cheap copy if bits is multiple of 8.\\n        if(bits % 8 == 0) {\\n            // calculate the position of the first byte in the result.\\n            uint bytes_pos = ((256-(((bn.bitlen-1)+bits) % 256))-1) / 8;\\n            uint insize = (bn.bitlen / 8) + ((bn.bitlen % 8 != 0) ? 1 : 0);\\n            assembly {\\n              let in          := add(add(mload(bn), 0x20), div(sub(256, bit_position), 8))\\n              let out         := add(bn_shift_ptr, bytes_pos)\\n              let success     := staticcall(450, 0x4, in, insize, out, length)\\n            }\\n            r.val = bn_shift;\\n            return r;\\n        }\\n\\n\\n        uint mask;\\n        uint mask_shift = 0x100-bits;\\n        uint msw;\\n        uint msw_ptr;\\n\\n       assembly {\\n           msw_ptr := add(mload(bn), 0x20)   \\n       }\\n        \\n       // handle first word before loop if the shift adds any extra words.\\n       // the loop would handle it if the bit shift doesn't wrap into the next word, \\n       // so we check only for that condition.\\n       if((bit_position+bits) > 256){\\n           assembly {\\n              msw := mload(msw_ptr)\\n              mstore(bn_shift_ptr, shr(mask_shift, msw))\\n              bn_shift_ptr := add(bn_shift_ptr, 0x20)\\n           }\\n       }\\n        \\n       // as a result of creating the empty array we just have to operate on the words in the original bn.\\n       for(uint i=bn.val.length; i!=0; i-=0x20){                  // for each word:\\n           assembly {\\n               msw := mload(msw_ptr)                              // get most significant word\\n               switch eq(i,0x20)                                  // if i==32:\\n                   case 1 { mask := 0 }                           // handles msword: no mask needed.\\n                   default { mask := mload(add(msw_ptr,0x20)) }   // else get mask (next word)\\n               msw := shl(bits, msw)                              // left shift current msw by 'bits'\\n               mask := shr(mask_shift, mask)                      // right shift next significant word by mask_shift\\n               mstore(bn_shift_ptr, or(msw,mask))                 // store OR'd mask and shifted bits in-place\\n               msw_ptr := add(msw_ptr, 0x20)\\n               bn_shift_ptr := add(bn_shift_ptr, 0x20)\\n           }\\n       }\\n\\n       r.val = bn_shift;\\n    }\\n    // ***************** END PRIVATE HELPER FUNCTIONS ******************\\n}\\n\"\n    },\n    \"solidity-cborutils/contracts/CBOR.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000\n    },\n    \"evmVersion\": \"paris\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "a2b447bce5f4b29807c1345ea4b6db5c",
      "transactionHash": "0x706025ac4f95c6c55c71e85c42188015e0e0f6c4eb9f521fe4197a81b77c619e",
      "args": []
    },
    "decoded": {
      "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
      "maxFeePerGas": "175738",
      "maxPriorityFeePerGas": "175612",
      "gasLimit": "168814597",
      "to": null,
      "value": "0",
      "nonce": 1135,
      "data": "",
      "r": "0x7ab37585472dccc85ec7c8d705862d09c3022cdbc797c9bd34b02ce24128372c",
      "s": "0x7b75f9cea85d00e01ae2880591f542e7c64fcb52f8cc143439235dc972b67a62",
      "v": 0,
      "chainId": 314159
    }
  }
}