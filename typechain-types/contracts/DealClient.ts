/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ExtraParamsV1Struct = {
  location_ref: string;
  car_size: BigNumberish;
  skip_ipni_announce: boolean;
  remove_unsealed_copy: boolean;
};

export type ExtraParamsV1StructOutput = [
  location_ref: string,
  car_size: bigint,
  skip_ipni_announce: boolean,
  remove_unsealed_copy: boolean
] & {
  location_ref: string;
  car_size: bigint;
  skip_ipni_announce: boolean;
  remove_unsealed_copy: boolean;
};

export type DealRequestStruct = {
  piece_cid: BytesLike;
  piece_size: BigNumberish;
  verified_deal: boolean;
  label: string;
  start_epoch: BigNumberish;
  end_epoch: BigNumberish;
  storage_price_per_epoch: BigNumberish;
  provider_collateral: BigNumberish;
  client_collateral: BigNumberish;
  extra_params_version: BigNumberish;
  extra_params: ExtraParamsV1Struct;
};

export type DealRequestStructOutput = [
  piece_cid: string,
  piece_size: bigint,
  verified_deal: boolean,
  label: string,
  start_epoch: bigint,
  end_epoch: bigint,
  storage_price_per_epoch: bigint,
  provider_collateral: bigint,
  client_collateral: bigint,
  extra_params_version: bigint,
  extra_params: ExtraParamsV1StructOutput
] & {
  piece_cid: string;
  piece_size: bigint;
  verified_deal: boolean;
  label: string;
  start_epoch: bigint;
  end_epoch: bigint;
  storage_price_per_epoch: bigint;
  provider_collateral: bigint;
  client_collateral: bigint;
  extra_params_version: bigint;
  extra_params: ExtraParamsV1StructOutput;
};

export type RequestIdStruct = { requestId: BytesLike; valid: boolean };

export type RequestIdStructOutput = [requestId: string, valid: boolean] & {
  requestId: string;
  valid: boolean;
};

export type ProviderSetStruct = { provider: BytesLike; valid: boolean };

export type ProviderSetStructOutput = [provider: string, valid: boolean] & {
  provider: string;
  valid: boolean;
};

export interface DealClientInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUTHENTICATE_MESSAGE_METHOD_NUM"
      | "DATACAP_ACTOR_ETH_ADDRESS"
      | "DATACAP_RECEIVER_HOOK_METHOD_NUM"
      | "MARKET_ACTOR_ETH_ADDRESS"
      | "MARKET_NOTIFY_DEAL_METHOD_NUM"
      | "addBalance"
      | "dealRequestIdx"
      | "dealRequests"
      | "dealsLength"
      | "getDealByIndex"
      | "getDealProposal"
      | "getExtraParams"
      | "getProposalIdSet"
      | "getProviderSet"
      | "handle_filecoin_method"
      | "makeDealProposal"
      | "owner"
      | "pieceDeals"
      | "pieceProviders"
      | "pieceRequests"
      | "pieceStatus"
      | "updateActivationStatus"
      | "withdrawBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DealProposalCreate" | "ReceivedDataCap"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUTHENTICATE_MESSAGE_METHOD_NUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DATACAP_ACTOR_ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DATACAP_RECEIVER_HOOK_METHOD_NUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_ACTOR_ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_NOTIFY_DEAL_METHOD_NUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dealRequestIdx",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dealRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dealsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDealByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExtraParams",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalIdSet",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderSet",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handle_filecoin_method",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeDealProposal",
    values: [DealRequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pieceDeals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pieceProviders",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pieceRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pieceStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateActivationStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUTHENTICATE_MESSAGE_METHOD_NUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DATACAP_ACTOR_ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DATACAP_RECEIVER_HOOK_METHOD_NUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_ACTOR_ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_NOTIFY_DEAL_METHOD_NUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dealRequestIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExtraParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalIdSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handle_filecoin_method",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeDealProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pieceDeals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pieceProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pieceRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pieceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateActivationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
}

export namespace DealProposalCreateEvent {
  export type InputTuple = [
    id: BytesLike,
    size: BigNumberish,
    verified: boolean,
    price: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    size: bigint,
    verified: boolean,
    price: bigint
  ];
  export interface OutputObject {
    id: string;
    size: bigint;
    verified: boolean;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedDataCapEvent {
  export type InputTuple = [received: string];
  export type OutputTuple = [received: string];
  export interface OutputObject {
    received: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DealClient extends BaseContract {
  connect(runner?: ContractRunner | null): DealClient;
  waitForDeployment(): Promise<this>;

  interface: DealClientInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUTHENTICATE_MESSAGE_METHOD_NUM: TypedContractMethod<[], [bigint], "view">;

  DATACAP_ACTOR_ETH_ADDRESS: TypedContractMethod<[], [string], "view">;

  DATACAP_RECEIVER_HOOK_METHOD_NUM: TypedContractMethod<[], [bigint], "view">;

  MARKET_ACTOR_ETH_ADDRESS: TypedContractMethod<[], [string], "view">;

  MARKET_NOTIFY_DEAL_METHOD_NUM: TypedContractMethod<[], [bigint], "view">;

  addBalance: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  dealRequestIdx: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, boolean] & { idx: bigint; valid: boolean }],
    "view"
  >;

  dealRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        ExtraParamsV1StructOutput
      ] & {
        piece_cid: string;
        piece_size: bigint;
        verified_deal: boolean;
        label: string;
        start_epoch: bigint;
        end_epoch: bigint;
        storage_price_per_epoch: bigint;
        provider_collateral: bigint;
        client_collateral: bigint;
        extra_params_version: bigint;
        extra_params: ExtraParamsV1StructOutput;
      }
    ],
    "view"
  >;

  dealsLength: TypedContractMethod<[], [bigint], "view">;

  getDealByIndex: TypedContractMethod<
    [index: BigNumberish],
    [DealRequestStructOutput],
    "view"
  >;

  getDealProposal: TypedContractMethod<
    [proposalId: BytesLike],
    [string],
    "view"
  >;

  getExtraParams: TypedContractMethod<
    [proposalId: BytesLike],
    [string],
    "view"
  >;

  getProposalIdSet: TypedContractMethod<
    [cid: BytesLike],
    [RequestIdStructOutput],
    "view"
  >;

  getProviderSet: TypedContractMethod<
    [cid: BytesLike],
    [ProviderSetStructOutput],
    "view"
  >;

  handle_filecoin_method: TypedContractMethod<
    [method: BigNumberish, arg1: BigNumberish, params: BytesLike],
    [[bigint, bigint, string]],
    "nonpayable"
  >;

  makeDealProposal: TypedContractMethod<
    [deal: DealRequestStruct],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pieceDeals: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  pieceProviders: TypedContractMethod<
    [arg0: BytesLike],
    [[string, boolean] & { provider: string; valid: boolean }],
    "view"
  >;

  pieceRequests: TypedContractMethod<
    [arg0: BytesLike],
    [[string, boolean] & { requestId: string; valid: boolean }],
    "view"
  >;

  pieceStatus: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  updateActivationStatus: TypedContractMethod<
    [pieceCid: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawBalance: TypedContractMethod<
    [client: AddressLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUTHENTICATE_MESSAGE_METHOD_NUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DATACAP_ACTOR_ETH_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DATACAP_RECEIVER_HOOK_METHOD_NUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MARKET_ACTOR_ETH_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MARKET_NOTIFY_DEAL_METHOD_NUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addBalance"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dealRequestIdx"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, boolean] & { idx: bigint; valid: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "dealRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        ExtraParamsV1StructOutput
      ] & {
        piece_cid: string;
        piece_size: bigint;
        verified_deal: boolean;
        label: string;
        start_epoch: bigint;
        end_epoch: bigint;
        storage_price_per_epoch: bigint;
        provider_collateral: bigint;
        client_collateral: bigint;
        extra_params_version: bigint;
        extra_params: ExtraParamsV1StructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "dealsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDealByIndex"
  ): TypedContractMethod<
    [index: BigNumberish],
    [DealRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDealProposal"
  ): TypedContractMethod<[proposalId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getExtraParams"
  ): TypedContractMethod<[proposalId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getProposalIdSet"
  ): TypedContractMethod<[cid: BytesLike], [RequestIdStructOutput], "view">;
  getFunction(
    nameOrSignature: "getProviderSet"
  ): TypedContractMethod<[cid: BytesLike], [ProviderSetStructOutput], "view">;
  getFunction(
    nameOrSignature: "handle_filecoin_method"
  ): TypedContractMethod<
    [method: BigNumberish, arg1: BigNumberish, params: BytesLike],
    [[bigint, bigint, string]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "makeDealProposal"
  ): TypedContractMethod<[deal: DealRequestStruct], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pieceDeals"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pieceProviders"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[string, boolean] & { provider: string; valid: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "pieceRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[string, boolean] & { requestId: string; valid: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "pieceStatus"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateActivationStatus"
  ): TypedContractMethod<[pieceCid: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawBalance"
  ): TypedContractMethod<
    [client: AddressLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "DealProposalCreate"
  ): TypedContractEvent<
    DealProposalCreateEvent.InputTuple,
    DealProposalCreateEvent.OutputTuple,
    DealProposalCreateEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedDataCap"
  ): TypedContractEvent<
    ReceivedDataCapEvent.InputTuple,
    ReceivedDataCapEvent.OutputTuple,
    ReceivedDataCapEvent.OutputObject
  >;

  filters: {
    "DealProposalCreate(bytes32,uint64,bool,uint256)": TypedContractEvent<
      DealProposalCreateEvent.InputTuple,
      DealProposalCreateEvent.OutputTuple,
      DealProposalCreateEvent.OutputObject
    >;
    DealProposalCreate: TypedContractEvent<
      DealProposalCreateEvent.InputTuple,
      DealProposalCreateEvent.OutputTuple,
      DealProposalCreateEvent.OutputObject
    >;

    "ReceivedDataCap(string)": TypedContractEvent<
      ReceivedDataCapEvent.InputTuple,
      ReceivedDataCapEvent.OutputTuple,
      ReceivedDataCapEvent.OutputObject
    >;
    ReceivedDataCap: TypedContractEvent<
      ReceivedDataCapEvent.InputTuple,
      ReceivedDataCapEvent.OutputTuple,
      ReceivedDataCapEvent.OutputObject
    >;
  };
}
