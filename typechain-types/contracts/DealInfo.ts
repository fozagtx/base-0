/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CommonTypes {
  export type DealLabelStruct = { data: BytesLike; isString: boolean };

  export type DealLabelStructOutput = [data: string, isString: boolean] & {
    data: string;
    isString: boolean;
  };

  export type BigIntStruct = { val: BytesLike; neg: boolean };

  export type BigIntStructOutput = [val: string, neg: boolean] & {
    val: string;
    neg: boolean;
  };
}

export declare namespace MarketTypes {
  export type GetDealDataCommitmentReturnStruct = {
    data: BytesLike;
    size: BigNumberish;
  };

  export type GetDealDataCommitmentReturnStructOutput = [
    data: string,
    size: bigint
  ] & { data: string; size: bigint };

  export type GetDealTermReturnStruct = {
    start: BigNumberish;
    duration: BigNumberish;
  };

  export type GetDealTermReturnStructOutput = [
    start: bigint,
    duration: bigint
  ] & { start: bigint; duration: bigint };

  export type GetDealActivationReturnStruct = {
    activated: BigNumberish;
    terminated: BigNumberish;
  };

  export type GetDealActivationReturnStructOutput = [
    activated: bigint,
    terminated: bigint
  ] & { activated: bigint; terminated: bigint };
}

export declare namespace DealInfo {
  export type DealDataStruct = {
    dealLabel: CommonTypes.DealLabelStruct;
    dealClientActorId: BigNumberish;
    dealProviderActorId: BigNumberish;
    dealCommitment: MarketTypes.GetDealDataCommitmentReturnStruct;
    dealTerm: MarketTypes.GetDealTermReturnStruct;
    dealPricePerEpoch: CommonTypes.BigIntStruct;
    clientCollateral: CommonTypes.BigIntStruct;
    providerCollateral: CommonTypes.BigIntStruct;
    isDealActivated: boolean;
    activationStatus: MarketTypes.GetDealActivationReturnStruct;
  };

  export type DealDataStructOutput = [
    dealLabel: CommonTypes.DealLabelStructOutput,
    dealClientActorId: bigint,
    dealProviderActorId: bigint,
    dealCommitment: MarketTypes.GetDealDataCommitmentReturnStructOutput,
    dealTerm: MarketTypes.GetDealTermReturnStructOutput,
    dealPricePerEpoch: CommonTypes.BigIntStructOutput,
    clientCollateral: CommonTypes.BigIntStructOutput,
    providerCollateral: CommonTypes.BigIntStructOutput,
    isDealActivated: boolean,
    activationStatus: MarketTypes.GetDealActivationReturnStructOutput
  ] & {
    dealLabel: CommonTypes.DealLabelStructOutput;
    dealClientActorId: bigint;
    dealProviderActorId: bigint;
    dealCommitment: MarketTypes.GetDealDataCommitmentReturnStructOutput;
    dealTerm: MarketTypes.GetDealTermReturnStructOutput;
    dealPricePerEpoch: CommonTypes.BigIntStructOutput;
    clientCollateral: CommonTypes.BigIntStructOutput;
    providerCollateral: CommonTypes.BigIntStructOutput;
    isDealActivated: boolean;
    activationStatus: MarketTypes.GetDealActivationReturnStructOutput;
  };
}

export interface DealInfoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllDealData"
      | "getClientCollateral"
      | "getDealActivationStatus"
      | "getDealClient"
      | "getDealCommitment"
      | "getDealLabel"
      | "getDealProvider"
      | "getDealTerm"
      | "getDealTotalPrice"
      | "getDealVerification"
      | "getProviderCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllDealData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClientCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealActivationStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealClient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealCommitment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealLabel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealProvider",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealTerm",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealTotalPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDealVerification",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderCollateral",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllDealData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClientCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealActivationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealTerm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderCollateral",
    data: BytesLike
  ): Result;
}

export interface DealInfo extends BaseContract {
  connect(runner?: ContractRunner | null): DealInfo;
  waitForDeployment(): Promise<this>;

  interface: DealInfoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllDealData: TypedContractMethod<
    [dealId: BigNumberish],
    [DealInfo.DealDataStructOutput],
    "view"
  >;

  getClientCollateral: TypedContractMethod<
    [dealId: BigNumberish],
    [CommonTypes.BigIntStructOutput],
    "view"
  >;

  getDealActivationStatus: TypedContractMethod<
    [dealId: BigNumberish],
    [MarketTypes.GetDealActivationReturnStructOutput],
    "view"
  >;

  getDealClient: TypedContractMethod<[dealId: BigNumberish], [bigint], "view">;

  getDealCommitment: TypedContractMethod<
    [dealId: BigNumberish],
    [MarketTypes.GetDealDataCommitmentReturnStructOutput],
    "view"
  >;

  getDealLabel: TypedContractMethod<
    [dealId: BigNumberish],
    [CommonTypes.DealLabelStructOutput],
    "view"
  >;

  getDealProvider: TypedContractMethod<
    [dealId: BigNumberish],
    [bigint],
    "view"
  >;

  getDealTerm: TypedContractMethod<
    [dealId: BigNumberish],
    [MarketTypes.GetDealTermReturnStructOutput],
    "view"
  >;

  getDealTotalPrice: TypedContractMethod<
    [dealId: BigNumberish],
    [CommonTypes.BigIntStructOutput],
    "view"
  >;

  getDealVerification: TypedContractMethod<
    [dealId: BigNumberish],
    [boolean],
    "view"
  >;

  getProviderCollateral: TypedContractMethod<
    [dealId: BigNumberish],
    [CommonTypes.BigIntStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllDealData"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [DealInfo.DealDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClientCollateral"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [CommonTypes.BigIntStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDealActivationStatus"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [MarketTypes.GetDealActivationReturnStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDealClient"
  ): TypedContractMethod<[dealId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDealCommitment"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [MarketTypes.GetDealDataCommitmentReturnStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDealLabel"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [CommonTypes.DealLabelStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDealProvider"
  ): TypedContractMethod<[dealId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDealTerm"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [MarketTypes.GetDealTermReturnStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDealTotalPrice"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [CommonTypes.BigIntStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDealVerification"
  ): TypedContractMethod<[dealId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getProviderCollateral"
  ): TypedContractMethod<
    [dealId: BigNumberish],
    [CommonTypes.BigIntStructOutput],
    "view"
  >;

  filters: {};
}
