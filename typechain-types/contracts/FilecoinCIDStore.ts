/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FilecoinCIDStoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMarketBalance"
      | "checkDealActivation"
      | "getAllActiveContent"
      | "getCID"
      | "getContentInfo"
      | "getUserOwnedContent"
      | "getUserPurchasedContent"
      | "hasAccess"
      | "next_content_id"
      | "piece_cid_to_content"
      | "platform_fee_percentage"
      | "platform_owner"
      | "purchaseAccess"
      | "setPlatformFee"
      | "storeContent"
      | "stored_content"
      | "updateContentStatus"
      | "updateDealStatus"
      | "user_access"
      | "user_owned_content"
      | "user_purchased_content"
      | "withdrawMarketBalance"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessPurchased"
      | "CIDRetrieved"
      | "ContentStored"
      | "DealActivated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addMarketBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDealActivation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveContent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContentInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOwnedContent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPurchasedContent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "next_content_id",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "piece_cid_to_content",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "platform_fee_percentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platform_owner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseAccess",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeContent",
    values: [BytesLike, string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stored_content",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContentStatus",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDealStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_access",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "user_owned_content",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_purchased_content",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMarketBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addMarketBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDealActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOwnedContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPurchasedContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "next_content_id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "piece_cid_to_content",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platform_fee_percentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platform_owner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stored_content",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDealStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_access",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_owned_content",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_purchased_content",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMarketBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace AccessPurchasedEvent {
  export type InputTuple = [
    content_id: BigNumberish,
    buyer: AddressLike,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    content_id: bigint,
    buyer: string,
    seller: string,
    price: bigint
  ];
  export interface OutputObject {
    content_id: bigint;
    buyer: string;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CIDRetrievedEvent {
  export type InputTuple = [
    content_id: BigNumberish,
    user: AddressLike,
    data_cid: string
  ];
  export type OutputTuple = [
    content_id: bigint,
    user: string,
    data_cid: string
  ];
  export interface OutputObject {
    content_id: bigint;
    user: string;
    data_cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContentStoredEvent {
  export type InputTuple = [
    content_id: BigNumberish,
    owner: AddressLike,
    piece_cid: BytesLike,
    data_cid: string,
    price: BigNumberish,
    title: string
  ];
  export type OutputTuple = [
    content_id: bigint,
    owner: string,
    piece_cid: string,
    data_cid: string,
    price: bigint,
    title: string
  ];
  export interface OutputObject {
    content_id: bigint;
    owner: string;
    piece_cid: string;
    data_cid: string;
    price: bigint;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DealActivatedEvent {
  export type InputTuple = [content_id: BigNumberish, deal_id: BigNumberish];
  export type OutputTuple = [content_id: bigint, deal_id: bigint];
  export interface OutputObject {
    content_id: bigint;
    deal_id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FilecoinCIDStore extends BaseContract {
  connect(runner?: ContractRunner | null): FilecoinCIDStore;
  waitForDeployment(): Promise<this>;

  interface: FilecoinCIDStoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMarketBalance: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkDealActivation: TypedContractMethod<
    [_content_id: BigNumberish],
    [boolean],
    "view"
  >;

  getAllActiveContent: TypedContractMethod<[], [bigint[]], "view">;

  getCID: TypedContractMethod<
    [_content_id: BigNumberish],
    [string],
    "nonpayable"
  >;

  getContentInfo: TypedContractMethod<
    [_content_id: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        title: string;
        description: string;
        price: bigint;
        owner: string;
        is_active: boolean;
        created_at: bigint;
        deal_id: bigint;
        piece_size: bigint;
        user_has_access: boolean;
      }
    ],
    "view"
  >;

  getUserOwnedContent: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserPurchasedContent: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  hasAccess: TypedContractMethod<
    [_content_id: BigNumberish, _user: AddressLike],
    [boolean],
    "view"
  >;

  next_content_id: TypedContractMethod<[], [bigint], "view">;

  piece_cid_to_content: TypedContractMethod<
    [arg0: BytesLike],
    [bigint],
    "view"
  >;

  platform_fee_percentage: TypedContractMethod<[], [bigint], "view">;

  platform_owner: TypedContractMethod<[], [string], "view">;

  purchaseAccess: TypedContractMethod<
    [_content_id: BigNumberish],
    [void],
    "payable"
  >;

  setPlatformFee: TypedContractMethod<
    [_fee_percentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  storeContent: TypedContractMethod<
    [
      _piece_cid: BytesLike,
      _data_cid: string,
      _price: BigNumberish,
      _title: string,
      _description: string,
      _piece_size: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  stored_content: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        piece_cid: string;
        data_cid: string;
        price: bigint;
        owner: string;
        title: string;
        description: string;
        piece_size: bigint;
        deal_id: bigint;
        is_active: boolean;
        created_at: bigint;
        total_earnings: bigint;
        access_count: bigint;
      }
    ],
    "view"
  >;

  updateContentStatus: TypedContractMethod<
    [_content_id: BigNumberish, _new_price: BigNumberish, _is_active: boolean],
    [void],
    "nonpayable"
  >;

  updateDealStatus: TypedContractMethod<
    [_content_id: BigNumberish, _deal_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  user_access: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [boolean, bigint, bigint] & {
        has_access: boolean;
        purchased_at: bigint;
        expires_at: bigint;
      }
    ],
    "view"
  >;

  user_owned_content: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  user_purchased_content: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawMarketBalance: TypedContractMethod<
    [_value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawPlatformFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMarketBalance"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkDealActivation"
  ): TypedContractMethod<[_content_id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllActiveContent"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCID"
  ): TypedContractMethod<[_content_id: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getContentInfo"
  ): TypedContractMethod<
    [_content_id: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        title: string;
        description: string;
        price: bigint;
        owner: string;
        is_active: boolean;
        created_at: bigint;
        deal_id: bigint;
        piece_size: bigint;
        user_has_access: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserOwnedContent"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserPurchasedContent"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasAccess"
  ): TypedContractMethod<
    [_content_id: BigNumberish, _user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "next_content_id"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "piece_cid_to_content"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "platform_fee_percentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platform_owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseAccess"
  ): TypedContractMethod<[_content_id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<[_fee_percentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storeContent"
  ): TypedContractMethod<
    [
      _piece_cid: BytesLike,
      _data_cid: string,
      _price: BigNumberish,
      _title: string,
      _description: string,
      _piece_size: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stored_content"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        piece_cid: string;
        data_cid: string;
        price: bigint;
        owner: string;
        title: string;
        description: string;
        piece_size: bigint;
        deal_id: bigint;
        is_active: boolean;
        created_at: bigint;
        total_earnings: bigint;
        access_count: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateContentStatus"
  ): TypedContractMethod<
    [_content_id: BigNumberish, _new_price: BigNumberish, _is_active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDealStatus"
  ): TypedContractMethod<
    [_content_id: BigNumberish, _deal_id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "user_access"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [boolean, bigint, bigint] & {
        has_access: boolean;
        purchased_at: bigint;
        expires_at: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "user_owned_content"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "user_purchased_content"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawMarketBalance"
  ): TypedContractMethod<[_value: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AccessPurchased"
  ): TypedContractEvent<
    AccessPurchasedEvent.InputTuple,
    AccessPurchasedEvent.OutputTuple,
    AccessPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "CIDRetrieved"
  ): TypedContractEvent<
    CIDRetrievedEvent.InputTuple,
    CIDRetrievedEvent.OutputTuple,
    CIDRetrievedEvent.OutputObject
  >;
  getEvent(
    key: "ContentStored"
  ): TypedContractEvent<
    ContentStoredEvent.InputTuple,
    ContentStoredEvent.OutputTuple,
    ContentStoredEvent.OutputObject
  >;
  getEvent(
    key: "DealActivated"
  ): TypedContractEvent<
    DealActivatedEvent.InputTuple,
    DealActivatedEvent.OutputTuple,
    DealActivatedEvent.OutputObject
  >;

  filters: {
    "AccessPurchased(uint256,address,address,uint256)": TypedContractEvent<
      AccessPurchasedEvent.InputTuple,
      AccessPurchasedEvent.OutputTuple,
      AccessPurchasedEvent.OutputObject
    >;
    AccessPurchased: TypedContractEvent<
      AccessPurchasedEvent.InputTuple,
      AccessPurchasedEvent.OutputTuple,
      AccessPurchasedEvent.OutputObject
    >;

    "CIDRetrieved(uint256,address,string)": TypedContractEvent<
      CIDRetrievedEvent.InputTuple,
      CIDRetrievedEvent.OutputTuple,
      CIDRetrievedEvent.OutputObject
    >;
    CIDRetrieved: TypedContractEvent<
      CIDRetrievedEvent.InputTuple,
      CIDRetrievedEvent.OutputTuple,
      CIDRetrievedEvent.OutputObject
    >;

    "ContentStored(uint256,address,bytes,string,uint256,string)": TypedContractEvent<
      ContentStoredEvent.InputTuple,
      ContentStoredEvent.OutputTuple,
      ContentStoredEvent.OutputObject
    >;
    ContentStored: TypedContractEvent<
      ContentStoredEvent.InputTuple,
      ContentStoredEvent.OutputTuple,
      ContentStoredEvent.OutputObject
    >;

    "DealActivated(uint256,uint64)": TypedContractEvent<
      DealActivatedEvent.InputTuple,
      DealActivatedEvent.OutputTuple,
      DealActivatedEvent.OutputObject
    >;
    DealActivated: TypedContractEvent<
      DealActivatedEvent.InputTuple,
      DealActivatedEvent.OutputTuple,
      DealActivatedEvent.OutputObject
    >;
  };
}
